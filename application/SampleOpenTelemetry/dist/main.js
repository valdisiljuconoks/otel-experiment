/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/document-load.js":
/*!*********************************!*\
  !*** ./assets/document-load.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/resources */ \"./node_modules/@opentelemetry/resources/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_propagator_b3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/propagator-b3 */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_exporter_trace_otlp_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/exporter-trace-otlp-http */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_instrumentation_document_load__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/instrumentation-document-load */ \"./node_modules/@opentelemetry/instrumentation-document-load/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_instrumentation_xml_http_request__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/instrumentation-xml-http-request */ \"./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_context_zone__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/context-zone */ \"./node_modules/@opentelemetry/context-zone/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @opentelemetry/instrumentation */ \"./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nï»¿\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.setLogger(\r\n    new _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagConsoleLogger(),\r\n    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.VERBOSE\r\n);\r\n\r\nconst provider = new _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_5__.WebTracerProvider({\r\n    resource: new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_2__.Resource({\r\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.SERVICE_NAME]: \"SampleOpenTelemetry\"\r\n    })\r\n});\r\n\r\nconst config = {\r\n    url: \"http://localhost:4318/v1/traces\",\r\n    headers: {},\r\n    concurrencyLimit: 10\r\n};\r\n\r\nprovider.addSpanProcessor(new _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_6__.SimpleSpanProcessor(new _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_6__.ConsoleSpanExporter()));\r\nprovider.addSpanProcessor(new _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_6__.SimpleSpanProcessor(new _opentelemetry_exporter_trace_otlp_http__WEBPACK_IMPORTED_MODULE_7__.OTLPTraceExporter(config)));\r\n\r\nprovider.register({\r\n    contextManager: new _opentelemetry_context_zone__WEBPACK_IMPORTED_MODULE_10__.ZoneContextManager(),\r\n    propagator: new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.CompositePropagator({\r\n        propagators: [\r\n            new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.W3CTraceContextPropagator(),\r\n            new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.W3CBaggagePropagator()\r\n        ],\r\n    }),\r\n});\r\n\r\n(0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_11__.registerInstrumentations)({\r\n    instrumentations: [\r\n        //new DocumentLoadInstrumentation(),\r\n        new _opentelemetry_instrumentation_xml_http_request__WEBPACK_IMPORTED_MODULE_9__.XMLHttpRequestInstrumentation({\r\n            propagateTraceHeaderCorsUrls: /https:\\/\\/localhost:7259.+/,\r\n        })\r\n    ]\r\n});\r\n\r\nconst tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getTracer('SampleOpenTelemetry');\r\n\r\nwindow.onload = () => {\r\n    const btn = document.getElementById('ajax-call-button');\r\n\r\n    btn.addEventListener('click', () => {\r\n\r\n        const metaElement = Array.from(document.getElementsByTagName('meta')).find(e => e.getAttribute('name') === 'traceparent');\r\n        const traceparent = (metaElement && metaElement.content) || '';\r\n\r\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.setBaggage(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active(), _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.createBaggage({ \"product.id\": 12345 }));\r\n        const span = tracer.startSpan(\"Calling compute for FE...\", {}, _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.extract(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT, { traceparent }));\r\n\r\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context[\"with\"](_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active(), span), () => {\r\n            var xhttp = new XMLHttpRequest();\r\n            xhttp.open('GET', 'https://localhost:7259/compute-for-frontend', false);\r\n            xhttp.send();\r\n        });\r\n\r\n        span.end();\r\n    });\r\n}\n\n//# sourceURL=webpack://SampleOpenTelemetry/./assets/document-load.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/NoopMeter.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/NoopMeter.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NoopMeter\": () => (/* binding */ NoopMeter),\n/* harmony export */   \"NoopMetric\": () => (/* binding */ NoopMetric),\n/* harmony export */   \"NoopCounterMetric\": () => (/* binding */ NoopCounterMetric),\n/* harmony export */   \"NoopUpDownCounterMetric\": () => (/* binding */ NoopUpDownCounterMetric),\n/* harmony export */   \"NoopHistogramMetric\": () => (/* binding */ NoopHistogramMetric),\n/* harmony export */   \"NoopObservableBaseMetric\": () => (/* binding */ NoopObservableBaseMetric),\n/* harmony export */   \"NOOP_METER\": () => (/* binding */ NOOP_METER),\n/* harmony export */   \"NOOP_COUNTER_METRIC\": () => (/* binding */ NOOP_COUNTER_METRIC),\n/* harmony export */   \"NOOP_HISTOGRAM_METRIC\": () => (/* binding */ NOOP_HISTOGRAM_METRIC),\n/* harmony export */   \"NOOP_UP_DOWN_COUNTER_METRIC\": () => (/* binding */ NOOP_UP_DOWN_COUNTER_METRIC),\n/* harmony export */   \"NOOP_OBSERVABLE_COUNTER_METRIC\": () => (/* binding */ NOOP_OBSERVABLE_COUNTER_METRIC),\n/* harmony export */   \"NOOP_OBSERVABLE_GAUGE_METRIC\": () => (/* binding */ NOOP_OBSERVABLE_GAUGE_METRIC),\n/* harmony export */   \"NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC\": () => (/* binding */ NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */ (function () {\n    function NoopMeter() {\n    }\n    /**\n     * Returns a constant noop histogram.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createHistogram = function (_name, _options) {\n        return NOOP_HISTOGRAM_METRIC;\n    };\n    /**\n     * Returns a constant noop counter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createCounter = function (_name, _options) {\n        return NOOP_COUNTER_METRIC;\n    };\n    /**\n     * Returns a constant noop UpDownCounter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     */\n    NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n        return NOOP_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * Returns a constant noop observable gauge.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the observable gauge callback\n     */\n    NoopMeter.prototype.createObservableGauge = function (_name, _options, _callback) {\n        return NOOP_OBSERVABLE_GAUGE_METRIC;\n    };\n    /**\n     * Returns a constant noop observable counter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the observable counter callback\n     */\n    NoopMeter.prototype.createObservableCounter = function (_name, _options, _callback) {\n        return NOOP_OBSERVABLE_COUNTER_METRIC;\n    };\n    /**\n     * Returns a constant noop up down observable counter.\n     * @param name the name of the metric.\n     * @param [options] the metric options.\n     * @param [callback] the up down observable counter callback\n     */\n    NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options, _callback) {\n        return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n    };\n    return NoopMeter;\n}());\n\nvar NoopMetric = /** @class */ (function () {\n    function NoopMetric() {\n    }\n    return NoopMetric;\n}());\n\nvar NoopCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopCounterMetric, _super);\n    function NoopCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopCounterMetric;\n}(NoopMetric));\n\nvar NoopUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopUpDownCounterMetric, _super);\n    function NoopUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopUpDownCounterMetric;\n}(NoopMetric));\n\nvar NoopHistogramMetric = /** @class */ (function (_super) {\n    __extends(NoopHistogramMetric, _super);\n    function NoopHistogramMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopHistogramMetric.prototype.record = function (_value, _attributes) { };\n    return NoopHistogramMetric;\n}(NoopMetric));\n\nvar NoopObservableBaseMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableBaseMetric, _super);\n    function NoopObservableBaseMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopObservableBaseMetric.prototype.observation = function () {\n        return {\n            observable: this,\n            value: 0,\n        };\n    };\n    return NoopObservableBaseMetric;\n}(NoopMetric));\n\nvar NOOP_METER = new NoopMeter();\n// Synchronous instruments\nvar NOOP_COUNTER_METRIC = new NoopCounterMetric();\nvar NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nvar NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n// Asynchronous instruments\nvar NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableBaseMetric();\nvar NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableBaseMetric();\nvar NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableBaseMetric();\n//# sourceMappingURL=NoopMeter.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/NoopMeter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/NoopMeterProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/NoopMeterProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NoopMeterProvider\": () => (/* binding */ NoopMeterProvider),\n/* harmony export */   \"NOOP_METER_PROVIDER\": () => (/* binding */ NOOP_METER_PROVIDER)\n/* harmony export */ });\n/* harmony import */ var _NoopMeter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopMeter */ \"./node_modules/@opentelemetry/api-metrics/build/esm/NoopMeter.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nvar NoopMeterProvider = /** @class */ (function () {\n    function NoopMeterProvider() {\n    }\n    NoopMeterProvider.prototype.getMeter = function (_name, _version, _options) {\n        return _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NOOP_METER;\n    };\n    return NoopMeterProvider;\n}());\n\nvar NOOP_METER_PROVIDER = new NoopMeterProvider();\n//# sourceMappingURL=NoopMeterProvider.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/NoopMeterProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/api/global-utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/api/global-utils.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GLOBAL_METRICS_API_KEY\": () => (/* binding */ GLOBAL_METRICS_API_KEY),\n/* harmony export */   \"_global\": () => (/* binding */ _global),\n/* harmony export */   \"makeGetter\": () => (/* binding */ makeGetter),\n/* harmony export */   \"API_BACKWARDS_COMPATIBILITY_VERSION\": () => (/* binding */ API_BACKWARDS_COMPATIBILITY_VERSION)\n/* harmony export */ });\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ \"./node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar GLOBAL_METRICS_API_KEY = Symbol.for('io.opentelemetry.js.api.metrics');\nvar _global = _platform__WEBPACK_IMPORTED_MODULE_0__._globalThis;\n/**\n * Make a function which accepts a version integer and returns the instance of an API if the version\n * is compatible, or a fallback version (usually NOOP) if it is not.\n *\n * @param requiredVersion Backwards compatibility version which is required to return the instance\n * @param instance Instance which should be returned if the required version is compatible\n * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible\n */\nfunction makeGetter(requiredVersion, instance, fallback) {\n    return function (version) {\n        return version === requiredVersion ? instance : fallback;\n    };\n}\n/**\n * A number which should be incremented each time a backwards incompatible\n * change is made to the API. This number is used when an API package\n * attempts to access the global API to ensure it is getting a compatible\n * version. If the global API is not compatible with the API package\n * attempting to get it, a NOOP API implementation will be returned.\n */\nvar API_BACKWARDS_COMPATIBILITY_VERSION = 4;\n//# sourceMappingURL=global-utils.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/api/global-utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/api/metrics.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/api/metrics.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MetricsAPI\": () => (/* binding */ MetricsAPI)\n/* harmony export */ });\n/* harmony import */ var _NoopMeterProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../NoopMeterProvider */ \"./node_modules/@opentelemetry/api-metrics/build/esm/NoopMeterProvider.js\");\n/* harmony import */ var _global_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global-utils */ \"./node_modules/@opentelemetry/api-metrics/build/esm/api/global-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function MetricsAPI() {\n    }\n    /** Get the singleton instance of the Metrics API */\n    MetricsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global meter. Returns the initialized global meter provider.\n     */\n    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n        if (_global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_METRICS_API_KEY]) {\n            // global meter provider has already been set\n            return this.getMeterProvider();\n        }\n        _global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_METRICS_API_KEY] = (0,_global_utils__WEBPACK_IMPORTED_MODULE_1__.makeGetter)(_global_utils__WEBPACK_IMPORTED_MODULE_1__.API_BACKWARDS_COMPATIBILITY_VERSION, provider, _NoopMeterProvider__WEBPACK_IMPORTED_MODULE_0__.NOOP_METER_PROVIDER);\n        return provider;\n    };\n    /**\n     * Returns the global meter provider.\n     */\n    MetricsAPI.prototype.getMeterProvider = function () {\n        var _a, _b;\n        return ((_b = (_a = _global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_global_utils__WEBPACK_IMPORTED_MODULE_1__._global, _global_utils__WEBPACK_IMPORTED_MODULE_1__.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : _NoopMeterProvider__WEBPACK_IMPORTED_MODULE_0__.NOOP_METER_PROVIDER);\n    };\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    MetricsAPI.prototype.getMeter = function (name, version, options) {\n        return this.getMeterProvider().getMeter(name, version, options);\n    };\n    /** Remove the global meter provider */\n    MetricsAPI.prototype.disable = function () {\n        delete _global_utils__WEBPACK_IMPORTED_MODULE_1__._global[_global_utils__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_METRICS_API_KEY];\n    };\n    return MetricsAPI;\n}());\n\n//# sourceMappingURL=metrics.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/api/metrics.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NOOP_COUNTER_METRIC\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NOOP_COUNTER_METRIC),\n/* harmony export */   \"NOOP_HISTOGRAM_METRIC\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NOOP_HISTOGRAM_METRIC),\n/* harmony export */   \"NOOP_METER\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NOOP_METER),\n/* harmony export */   \"NOOP_OBSERVABLE_COUNTER_METRIC\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NOOP_OBSERVABLE_COUNTER_METRIC),\n/* harmony export */   \"NOOP_OBSERVABLE_GAUGE_METRIC\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NOOP_OBSERVABLE_GAUGE_METRIC),\n/* harmony export */   \"NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC),\n/* harmony export */   \"NOOP_UP_DOWN_COUNTER_METRIC\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NOOP_UP_DOWN_COUNTER_METRIC),\n/* harmony export */   \"NoopCounterMetric\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NoopCounterMetric),\n/* harmony export */   \"NoopHistogramMetric\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NoopHistogramMetric),\n/* harmony export */   \"NoopMeter\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NoopMeter),\n/* harmony export */   \"NoopMetric\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NoopMetric),\n/* harmony export */   \"NoopObservableBaseMetric\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NoopObservableBaseMetric),\n/* harmony export */   \"NoopUpDownCounterMetric\": () => (/* reexport safe */ _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NoopUpDownCounterMetric),\n/* harmony export */   \"NOOP_METER_PROVIDER\": () => (/* reexport safe */ _NoopMeterProvider__WEBPACK_IMPORTED_MODULE_1__.NOOP_METER_PROVIDER),\n/* harmony export */   \"NoopMeterProvider\": () => (/* reexport safe */ _NoopMeterProvider__WEBPACK_IMPORTED_MODULE_1__.NoopMeterProvider),\n/* harmony export */   \"AggregationTemporality\": () => (/* reexport safe */ _types_Metric__WEBPACK_IMPORTED_MODULE_4__.AggregationTemporality),\n/* harmony export */   \"ValueType\": () => (/* reexport safe */ _types_Metric__WEBPACK_IMPORTED_MODULE_4__.ValueType),\n/* harmony export */   \"metrics\": () => (/* binding */ metrics)\n/* harmony export */ });\n/* harmony import */ var _NoopMeter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopMeter */ \"./node_modules/@opentelemetry/api-metrics/build/esm/NoopMeter.js\");\n/* harmony import */ var _NoopMeterProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NoopMeterProvider */ \"./node_modules/@opentelemetry/api-metrics/build/esm/NoopMeterProvider.js\");\n/* harmony import */ var _types_Meter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/Meter */ \"./node_modules/@opentelemetry/api-metrics/build/esm/types/Meter.js\");\n/* harmony import */ var _types_MeterProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types/MeterProvider */ \"./node_modules/@opentelemetry/api-metrics/build/esm/types/MeterProvider.js\");\n/* harmony import */ var _types_Metric__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types/Metric */ \"./node_modules/@opentelemetry/api-metrics/build/esm/types/Metric.js\");\n/* harmony import */ var _types_Observation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types/Observation */ \"./node_modules/@opentelemetry/api-metrics/build/esm/types/Observation.js\");\n/* harmony import */ var _types_ObservableResult__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types/ObservableResult */ \"./node_modules/@opentelemetry/api-metrics/build/esm/types/ObservableResult.js\");\n/* harmony import */ var _api_metrics__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api/metrics */ \"./node_modules/@opentelemetry/api-metrics/build/esm/api/metrics.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n/** Entrypoint for metrics API */\nvar metrics = _api_metrics__WEBPACK_IMPORTED_MODULE_7__.MetricsAPI.getInstance();\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/globalThis.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/globalThis.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_globalThis\": () => (/* binding */ _globalThis)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/api and\n// @opentelemetry/core too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nvar _globalThis = typeof globalThis === 'object' ? globalThis :\n    typeof self === 'object' ? self :\n        typeof window === 'object' ? window :\n            typeof __webpack_require__.g === 'object' ? __webpack_require__.g :\n                {};\n//# sourceMappingURL=globalThis.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/globalThis.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_globalThis\": () => (/* reexport safe */ _globalThis__WEBPACK_IMPORTED_MODULE_0__._globalThis)\n/* harmony export */ });\n/* harmony import */ var _globalThis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./globalThis */ \"./node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/globalThis.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/types/Meter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/types/Meter.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=Meter.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/types/Meter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/types/MeterProvider.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/types/MeterProvider.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=MeterProvider.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/types/MeterProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/types/Metric.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/types/Metric.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ValueType\": () => (/* binding */ ValueType),\n/* harmony export */   \"AggregationTemporality\": () => (/* binding */ AggregationTemporality)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Type of value. It describes how the data is reported. */\nvar ValueType;\n(function (ValueType) {\n    ValueType[ValueType[\"INT\"] = 0] = \"INT\";\n    ValueType[ValueType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n})(ValueType || (ValueType = {}));\n/** The kind of aggregator. */\nvar AggregationTemporality;\n(function (AggregationTemporality) {\n    AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_UNSPECIFIED\"] = 0] = \"AGGREGATION_TEMPORALITY_UNSPECIFIED\";\n    AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_DELTA\"] = 1] = \"AGGREGATION_TEMPORALITY_DELTA\";\n    AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_CUMULATIVE\"] = 2] = \"AGGREGATION_TEMPORALITY_CUMULATIVE\";\n})(AggregationTemporality || (AggregationTemporality = {}));\n//# sourceMappingURL=Metric.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/types/Metric.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/types/ObservableResult.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/types/ObservableResult.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=ObservableResult.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/types/ObservableResult.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api-metrics/build/esm/types/Observation.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api-metrics/build/esm/types/Observation.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=Observation.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api-metrics/build/esm/types/Observation.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/context.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/context.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ContextAPI\": () => (/* binding */ ContextAPI)\n/* harmony export */ });\n/* harmony import */ var _context_NoopContextManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/NoopContextManager */ \"./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js\");\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/global-utils */ \"./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./diag */ \"./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\n\n\n\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new _context_NoopContextManager__WEBPACK_IMPORTED_MODULE_0__.NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager.\n     *\n     * @returns true if the context manager was successfully registered, else false\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.registerGlobal)(API_NAME, contextManager, _diag__WEBPACK_IMPORTED_MODULE_2__.DiagAPI.instance());\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], args));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     * @param target function or event emitter to bind\n     */\n    ContextAPI.prototype.bind = function (context, target) {\n        return this._getContextManager().bind(context, target);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_2__.DiagAPI.instance());\n    };\n    return ContextAPI;\n}());\n\n//# sourceMappingURL=context.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/api/context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/diag.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/diag.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DiagAPI\": () => (/* binding */ DiagAPI)\n/* harmony export */ });\n/* harmony import */ var _diag_ComponentLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../diag/ComponentLogger */ \"./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js\");\n/* harmony import */ var _diag_internal_logLevelLogger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../diag/internal/logLevelLogger */ \"./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js\");\n/* harmony import */ var _diag_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../diag/types */ \"./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/global-utils */ \"./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var logger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.getGlobal)('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, \n                // work around Function.prototype.apply types\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                arguments);\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        self.setLogger = function (logger, logLevel) {\n            var _a, _b;\n            if (logLevel === void 0) { logLevel = _diag_types__WEBPACK_IMPORTED_MODULE_2__.DiagLogLevel.INFO; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            var oldLogger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.getGlobal)('diag');\n            var newLogger = (0,_diag_internal_logLevelLogger__WEBPACK_IMPORTED_MODULE_1__.createLogLevelDiagLogger)(logLevel, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger) {\n                var stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.registerGlobal)('diag', newLogger, self, true);\n        };\n        self.disable = function () {\n            (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.unregisterGlobal)(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new _diag_ComponentLogger__WEBPACK_IMPORTED_MODULE_0__.DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\n\n//# sourceMappingURL=diag.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/api/diag.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/propagation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/propagation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PropagationAPI\": () => (/* binding */ PropagationAPI)\n/* harmony export */ });\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ \"./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/* harmony import */ var _propagation_NoopTextMapPropagator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../propagation/NoopTextMapPropagator */ \"./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js\");\n/* harmony import */ var _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../propagation/TextMapPropagator */ \"./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\");\n/* harmony import */ var _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../baggage/context-helpers */ \"./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js\");\n/* harmony import */ var _baggage_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../baggage/utils */ \"./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./diag */ \"./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new _propagation_NoopTextMapPropagator__WEBPACK_IMPORTED_MODULE_1__.NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = _baggage_utils__WEBPACK_IMPORTED_MODULE_4__.createBaggage;\n        this.getBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_3__.getBaggage;\n        this.setBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_3__.setBaggage;\n        this.deleteBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_3__.deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.registerGlobal)(API_NAME, propagator, _diag__WEBPACK_IMPORTED_MODULE_5__.DiagAPI.instance());\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_2__.defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_2__.defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_5__.DiagAPI.instance());\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\n\n//# sourceMappingURL=propagation.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/api/propagation.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/trace.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/trace.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TraceAPI\": () => (/* binding */ TraceAPI)\n/* harmony export */ });\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ \"./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/* harmony import */ var _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../trace/ProxyTracerProvider */ \"./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\");\n/* harmony import */ var _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../trace/spancontext-utils */ \"./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _trace_context_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../trace/context-utils */ \"./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./diag */ \"./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_1__.ProxyTracerProvider();\n        this.wrapSpanContext = _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_2__.wrapSpanContext;\n        this.isSpanContextValid = _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_2__.isSpanContextValid;\n        this.deleteSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_3__.deleteSpan;\n        this.getSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_3__.getSpan;\n        this.getSpanContext = _trace_context_utils__WEBPACK_IMPORTED_MODULE_3__.getSpanContext;\n        this.setSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_3__.setSpan;\n        this.setSpanContext = _trace_context_utils__WEBPACK_IMPORTED_MODULE_3__.setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        var success = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.registerGlobal)(API_NAME, this._proxyTracerProvider, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());\n        if (success) {\n            this._proxyTracerProvider.setDelegate(provider);\n        }\n        return success;\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());\n        this._proxyTracerProvider = new _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_1__.ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\n\n//# sourceMappingURL=trace.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/api/trace.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getBaggage\": () => (/* binding */ getBaggage),\n/* harmony export */   \"setBaggage\": () => (/* binding */ setBaggage),\n/* harmony export */   \"deleteBaggage\": () => (/* binding */ deleteBaggage)\n/* harmony export */ });\n/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/context */ \"./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = (0,_context_context__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry Baggage Key');\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nfunction getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nfunction setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nfunction deleteBaggage(context) {\n    return context.deleteValue(BAGGAGE_KEY);\n}\n//# sourceMappingURL=context-helpers.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BaggageImpl\": () => (/* binding */ BaggageImpl)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar BaggageImpl = /** @class */ (function () {\n    function BaggageImpl(entries) {\n        this._entries = entries ? new Map(entries) : new Map();\n    }\n    BaggageImpl.prototype.getEntry = function (key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n            return undefined;\n        }\n        return Object.assign({}, entry);\n    };\n    BaggageImpl.prototype.getAllEntries = function () {\n        return Array.from(this._entries.entries()).map(function (_a) {\n            var k = _a[0], v = _a[1];\n            return [k, v];\n        });\n    };\n    BaggageImpl.prototype.setEntry = function (key, entry) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntry = function (key) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntries = function () {\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl(this._entries);\n        for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {\n            var key = keys_1[_a];\n            newBaggage._entries.delete(key);\n        }\n        return newBaggage;\n    };\n    BaggageImpl.prototype.clear = function () {\n        return new BaggageImpl();\n    };\n    return BaggageImpl;\n}());\n\n//# sourceMappingURL=baggage-impl.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"baggageEntryMetadataSymbol\": () => (/* binding */ baggageEntryMetadataSymbol)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nvar baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n//# sourceMappingURL=symbol.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/baggage/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createBaggage\": () => (/* binding */ createBaggage),\n/* harmony export */   \"baggageEntryMetadataFromString\": () => (/* binding */ baggageEntryMetadataFromString)\n/* harmony export */ });\n/* harmony import */ var _api_diag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/diag */ \"./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/* harmony import */ var _internal_baggage_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/baggage-impl */ \"./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js\");\n/* harmony import */ var _internal_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/symbol */ \"./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar diag = _api_diag__WEBPACK_IMPORTED_MODULE_0__.DiagAPI.instance();\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nfunction createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new _internal_baggage_impl__WEBPACK_IMPORTED_MODULE_1__.BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nfunction baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: _internal_symbol__WEBPACK_IMPORTED_MODULE_2__.baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/baggage/utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/common/Exception.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/common/Exception.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=Exception.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/common/Exception.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/common/Time.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/common/Time.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=Time.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/common/Time.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NoopContextManager\": () => (/* binding */ NoopContextManager)\n/* harmony export */ });\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context */ \"./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\n\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return _context__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray([thisArg], args));\n    };\n    NoopContextManager.prototype.bind = function (_context, target) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\n\n//# sourceMappingURL=NoopContextManager.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/context/context.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context/context.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createContextKey\": () => (/* binding */ createContextKey),\n/* harmony export */   \"ROOT_CONTEXT\": () => (/* binding */ ROOT_CONTEXT)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nfunction createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nvar ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/context/context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/context/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/context/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DiagComponentLogger\": () => (/* binding */ DiagComponentLogger)\n/* harmony export */ });\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ \"./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\n\nfunction logProxy(funcName, namespace, args) {\n    var logger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, args);\n}\n//# sourceMappingURL=ComponentLogger.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DiagConsoleLogger\": () => (/* binding */ DiagConsoleLogger)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [\n    { n: 'error', c: 'error' },\n    { n: 'warn', c: 'warn' },\n    { n: 'info', c: 'info' },\n    { n: 'debug', c: 'debug' },\n    { n: 'verbose', c: 'trace' },\n];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */ (function () {\n    function DiagConsoleLogger() {\n        function _consoleFunc(funcName) {\n            return function () {\n                var orgArguments = arguments;\n                if (console) {\n                    // Some environments only expose the console when the F12 developer console is open\n                    var theFunc = console[funcName];\n                    if (typeof theFunc !== 'function') {\n                        // Not all environments support all functions\n                        theFunc = console.log;\n                    }\n                    // One last final check\n                    if (typeof theFunc === 'function') {\n                        return theFunc.apply(console, orgArguments);\n                    }\n                }\n            };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n    }\n    return DiagConsoleLogger;\n}());\n\n//# sourceMappingURL=consoleLogger.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DiagConsoleLogger\": () => (/* reexport safe */ _consoleLogger__WEBPACK_IMPORTED_MODULE_0__.DiagConsoleLogger),\n/* harmony export */   \"DiagLogLevel\": () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_1__.DiagLogLevel)\n/* harmony export */ });\n/* harmony import */ var _consoleLogger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./consoleLogger */ \"./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/diag/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createLogLevelDiagLogger\": () => (/* binding */ createLogLevelDiagLogger)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction createLogLevelDiagLogger(maxLevel, logger) {\n    if (maxLevel < _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE) {\n        maxLevel = _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE;\n    }\n    else if (maxLevel > _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL) {\n        maxLevel = _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL;\n    }\n    // In case the logger is null or undefined\n    logger = logger || {};\n    function _filterFunc(funcName, theLevel) {\n        var theFunc = logger[funcName];\n        if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n            return theFunc.bind(logger);\n        }\n        return function () { };\n    }\n    return {\n        error: _filterFunc('error', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ERROR),\n        warn: _filterFunc('warn', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.WARN),\n        info: _filterFunc('info', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO),\n        debug: _filterFunc('debug', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.DEBUG),\n        verbose: _filterFunc('verbose', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.VERBOSE),\n    };\n}\n//# sourceMappingURL=logLevelLogger.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DiagLogLevel\": () => (/* binding */ DiagLogLevel)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nvar DiagLogLevel;\n(function (DiagLogLevel) {\n    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n    DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Identifies an error scenario */\n    DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n    /** Identifies a warning scenario */\n    DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n    /** General informational log message */\n    DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n    /** General debug log message */\n    DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n    /**\n     * Detailed trace level logging should only be used for development, should only be set\n     * in a development environment.\n     */\n    DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n    /** Used to set the logging level to include all logging */\n    DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel || (DiagLogLevel = {}));\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/diag/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"baggageEntryMetadataFromString\": () => (/* reexport safe */ _baggage_utils__WEBPACK_IMPORTED_MODULE_1__.baggageEntryMetadataFromString),\n/* harmony export */   \"DiagConsoleLogger\": () => (/* reexport safe */ _diag__WEBPACK_IMPORTED_MODULE_4__.DiagConsoleLogger),\n/* harmony export */   \"DiagLogLevel\": () => (/* reexport safe */ _diag__WEBPACK_IMPORTED_MODULE_4__.DiagLogLevel),\n/* harmony export */   \"defaultTextMapGetter\": () => (/* reexport safe */ _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__.defaultTextMapGetter),\n/* harmony export */   \"defaultTextMapSetter\": () => (/* reexport safe */ _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__.defaultTextMapSetter),\n/* harmony export */   \"ProxyTracer\": () => (/* reexport safe */ _trace_ProxyTracer__WEBPACK_IMPORTED_MODULE_8__.ProxyTracer),\n/* harmony export */   \"ProxyTracerProvider\": () => (/* reexport safe */ _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_9__.ProxyTracerProvider),\n/* harmony export */   \"SamplingDecision\": () => (/* reexport safe */ _trace_SamplingResult__WEBPACK_IMPORTED_MODULE_11__.SamplingDecision),\n/* harmony export */   \"SpanKind\": () => (/* reexport safe */ _trace_span_kind__WEBPACK_IMPORTED_MODULE_13__.SpanKind),\n/* harmony export */   \"SpanStatusCode\": () => (/* reexport safe */ _trace_status__WEBPACK_IMPORTED_MODULE_16__.SpanStatusCode),\n/* harmony export */   \"TraceFlags\": () => (/* reexport safe */ _trace_trace_flags__WEBPACK_IMPORTED_MODULE_17__.TraceFlags),\n/* harmony export */   \"isSpanContextValid\": () => (/* reexport safe */ _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_21__.isSpanContextValid),\n/* harmony export */   \"isValidTraceId\": () => (/* reexport safe */ _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_21__.isValidTraceId),\n/* harmony export */   \"isValidSpanId\": () => (/* reexport safe */ _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_21__.isValidSpanId),\n/* harmony export */   \"INVALID_SPANID\": () => (/* reexport safe */ _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_22__.INVALID_SPANID),\n/* harmony export */   \"INVALID_TRACEID\": () => (/* reexport safe */ _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_22__.INVALID_TRACEID),\n/* harmony export */   \"INVALID_SPAN_CONTEXT\": () => (/* reexport safe */ _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_22__.INVALID_SPAN_CONTEXT),\n/* harmony export */   \"ROOT_CONTEXT\": () => (/* reexport safe */ _context_context__WEBPACK_IMPORTED_MODULE_23__.ROOT_CONTEXT),\n/* harmony export */   \"createContextKey\": () => (/* reexport safe */ _context_context__WEBPACK_IMPORTED_MODULE_23__.createContextKey),\n/* harmony export */   \"context\": () => (/* binding */ context),\n/* harmony export */   \"trace\": () => (/* binding */ trace),\n/* harmony export */   \"propagation\": () => (/* binding */ propagation),\n/* harmony export */   \"diag\": () => (/* binding */ diag),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baggage_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage/types */ \"./node_modules/@opentelemetry/api/build/esm/baggage/types.js\");\n/* harmony import */ var _baggage_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baggage/utils */ \"./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\");\n/* harmony import */ var _common_Exception__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common/Exception */ \"./node_modules/@opentelemetry/api/build/esm/common/Exception.js\");\n/* harmony import */ var _common_Time__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common/Time */ \"./node_modules/@opentelemetry/api/build/esm/common/Time.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./diag */ \"./node_modules/@opentelemetry/api/build/esm/diag/index.js\");\n/* harmony import */ var _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./propagation/TextMapPropagator */ \"./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\");\n/* harmony import */ var _trace_attributes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./trace/attributes */ \"./node_modules/@opentelemetry/api/build/esm/trace/attributes.js\");\n/* harmony import */ var _trace_link__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./trace/link */ \"./node_modules/@opentelemetry/api/build/esm/trace/link.js\");\n/* harmony import */ var _trace_ProxyTracer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./trace/ProxyTracer */ \"./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\");\n/* harmony import */ var _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./trace/ProxyTracerProvider */ \"./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\");\n/* harmony import */ var _trace_Sampler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./trace/Sampler */ \"./node_modules/@opentelemetry/api/build/esm/trace/Sampler.js\");\n/* harmony import */ var _trace_SamplingResult__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./trace/SamplingResult */ \"./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\");\n/* harmony import */ var _trace_span_context__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./trace/span_context */ \"./node_modules/@opentelemetry/api/build/esm/trace/span_context.js\");\n/* harmony import */ var _trace_span_kind__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./trace/span_kind */ \"./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\");\n/* harmony import */ var _trace_span__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./trace/span */ \"./node_modules/@opentelemetry/api/build/esm/trace/span.js\");\n/* harmony import */ var _trace_SpanOptions__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./trace/SpanOptions */ \"./node_modules/@opentelemetry/api/build/esm/trace/SpanOptions.js\");\n/* harmony import */ var _trace_status__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./trace/status */ \"./node_modules/@opentelemetry/api/build/esm/trace/status.js\");\n/* harmony import */ var _trace_trace_flags__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./trace/trace_flags */ \"./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _trace_trace_state__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./trace/trace_state */ \"./node_modules/@opentelemetry/api/build/esm/trace/trace_state.js\");\n/* harmony import */ var _trace_tracer_provider__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./trace/tracer_provider */ \"./node_modules/@opentelemetry/api/build/esm/trace/tracer_provider.js\");\n/* harmony import */ var _trace_tracer__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./trace/tracer */ \"./node_modules/@opentelemetry/api/build/esm/trace/tracer.js\");\n/* harmony import */ var _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./trace/spancontext-utils */ \"./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./trace/invalid-span-constants */ \"./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./context/context */ \"./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/* harmony import */ var _context_types__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./context/types */ \"./node_modules/@opentelemetry/api/build/esm/context/types.js\");\n/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./api/context */ \"./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/* harmony import */ var _api_trace__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./api/trace */ \"./node_modules/@opentelemetry/api/build/esm/api/trace.js\");\n/* harmony import */ var _api_propagation__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./api/propagation */ \"./node_modules/@opentelemetry/api/build/esm/api/propagation.js\");\n/* harmony import */ var _api_diag__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./api/diag */ \"./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** Entrypoint for context API */\nvar context = _api_context__WEBPACK_IMPORTED_MODULE_25__.ContextAPI.getInstance();\n\n/** Entrypoint for trace API */\nvar trace = _api_trace__WEBPACK_IMPORTED_MODULE_26__.TraceAPI.getInstance();\n\n/** Entrypoint for propagation API */\nvar propagation = _api_propagation__WEBPACK_IMPORTED_MODULE_27__.PropagationAPI.getInstance();\n\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nvar diag = _api_diag__WEBPACK_IMPORTED_MODULE_28__.DiagAPI.instance();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    trace: trace,\n    context: context,\n    propagation: propagation,\n    diag: diag,\n});\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"registerGlobal\": () => (/* binding */ registerGlobal),\n/* harmony export */   \"getGlobal\": () => (/* binding */ getGlobal),\n/* harmony export */   \"unregisterGlobal\": () => (/* binding */ unregisterGlobal)\n/* harmony export */ });\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ \"./node_modules/@opentelemetry/api/build/esm/platform/browser/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../version */ \"./node_modules/@opentelemetry/api/build/esm/version.js\");\n/* harmony import */ var _semver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./semver */ \"./node_modules/@opentelemetry/api/build/esm/internal/semver.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar major = _version__WEBPACK_IMPORTED_MODULE_1__.VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _platform__WEBPACK_IMPORTED_MODULE_0__._globalThis;\nfunction registerGlobal(type, instance, diag, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: _version__WEBPACK_IMPORTED_MODULE_1__.VERSION,\n    });\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    if (api.version !== _version__WEBPACK_IMPORTED_MODULE_1__.VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error('@opentelemetry/api: All API registration versions must match');\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    api[type] = instance;\n    diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + _version__WEBPACK_IMPORTED_MODULE_1__.VERSION + \".\");\n    return true;\n}\nfunction getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !(0,_semver__WEBPACK_IMPORTED_MODULE_2__.isCompatible)(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nfunction unregisterGlobal(type, diag) {\n    diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + _version__WEBPACK_IMPORTED_MODULE_1__.VERSION + \".\");\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\n//# sourceMappingURL=global-utils.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/internal/semver.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/internal/semver.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_makeCompatibilityCheck\": () => (/* binding */ _makeCompatibilityCheck),\n/* harmony export */   \"isCompatible\": () => (/* binding */ isCompatible)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version */ \"./node_modules/@opentelemetry/api/build/esm/version.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nfunction _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n        prerelease: myVersionMatch[4],\n    };\n    // if ownVersion has a prerelease tag, versions must match exactly\n    if (ownVersionParsed.prerelease != null) {\n        return function isExactmatch(globalVersion) {\n            return globalVersion === ownVersion;\n        };\n    }\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n            prerelease: globalVersionMatch[4],\n        };\n        // if globalVersion has a prerelease tag, versions must match exactly\n        if (globalVersionParsed.prerelease != null) {\n            return _reject(globalVersion);\n        }\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nvar isCompatible = _makeCompatibilityCheck(_version__WEBPACK_IMPORTED_MODULE_0__.VERSION);\n//# sourceMappingURL=semver.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/internal/semver.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_globalThis\": () => (/* binding */ _globalThis)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nvar _globalThis = typeof globalThis === 'object' ? globalThis : window;\n//# sourceMappingURL=globalThis.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/platform/browser/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/platform/browser/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_globalThis\": () => (/* reexport safe */ _globalThis__WEBPACK_IMPORTED_MODULE_0__._globalThis)\n/* harmony export */ });\n/* harmony import */ var _globalThis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./globalThis */ \"./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NoopTextMapPropagator\": () => (/* binding */ NoopTextMapPropagator)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = /** @class */ (function () {\n    function NoopTextMapPropagator() {\n    }\n    /** Noop inject function does nothing */\n    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };\n    /** Noop extract function does nothing and returns the input context */\n    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n        return context;\n    };\n    NoopTextMapPropagator.prototype.fields = function () {\n        return [];\n    };\n    return NoopTextMapPropagator;\n}());\n\n//# sourceMappingURL=NoopTextMapPropagator.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"defaultTextMapGetter\": () => (/* binding */ defaultTextMapGetter),\n/* harmony export */   \"defaultTextMapSetter\": () => (/* binding */ defaultTextMapSetter)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nvar defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n//# sourceMappingURL=TextMapPropagator.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NonRecordingSpan\": () => (/* binding */ NonRecordingSpan)\n/* harmony export */ });\n/* harmony import */ var _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalid-span-constants */ \"./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\n\n//# sourceMappingURL=NonRecordingSpan.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NoopTracer\": () => (/* binding */ NoopTracer)\n/* harmony export */ });\n/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/context */ \"./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/* harmony import */ var _trace_context_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../trace/context-utils */ \"./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\");\n/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NonRecordingSpan */ \"./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\n/* harmony import */ var _spancontext_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./spancontext-utils */ \"./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar context = _api_context__WEBPACK_IMPORTED_MODULE_0__.ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_2__.NonRecordingSpan();\n        }\n        var parentFromContext = context && (0,_trace_context_utils__WEBPACK_IMPORTED_MODULE_1__.getSpanContext)(context);\n        if (isSpanContext(parentFromContext) &&\n            (0,_spancontext_utils__WEBPACK_IMPORTED_MODULE_3__.isSpanContextValid)(parentFromContext)) {\n            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_2__.NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_2__.NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = (0,_trace_context_utils__WEBPACK_IMPORTED_MODULE_1__.setSpan)(parentContext, span);\n        return context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\n\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n//# sourceMappingURL=NoopTracer.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NoopTracerProvider\": () => (/* binding */ NoopTracerProvider)\n/* harmony export */ });\n/* harmony import */ var _NoopTracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopTracer */ \"./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = /** @class */ (function () {\n    function NoopTracerProvider() {\n    }\n    NoopTracerProvider.prototype.getTracer = function (_name, _version) {\n        return new _NoopTracer__WEBPACK_IMPORTED_MODULE_0__.NoopTracer();\n    };\n    return NoopTracerProvider;\n}());\n\n//# sourceMappingURL=NoopTracerProvider.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ProxyTracer\": () => (/* binding */ ProxyTracer)\n/* harmony export */ });\n/* harmony import */ var _NoopTracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopTracer */ \"./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar NOOP_TRACER = new _NoopTracer__WEBPACK_IMPORTED_MODULE_0__.NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version);\n        if (!tracer) {\n            return NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\n\n//# sourceMappingURL=ProxyTracer.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ProxyTracerProvider\": () => (/* binding */ ProxyTracerProvider)\n/* harmony export */ });\n/* harmony import */ var _ProxyTracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProxyTracer */ \"./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\");\n/* harmony import */ var _NoopTracerProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NoopTracerProvider */ \"./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar NOOP_TRACER_PROVIDER = new _NoopTracerProvider__WEBPACK_IMPORTED_MODULE_1__.NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new _ProxyTracer__WEBPACK_IMPORTED_MODULE_0__.ProxyTracer(this, name, version));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);\n    };\n    return ProxyTracerProvider;\n}());\n\n//# sourceMappingURL=ProxyTracerProvider.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/Sampler.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/Sampler.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=Sampler.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/Sampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SamplingDecision\": () => (/* binding */ SamplingDecision)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/SpanOptions.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/SpanOptions.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=SpanOptions.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/SpanOptions.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/attributes.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/attributes.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=attributes.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/attributes.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getSpan\": () => (/* binding */ getSpan),\n/* harmony export */   \"setSpan\": () => (/* binding */ setSpan),\n/* harmony export */   \"deleteSpan\": () => (/* binding */ deleteSpan),\n/* harmony export */   \"setSpanContext\": () => (/* binding */ setSpanContext),\n/* harmony export */   \"getSpanContext\": () => (/* binding */ getSpanContext)\n/* harmony export */ });\n/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/context */ \"./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NonRecordingSpan */ \"./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * span key\n */\nvar SPAN_KEY = (0,_context_context__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nfunction getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nfunction setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nfunction deleteSpan(context) {\n    return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nfunction setSpanContext(context, spanContext) {\n    return setSpan(context, new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nfunction getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}\n//# sourceMappingURL=context-utils.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"INVALID_SPANID\": () => (/* binding */ INVALID_SPANID),\n/* harmony export */   \"INVALID_TRACEID\": () => (/* binding */ INVALID_TRACEID),\n/* harmony export */   \"INVALID_SPAN_CONTEXT\": () => (/* binding */ INVALID_SPAN_CONTEXT)\n/* harmony export */ });\n/* harmony import */ var _trace_flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trace_flags */ \"./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar INVALID_SPANID = '0000000000000000';\nvar INVALID_TRACEID = '00000000000000000000000000000000';\nvar INVALID_SPAN_CONTEXT = {\n    traceId: INVALID_TRACEID,\n    spanId: INVALID_SPANID,\n    traceFlags: _trace_flags__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.NONE,\n};\n//# sourceMappingURL=invalid-span-constants.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/link.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/link.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=link.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/link.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/span.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/span.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=span.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/span.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/span_context.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/span_context.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=span_context.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/span_context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SpanKind\": () => (/* binding */ SpanKind)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind || (SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isValidTraceId\": () => (/* binding */ isValidTraceId),\n/* harmony export */   \"isValidSpanId\": () => (/* binding */ isValidSpanId),\n/* harmony export */   \"isSpanContextValid\": () => (/* binding */ isSpanContextValid),\n/* harmony export */   \"wrapSpanContext\": () => (/* binding */ wrapSpanContext)\n/* harmony export */ });\n/* harmony import */ var _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalid-span-constants */ \"./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NonRecordingSpan */ \"./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nfunction isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_TRACEID;\n}\nfunction isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nfunction isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nfunction wrapSpanContext(spanContext) {\n    return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan(spanContext);\n}\n//# sourceMappingURL=spancontext-utils.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/status.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/status.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SpanStatusCode\": () => (/* binding */ SpanStatusCode)\n/* harmony export */ });\n/**\n * An enumeration of status codes.\n */\nvar SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode || (SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/status.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TraceFlags\": () => (/* binding */ TraceFlags)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags || (TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/trace_state.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/trace_state.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=trace_state.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/trace_state.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/tracer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/tracer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=tracer.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/tracer.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/tracer_provider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/tracer_provider.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=tracer_provider.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/trace/tracer_provider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/version.js":
/*!**************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/version.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VERSION\": () => (/* binding */ VERSION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nvar VERSION = '1.0.3';\n//# sourceMappingURL=version.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/api/build/esm/version.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/ZoneContextManager.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/ZoneContextManager.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ZoneContextManager\": () => (/* binding */ ZoneContextManager)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/util.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/* Key name to be used to save a context reference in Zone */\nvar ZONE_CONTEXT_KEY = 'OT_ZONE_CONTEXT';\n/**\n * ZoneContextManager\n * This module provides an easy functionality for tracing action between asynchronous operations in web.\n * It was not possible with standard [StackContextManager]{@link https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-sdk-trace-web/src/StackContextManager.ts}.\n * It heavily depends on [zone.js]{@link https://www.npmjs.com/package/zone.js}.\n * It stores the information about context in zone. Each Context will have always new Zone;\n * It also supports binding a certain Span to a target that has \"addEventListener\" and \"removeEventListener\".\n * When this happens a new zone is being created and the provided Span is being assigned to this zone.\n */\nvar ZoneContextManager = /** @class */ (function () {\n    function ZoneContextManager() {\n        /**\n         * whether the context manager is enabled or not\n         */\n        this._enabled = false;\n        /**\n         * Helps to create a unique name for the zones - part of zone name\n         */\n        this._zoneCounter = 0;\n    }\n    /**\n     * Returns the active context from certain zone name\n     * @param activeZone\n     */\n    ZoneContextManager.prototype._activeContextFromZone = function (activeZone) {\n        return (activeZone && activeZone.get(ZONE_CONTEXT_KEY)) || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;\n    };\n    /**\n     * @param context A context (span) to be executed within target function\n     * @param target Function to be executed within the context\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    ZoneContextManager.prototype._bindFunction = function (context, target) {\n        var manager = this;\n        var contextWrapper = function () {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return manager.with(context, function () { return target.apply(_this, args); });\n        };\n        Object.defineProperty(contextWrapper, 'length', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: target.length,\n        });\n        return contextWrapper;\n    };\n    /**\n     * @param context A context (span) to be bind to target\n     * @param obj target object on which the listeners will be patched\n     */\n    ZoneContextManager.prototype._bindListener = function (context, obj) {\n        var target = obj;\n        if (target.__ot_listeners !== undefined) {\n            return obj;\n        }\n        target.__ot_listeners = {};\n        if (typeof target.addEventListener === 'function') {\n            target.addEventListener = this._patchAddEventListener(target, target.addEventListener, context);\n        }\n        if (typeof target.removeEventListener === 'function') {\n            target.removeEventListener = this._patchRemoveEventListener(target, target.removeEventListener);\n        }\n        return obj;\n    };\n    /**\n     * Creates a new unique zone name\n     */\n    ZoneContextManager.prototype._createZoneName = function () {\n        this._zoneCounter++;\n        var random = Math.random();\n        return this._zoneCounter + \"-\" + random;\n    };\n    /**\n     * Creates a new zone\n     * @param zoneName zone name\n     * @param context A context (span) to be bind with Zone\n     */\n    ZoneContextManager.prototype._createZone = function (zoneName, context) {\n        var _a;\n        return Zone.current.fork({\n            name: zoneName,\n            properties: (_a = {},\n                _a[ZONE_CONTEXT_KEY] = context,\n                _a),\n        });\n    };\n    /**\n     * Returns the active zone\n     */\n    ZoneContextManager.prototype._getActiveZone = function () {\n        return Zone.current;\n    };\n    /**\n     * Patches addEventListener method\n     * @param target any target that has \"addEventListener\" method\n     * @param original reference to the patched method\n     * @param [context] context to be bind to the listener\n     */\n    ZoneContextManager.prototype._patchAddEventListener = function (target, original, context) {\n        var contextManager = this;\n        return function (event, listener, opts) {\n            if (target.__ot_listeners === undefined) {\n                target.__ot_listeners = {};\n            }\n            var listeners = target.__ot_listeners[event];\n            if (listeners === undefined) {\n                listeners = new WeakMap();\n                target.__ot_listeners[event] = listeners;\n            }\n            var patchedListener = contextManager.bind(context, listener);\n            // store a weak reference of the user listener to ours\n            listeners.set(listener, patchedListener);\n            return original.call(this, event, patchedListener, opts);\n        };\n    };\n    /**\n     * Patches removeEventListener method\n     * @param target any target that has \"removeEventListener\" method\n     * @param original reference to the patched method\n     */\n    ZoneContextManager.prototype._patchRemoveEventListener = function (target, original) {\n        return function (event, listener) {\n            if (target.__ot_listeners === undefined ||\n                target.__ot_listeners[event] === undefined) {\n                return original.call(this, event, listener);\n            }\n            var events = target.__ot_listeners[event];\n            var patchedListener = events.get(listener);\n            events.delete(listener);\n            return original.call(this, event, patchedListener || listener);\n        };\n    };\n    /**\n     * Returns the active context\n     */\n    ZoneContextManager.prototype.active = function () {\n        if (!this._enabled) {\n            return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;\n        }\n        var activeZone = this._getActiveZone();\n        var active = this._activeContextFromZone(activeZone);\n        if (active) {\n            return active;\n        }\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;\n    };\n    /**\n     * Binds a the certain context or the active one to the target function and then returns the target\n     * @param context A context (span) to be bind to target\n     * @param target a function or event emitter. When target or one of its callbacks is called,\n     *  the provided context will be used as the active context for the duration of the call.\n     */\n    ZoneContextManager.prototype.bind = function (context, target) {\n        // if no specific context to propagate is given, we use the current one\n        if (context === undefined) {\n            context = this.active();\n        }\n        if (typeof target === 'function') {\n            return this._bindFunction(context, target);\n        }\n        else if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isListenerObject)(target)) {\n            this._bindListener(context, target);\n        }\n        return target;\n    };\n    /**\n     * Disable the context manager (clears all the contexts)\n     */\n    ZoneContextManager.prototype.disable = function () {\n        this._enabled = false;\n        return this;\n    };\n    /**\n     * Enables the context manager and creates a default(root) context\n     */\n    ZoneContextManager.prototype.enable = function () {\n        this._enabled = true;\n        return this;\n    };\n    /**\n     * Calls the callback function [fn] with the provided [context].\n     *     If [context] is undefined then it will use the active context.\n     *     The context will be set as active\n     * @param context A context (span) to be called with provided callback\n     * @param fn Callback function\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ZoneContextManager.prototype.with = function (context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        var zoneName = this._createZoneName();\n        var newZone = this._createZone(zoneName, context);\n        return newZone.run(fn, thisArg, args);\n    };\n    return ZoneContextManager;\n}());\n\n//# sourceMappingURL=ZoneContextManager.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/ZoneContextManager.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ZoneContextManager\": () => (/* reexport safe */ _ZoneContextManager__WEBPACK_IMPORTED_MODULE_0__.ZoneContextManager)\n/* harmony export */ });\n/* harmony import */ var _ZoneContextManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ZoneContextManager */ \"./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/ZoneContextManager.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/util.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/util.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isListenerObject\": () => (/* binding */ isListenerObject)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * check if an object has addEventListener and removeEventListener functions then it will return true\n * @param obj\n */\nfunction isListenerObject(obj) {\n    if (obj === void 0) { obj = {}; }\n    return (typeof obj.addEventListener === 'function' &&\n        typeof obj.removeEventListener === 'function');\n}\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/util.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/context-zone/build/esm/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-zone/build/esm/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ZoneContextManager\": () => (/* reexport safe */ _opentelemetry_context_zone_peer_dep__WEBPACK_IMPORTED_MODULE_0__.ZoneContextManager)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_context_zone_peer_dep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/context-zone-peer-dep */ \"./node_modules/@opentelemetry/context-zone-peer-dep/build/esm/index.js\");\n/* harmony import */ var zone_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zone.js */ \"./node_modules/zone.js/fesm2015/zone.js\");\n/* harmony import */ var zone_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(zone_js__WEBPACK_IMPORTED_MODULE_1__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/context-zone/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/ExportResult.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/ExportResult.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ExportResultCode\": () => (/* binding */ ExportResultCode)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n//# sourceMappingURL=ExportResult.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/ExportResult.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/baggage/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/baggage/constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BAGGAGE_KEY_PAIR_SEPARATOR\": () => (/* binding */ BAGGAGE_KEY_PAIR_SEPARATOR),\n/* harmony export */   \"BAGGAGE_PROPERTIES_SEPARATOR\": () => (/* binding */ BAGGAGE_PROPERTIES_SEPARATOR),\n/* harmony export */   \"BAGGAGE_ITEMS_SEPARATOR\": () => (/* binding */ BAGGAGE_ITEMS_SEPARATOR),\n/* harmony export */   \"BAGGAGE_HEADER\": () => (/* binding */ BAGGAGE_HEADER),\n/* harmony export */   \"BAGGAGE_MAX_NAME_VALUE_PAIRS\": () => (/* binding */ BAGGAGE_MAX_NAME_VALUE_PAIRS),\n/* harmony export */   \"BAGGAGE_MAX_PER_NAME_VALUE_PAIRS\": () => (/* binding */ BAGGAGE_MAX_PER_NAME_VALUE_PAIRS),\n/* harmony export */   \"BAGGAGE_MAX_TOTAL_LENGTH\": () => (/* binding */ BAGGAGE_MAX_TOTAL_LENGTH)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nvar BAGGAGE_PROPERTIES_SEPARATOR = ';';\nvar BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nvar BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nvar BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nvar BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nvar BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/baggage/constants.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"W3CBaggagePropagator\": () => (/* binding */ W3CBaggagePropagator)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../trace/suppress-tracing */ \"./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants */ \"./node_modules/@opentelemetry/core/build/esm/baggage/constants.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ \"./node_modules/@opentelemetry/core/build/esm/baggage/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nvar W3CBaggagePropagator = /** @class */ (function () {\n    function W3CBaggagePropagator() {\n    }\n    W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n        var baggage = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.getBaggage(context);\n        if (!baggage || (0,_trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context))\n            return;\n        var keyPairs = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getKeyPairs)(baggage)\n            .filter(function (pair) {\n            return pair.length <= _constants__WEBPACK_IMPORTED_MODULE_2__.BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, _constants__WEBPACK_IMPORTED_MODULE_2__.BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        var headerValue = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.serializeKeyPairs)(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, _constants__WEBPACK_IMPORTED_MODULE_2__.BAGGAGE_HEADER, headerValue);\n        }\n    };\n    W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n        var headerValue = getter.get(carrier, _constants__WEBPACK_IMPORTED_MODULE_2__.BAGGAGE_HEADER);\n        if (!headerValue)\n            return context;\n        var baggage = {};\n        if (headerValue.length === 0) {\n            return context;\n        }\n        var pairs = headerValue.split(_constants__WEBPACK_IMPORTED_MODULE_2__.BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(function (entry) {\n            var keyPair = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.parsePairKeyValue)(entry);\n            if (keyPair) {\n                var baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.setBaggage(context, _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.createBaggage(baggage));\n    };\n    W3CBaggagePropagator.prototype.fields = function () {\n        return [_constants__WEBPACK_IMPORTED_MODULE_2__.BAGGAGE_HEADER];\n    };\n    return W3CBaggagePropagator;\n}());\n\n//# sourceMappingURL=W3CBaggagePropagator.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/baggage/utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/baggage/utils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"serializeKeyPairs\": () => (/* binding */ serializeKeyPairs),\n/* harmony export */   \"getKeyPairs\": () => (/* binding */ getKeyPairs),\n/* harmony export */   \"parsePairKeyValue\": () => (/* binding */ parsePairKeyValue),\n/* harmony export */   \"parseKeyPairsIntoRecord\": () => (/* binding */ parseKeyPairsIntoRecord)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./node_modules/@opentelemetry/core/build/esm/baggage/constants.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce(function (hValue, current) {\n        var value = \"\" + hValue + (hValue !== '' ? _constants__WEBPACK_IMPORTED_MODULE_1__.BAGGAGE_ITEMS_SEPARATOR : '') + current;\n        return value.length > _constants__WEBPACK_IMPORTED_MODULE_1__.BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nfunction getKeyPairs(baggage) {\n    return baggage\n        .getAllEntries()\n        .map(function (_a) {\n        var key = _a[0], value = _a[1];\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n    });\n}\nfunction parsePairKeyValue(entry) {\n    var valueProps = entry.split(_constants__WEBPACK_IMPORTED_MODULE_1__.BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    var keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    var keyPair = keyPairPart.split(_constants__WEBPACK_IMPORTED_MODULE_1__.BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (keyPair.length !== 2)\n        return;\n    var key = decodeURIComponent(keyPair[0].trim());\n    var value = decodeURIComponent(keyPair[1].trim());\n    var metadata;\n    if (valueProps.length > 0) {\n        metadata = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.baggageEntryMetadataFromString)(valueProps.join(_constants__WEBPACK_IMPORTED_MODULE_1__.BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key: key, value: value, metadata: metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nfunction parseKeyPairsIntoRecord(value) {\n    if (typeof value !== 'string' || value.length === 0)\n        return {};\n    return value\n        .split(_constants__WEBPACK_IMPORTED_MODULE_1__.BAGGAGE_ITEMS_SEPARATOR)\n        .map(function (entry) {\n        return parsePairKeyValue(entry);\n    })\n        .filter(function (keyPair) { return keyPair !== undefined && keyPair.value.length > 0; })\n        .reduce(function (headers, keyPair) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        headers[keyPair.key] = keyPair.value;\n        return headers;\n    }, {});\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/baggage/utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/common/attributes.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/attributes.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sanitizeAttributes\": () => (/* binding */ sanitizeAttributes),\n/* harmony export */   \"isAttributeValue\": () => (/* binding */ isAttributeValue)\n/* harmony export */ });\nfunction sanitizeAttributes(attributes) {\n    var out = {};\n    if (attributes == null || typeof attributes !== 'object') {\n        return out;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    for (var _i = 0, _a = Object.entries(attributes); _i < _a.length; _i++) {\n        var _b = _a[_i], k = _b[0], v = _b[1];\n        if (isAttributeValue(v)) {\n            if (Array.isArray(v)) {\n                out[k] = v.slice();\n            }\n            else {\n                out[k] = v;\n            }\n        }\n    }\n    return out;\n}\nfunction isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    var type;\n    for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {\n        var element = arr_1[_i];\n        // null/undefined elements are allowed\n        if (element == null)\n            continue;\n        if (!type) {\n            if (isValidPrimitiveAttributeValue(element)) {\n                type = typeof element;\n                continue;\n            }\n            // encountered an invalid primitive\n            return false;\n        }\n        if (typeof element === type) {\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n            return true;\n        case 'boolean':\n            return true;\n        case 'string':\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=attributes.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/common/attributes.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setGlobalErrorHandler\": () => (/* binding */ setGlobalErrorHandler),\n/* harmony export */   \"globalErrorHandler\": () => (/* binding */ globalErrorHandler)\n/* harmony export */ });\n/* harmony import */ var _logging_error_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logging-error-handler */ \"./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The global error handler delegate */\nvar delegateHandler = (0,_logging_error_handler__WEBPACK_IMPORTED_MODULE_0__.loggingErrorHandler)();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nfunction setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nfunction globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch (_a) { } // eslint-disable-line no-empty\n}\n//# sourceMappingURL=global-error-handler.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"loggingErrorHandler\": () => (/* binding */ loggingErrorHandler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nfunction loggingErrorHandler() {\n    return function (ex) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    var result = {};\n    var current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n            if (result[propertyName])\n                return;\n            var value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/common/time.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/time.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hrTime\": () => (/* binding */ hrTime),\n/* harmony export */   \"timeInputToHrTime\": () => (/* binding */ timeInputToHrTime),\n/* harmony export */   \"hrTimeDuration\": () => (/* binding */ hrTimeDuration),\n/* harmony export */   \"hrTimeToTimeStamp\": () => (/* binding */ hrTimeToTimeStamp),\n/* harmony export */   \"hrTimeToNanoseconds\": () => (/* binding */ hrTimeToNanoseconds),\n/* harmony export */   \"hrTimeToMilliseconds\": () => (/* binding */ hrTimeToMilliseconds),\n/* harmony export */   \"hrTimeToMicroseconds\": () => (/* binding */ hrTimeToMicroseconds),\n/* harmony export */   \"isTimeInputHrTime\": () => (/* binding */ isTimeInputHrTime),\n/* harmony export */   \"isTimeInput\": () => (/* binding */ isTimeInput)\n/* harmony export */ });\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar NANOSECOND_DIGITS = 9;\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number to HrTime, HrTime = [number, number].\n * The first number is UNIX Epoch time in seconds since 00:00:00 UTC on 1 January 1970.\n * The second number represents the partial second elapsed since Unix Epoch time represented by first number in nanoseconds.\n * For example, 2021-01-01T12:30:10.150Z in UNIX Epoch time in milliseconds is represented as 1609504210150.\n * numberToHrtime calculates the first number by converting and truncating the Epoch time in milliseconds to seconds:\n * HrTime[0] = Math.trunc(1609504210150 / 1000) = 1609504210.\n * numberToHrtime calculates the second number by converting the digits after the decimal point of the subtraction, (1609504210150 / 1000) - HrTime[0], to nanoseconds:\n * HrTime[1] = Number((1609504210.150 - HrTime[0]).toFixed(9)) * SECOND_TO_NANOSECONDS = 150000000.\n * This is represented in HrTime format as [1609504210, 150000000].\n * @param epochMillis\n */\nfunction numberToHrtime(epochMillis) {\n    var epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    var seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    var nanos = Number((epochSeconds - seconds).toFixed(NANOSECOND_DIGITS)) *\n        SECOND_TO_NANOSECONDS;\n    return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n    var timeOrigin = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        var perf = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nfunction hrTime(performanceNow) {\n    var timeOrigin = numberToHrtime(getTimeOrigin());\n    var now = numberToHrtime(typeof performanceNow === 'number' ? performanceNow : _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.now());\n    var seconds = timeOrigin[0] + now[0];\n    var nanos = timeOrigin[1] + now[1];\n    // Nanoseconds\n    if (nanos > SECOND_TO_NANOSECONDS) {\n        nanos -= SECOND_TO_NANOSECONDS;\n        seconds += 1;\n    }\n    return [seconds, nanos];\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nfunction timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return numberToHrtime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return numberToHrtime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nfunction hrTimeDuration(startTime, endTime) {\n    var seconds = endTime[0] - startTime[0];\n    var nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nfunction hrTimeToTimeStamp(time) {\n    var precision = NANOSECOND_DIGITS;\n    var tmp = \"\" + '0'.repeat(precision) + time[1] + \"Z\";\n    var nanoString = tmp.substr(tmp.length - precision - 1);\n    var date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nfunction hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nfunction hrTimeToMilliseconds(time) {\n    return Math.round(time[0] * 1e3 + time[1] / 1e6);\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nfunction hrTimeToMicroseconds(time) {\n    return Math.round(time[0] * 1e6 + time[1] / 1e3);\n}\n/**\n * check if time is HrTime\n * @param value\n */\nfunction isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nfunction isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n//# sourceMappingURL=time.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/common/time.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/common/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/common/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"W3CBaggagePropagator\": () => (/* reexport safe */ _baggage_propagation_W3CBaggagePropagator__WEBPACK_IMPORTED_MODULE_0__.W3CBaggagePropagator),\n/* harmony export */   \"isAttributeValue\": () => (/* reexport safe */ _common_attributes__WEBPACK_IMPORTED_MODULE_1__.isAttributeValue),\n/* harmony export */   \"sanitizeAttributes\": () => (/* reexport safe */ _common_attributes__WEBPACK_IMPORTED_MODULE_1__.sanitizeAttributes),\n/* harmony export */   \"globalErrorHandler\": () => (/* reexport safe */ _common_global_error_handler__WEBPACK_IMPORTED_MODULE_2__.globalErrorHandler),\n/* harmony export */   \"setGlobalErrorHandler\": () => (/* reexport safe */ _common_global_error_handler__WEBPACK_IMPORTED_MODULE_2__.setGlobalErrorHandler),\n/* harmony export */   \"loggingErrorHandler\": () => (/* reexport safe */ _common_logging_error_handler__WEBPACK_IMPORTED_MODULE_3__.loggingErrorHandler),\n/* harmony export */   \"hrTime\": () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_4__.hrTime),\n/* harmony export */   \"hrTimeDuration\": () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_4__.hrTimeDuration),\n/* harmony export */   \"hrTimeToMicroseconds\": () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_4__.hrTimeToMicroseconds),\n/* harmony export */   \"hrTimeToMilliseconds\": () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_4__.hrTimeToMilliseconds),\n/* harmony export */   \"hrTimeToNanoseconds\": () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_4__.hrTimeToNanoseconds),\n/* harmony export */   \"hrTimeToTimeStamp\": () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_4__.hrTimeToTimeStamp),\n/* harmony export */   \"isTimeInput\": () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_4__.isTimeInput),\n/* harmony export */   \"isTimeInputHrTime\": () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_4__.isTimeInputHrTime),\n/* harmony export */   \"timeInputToHrTime\": () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_4__.timeInputToHrTime),\n/* harmony export */   \"ExportResultCode\": () => (/* reexport safe */ _ExportResult__WEBPACK_IMPORTED_MODULE_6__.ExportResultCode),\n/* harmony export */   \"VERSION\": () => (/* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_7__.VERSION),\n/* harmony export */   \"baggageUtils\": () => (/* reexport module object */ _baggage_utils__WEBPACK_IMPORTED_MODULE_8__),\n/* harmony export */   \"RandomIdGenerator\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.RandomIdGenerator),\n/* harmony export */   \"SDK_INFO\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.SDK_INFO),\n/* harmony export */   \"_globalThis\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__._globalThis),\n/* harmony export */   \"getEnv\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.getEnv),\n/* harmony export */   \"hexToBase64\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.hexToBase64),\n/* harmony export */   \"otperformance\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.otperformance),\n/* harmony export */   \"unrefTimer\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.unrefTimer),\n/* harmony export */   \"CompositePropagator\": () => (/* reexport safe */ _propagation_composite__WEBPACK_IMPORTED_MODULE_10__.CompositePropagator),\n/* harmony export */   \"TRACE_PARENT_HEADER\": () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_11__.TRACE_PARENT_HEADER),\n/* harmony export */   \"TRACE_STATE_HEADER\": () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_11__.TRACE_STATE_HEADER),\n/* harmony export */   \"W3CTraceContextPropagator\": () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_11__.W3CTraceContextPropagator),\n/* harmony export */   \"parseTraceParent\": () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_11__.parseTraceParent),\n/* harmony export */   \"RPCType\": () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_13__.RPCType),\n/* harmony export */   \"deleteRPCMetadata\": () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_13__.deleteRPCMetadata),\n/* harmony export */   \"getRPCMetadata\": () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_13__.getRPCMetadata),\n/* harmony export */   \"setRPCMetadata\": () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_13__.setRPCMetadata),\n/* harmony export */   \"AlwaysOffSampler\": () => (/* reexport safe */ _trace_sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_14__.AlwaysOffSampler),\n/* harmony export */   \"AlwaysOnSampler\": () => (/* reexport safe */ _trace_sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_15__.AlwaysOnSampler),\n/* harmony export */   \"ParentBasedSampler\": () => (/* reexport safe */ _trace_sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_16__.ParentBasedSampler),\n/* harmony export */   \"TraceIdRatioBasedSampler\": () => (/* reexport safe */ _trace_sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_17__.TraceIdRatioBasedSampler),\n/* harmony export */   \"isTracingSuppressed\": () => (/* reexport safe */ _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_18__.isTracingSuppressed),\n/* harmony export */   \"suppressTracing\": () => (/* reexport safe */ _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_18__.suppressTracing),\n/* harmony export */   \"unsuppressTracing\": () => (/* reexport safe */ _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_18__.unsuppressTracing),\n/* harmony export */   \"TraceState\": () => (/* reexport safe */ _trace_TraceState__WEBPACK_IMPORTED_MODULE_19__.TraceState),\n/* harmony export */   \"DEFAULT_ATTRIBUTE_COUNT_LIMIT\": () => (/* reexport safe */ _utils_environment__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_ATTRIBUTE_COUNT_LIMIT),\n/* harmony export */   \"DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT\": () => (/* reexport safe */ _utils_environment__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT),\n/* harmony export */   \"DEFAULT_ENVIRONMENT\": () => (/* reexport safe */ _utils_environment__WEBPACK_IMPORTED_MODULE_20__.DEFAULT_ENVIRONMENT),\n/* harmony export */   \"parseEnvironment\": () => (/* reexport safe */ _utils_environment__WEBPACK_IMPORTED_MODULE_20__.parseEnvironment),\n/* harmony export */   \"merge\": () => (/* reexport safe */ _utils_merge__WEBPACK_IMPORTED_MODULE_21__.merge),\n/* harmony export */   \"TracesSamplerValues\": () => (/* reexport safe */ _utils_sampling__WEBPACK_IMPORTED_MODULE_22__.TracesSamplerValues),\n/* harmony export */   \"isUrlIgnored\": () => (/* reexport safe */ _utils_url__WEBPACK_IMPORTED_MODULE_23__.isUrlIgnored),\n/* harmony export */   \"urlMatches\": () => (/* reexport safe */ _utils_url__WEBPACK_IMPORTED_MODULE_23__.urlMatches),\n/* harmony export */   \"isWrapped\": () => (/* reexport safe */ _utils_wrap__WEBPACK_IMPORTED_MODULE_24__.isWrapped)\n/* harmony export */ });\n/* harmony import */ var _baggage_propagation_W3CBaggagePropagator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage/propagation/W3CBaggagePropagator */ \"./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js\");\n/* harmony import */ var _common_attributes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/attributes */ \"./node_modules/@opentelemetry/core/build/esm/common/attributes.js\");\n/* harmony import */ var _common_global_error_handler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common/global-error-handler */ \"./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _common_logging_error_handler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common/logging-error-handler */ \"./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js\");\n/* harmony import */ var _common_time__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common/time */ \"./node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _common_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common/types */ \"./node_modules/@opentelemetry/core/build/esm/common/types.js\");\n/* harmony import */ var _ExportResult__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ExportResult */ \"./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./version */ \"./node_modules/@opentelemetry/core/build/esm/version.js\");\n/* harmony import */ var _baggage_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./baggage/utils */ \"./node_modules/@opentelemetry/core/build/esm/baggage/utils.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/index.js\");\n/* harmony import */ var _propagation_composite__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./propagation/composite */ \"./node_modules/@opentelemetry/core/build/esm/propagation/composite.js\");\n/* harmony import */ var _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./trace/W3CTraceContextPropagator */ \"./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js\");\n/* harmony import */ var _trace_IdGenerator__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./trace/IdGenerator */ \"./node_modules/@opentelemetry/core/build/esm/trace/IdGenerator.js\");\n/* harmony import */ var _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./trace/rpc-metadata */ \"./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js\");\n/* harmony import */ var _trace_sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./trace/sampler/AlwaysOffSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _trace_sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./trace/sampler/AlwaysOnSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js\");\n/* harmony import */ var _trace_sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./trace/sampler/ParentBasedSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js\");\n/* harmony import */ var _trace_sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./trace/sampler/TraceIdRatioBasedSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js\");\n/* harmony import */ var _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./trace/suppress-tracing */ \"./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _trace_TraceState__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./trace/TraceState */ \"./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js\");\n/* harmony import */ var _utils_environment__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utils/environment */ \"./node_modules/@opentelemetry/core/build/esm/utils/environment.js\");\n/* harmony import */ var _utils_merge__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utils/merge */ \"./node_modules/@opentelemetry/core/build/esm/utils/merge.js\");\n/* harmony import */ var _utils_sampling__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utils/sampling */ \"./node_modules/@opentelemetry/core/build/esm/utils/sampling.js\");\n/* harmony import */ var _utils_url__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./utils/url */ \"./node_modules/@opentelemetry/core/build/esm/utils/url.js\");\n/* harmony import */ var _utils_wrap__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./utils/wrap */ \"./node_modules/@opentelemetry/core/build/esm/utils/wrap.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/internal/validators.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/internal/validators.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"validateKey\": () => (/* binding */ validateKey),\n/* harmony export */   \"validateValue\": () => (/* binding */ validateValue)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nfunction validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nfunction validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=validators.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/internal/validators.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RandomIdGenerator\": () => (/* binding */ RandomIdGenerator)\n/* harmony export */ });\nvar SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\nvar RandomIdGenerator = /** @class */ (function () {\n    function RandomIdGenerator() {\n        /**\n         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n         * characters corresponding to 128 bits.\n         */\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        /**\n         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n         * characters corresponding to 64 bits.\n         */\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n    }\n    return RandomIdGenerator;\n}());\n\nvar SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (var i = 0; i < bytes * 2; i++) {\n            SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n            // valid hex characters in the range 48-57 and 97-102\n            if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n                SHARED_CHAR_CODES_ARRAY[i] += 39;\n            }\n        }\n        return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEnv\": () => (/* binding */ getEnv)\n/* harmony export */ });\n/* harmony import */ var _utils_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/environment */ \"./node_modules/@opentelemetry/core/build/esm/utils/environment.js\");\n/* harmony import */ var _globalThis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globalThis */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Gets the environment variables\n */\nfunction getEnv() {\n    var globalEnv = (0,_utils_environment__WEBPACK_IMPORTED_MODULE_0__.parseEnvironment)(_globalThis__WEBPACK_IMPORTED_MODULE_1__._globalThis);\n    return Object.assign({}, _utils_environment__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ENVIRONMENT, globalEnv);\n}\n//# sourceMappingURL=environment.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_globalThis\": () => (/* binding */ _globalThis)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/api and\n// @opentelemetry/api-metrics too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nvar _globalThis = typeof globalThis === 'object' ? globalThis :\n    typeof self === 'object' ? self :\n        typeof window === 'object' ? window :\n            typeof __webpack_require__.g === 'object' ? __webpack_require__.g :\n                {};\n//# sourceMappingURL=globalThis.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hexToBase64\": () => (/* binding */ hexToBase64)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction hexToBase64(hexStr) {\n    var hexStrLen = hexStr.length;\n    var hexAsciiCharsStr = '';\n    for (var i = 0; i < hexStrLen; i += 2) {\n        var hexPair = hexStr.substring(i, i + 2);\n        var hexVal = parseInt(hexPair, 16);\n        hexAsciiCharsStr += String.fromCharCode(hexVal);\n    }\n    return btoa(hexAsciiCharsStr);\n}\n//# sourceMappingURL=hex-to-base64.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEnv\": () => (/* reexport safe */ _environment__WEBPACK_IMPORTED_MODULE_0__.getEnv),\n/* harmony export */   \"_globalThis\": () => (/* reexport safe */ _globalThis__WEBPACK_IMPORTED_MODULE_1__._globalThis),\n/* harmony export */   \"hexToBase64\": () => (/* reexport safe */ _hex_to_base64__WEBPACK_IMPORTED_MODULE_2__.hexToBase64),\n/* harmony export */   \"RandomIdGenerator\": () => (/* reexport safe */ _RandomIdGenerator__WEBPACK_IMPORTED_MODULE_3__.RandomIdGenerator),\n/* harmony export */   \"otperformance\": () => (/* reexport safe */ _performance__WEBPACK_IMPORTED_MODULE_4__.otperformance),\n/* harmony export */   \"SDK_INFO\": () => (/* reexport safe */ _sdk_info__WEBPACK_IMPORTED_MODULE_5__.SDK_INFO),\n/* harmony export */   \"unrefTimer\": () => (/* reexport safe */ _timer_util__WEBPACK_IMPORTED_MODULE_6__.unrefTimer)\n/* harmony export */ });\n/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js\");\n/* harmony import */ var _globalThis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globalThis */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js\");\n/* harmony import */ var _hex_to_base64__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hex-to-base64 */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js\");\n/* harmony import */ var _RandomIdGenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RandomIdGenerator */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js\");\n/* harmony import */ var _performance__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./performance */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js\");\n/* harmony import */ var _sdk_info__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sdk-info */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js\");\n/* harmony import */ var _timer_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./timer-util */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"otperformance\": () => (/* binding */ otperformance)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar otperformance = performance;\n//# sourceMappingURL=performance.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SDK_INFO\": () => (/* binding */ SDK_INFO)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../version */ \"./node_modules/@opentelemetry/core/build/esm/version.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\n\n\n/** Constants describing the SDK in use */\nvar SDK_INFO = (_a = {},\n    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.TELEMETRY_SDK_NAME] = 'opentelemetry',\n    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = 'browser',\n    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.TelemetrySdkLanguageValues.WEBJS,\n    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = _version__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n    _a);\n//# sourceMappingURL=sdk-info.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"unrefTimer\": () => (/* binding */ unrefTimer)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction unrefTimer(_timer) { }\n//# sourceMappingURL=timer-util.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/propagation/composite.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/propagation/composite.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CompositePropagator\": () => (/* binding */ CompositePropagator)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */ (function () {\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    function CompositePropagator(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(function (p) { return (typeof p.fields === 'function' ? p.fields() : []); })\n            .reduce(function (x, y) { return x.concat(y); }, [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    CompositePropagator.prototype.inject = function (context, carrier, setter) {\n        for (var _i = 0, _a = this._propagators; _i < _a.length; _i++) {\n            var propagator = _a[_i];\n            try {\n                propagator.inject(context, carrier, setter);\n            }\n            catch (err) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n        }\n    };\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    CompositePropagator.prototype.extract = function (context, carrier, getter) {\n        return this._propagators.reduce(function (ctx, propagator) {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n            return ctx;\n        }, context);\n    };\n    CompositePropagator.prototype.fields = function () {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    };\n    return CompositePropagator;\n}());\n\n//# sourceMappingURL=composite.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/propagation/composite.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/IdGenerator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/IdGenerator.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=IdGenerator.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/trace/IdGenerator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TraceState\": () => (/* binding */ TraceState)\n/* harmony export */ });\n/* harmony import */ var _internal_validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/validators */ \"./node_modules/@opentelemetry/core/build/esm/internal/validators.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceState = /** @class */ (function () {\n    function TraceState(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    TraceState.prototype.set = function (key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    };\n    TraceState.prototype.unset = function (key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    };\n    TraceState.prototype.get = function (key) {\n        return this._internalState.get(key);\n    };\n    TraceState.prototype.serialize = function () {\n        var _this = this;\n        return this._keys()\n            .reduce(function (agg, key) {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    };\n    TraceState.prototype._parse = function (rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce(function (agg, part) {\n            var listMember = part.trim(); // Optional Whitespace (OWS) handling\n            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                var key = listMember.slice(0, i);\n                var value = listMember.slice(i + 1, part.length);\n                if ((0,_internal_validators__WEBPACK_IMPORTED_MODULE_0__.validateKey)(key) && (0,_internal_validators__WEBPACK_IMPORTED_MODULE_0__.validateValue)(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    };\n    TraceState.prototype._keys = function () {\n        return Array.from(this._internalState.keys()).reverse();\n    };\n    TraceState.prototype._clone = function () {\n        var traceState = new TraceState();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    };\n    return TraceState;\n}());\n\n//# sourceMappingURL=TraceState.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TRACE_PARENT_HEADER\": () => (/* binding */ TRACE_PARENT_HEADER),\n/* harmony export */   \"TRACE_STATE_HEADER\": () => (/* binding */ TRACE_STATE_HEADER),\n/* harmony export */   \"parseTraceParent\": () => (/* binding */ parseTraceParent),\n/* harmony export */   \"W3CTraceContextPropagator\": () => (/* binding */ W3CTraceContextPropagator)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _suppress_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./suppress-tracing */ \"./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _TraceState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TraceState */ \"./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar TRACE_PARENT_HEADER = 'traceparent';\nvar TRACE_STATE_HEADER = 'tracestate';\nvar VERSION = '00';\nvar VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nvar TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nvar PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nvar FLAGS_PART = '[\\\\da-f]{2}';\nvar TRACE_PARENT_REGEX = new RegExp(\"^\\\\s?(\" + VERSION_PART + \")-(\" + TRACE_ID_PART + \")-(\" + PARENT_ID_PART + \")-(\" + FLAGS_PART + \")(-.*)?\\\\s?$\");\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nfunction parseTraceParent(traceParent) {\n    var match = TRACE_PARENT_REGEX.exec(traceParent);\n    if (!match)\n        return null;\n    // According to the specification the implementation should be compatible\n    // with future versions. If there are more parts, we only reject it if it's using version 00\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n    if (match[1] === '00' && match[5])\n        return null;\n    return {\n        traceId: match[2],\n        spanId: match[3],\n        traceFlags: parseInt(match[4], 16),\n    };\n}\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nvar W3CTraceContextPropagator = /** @class */ (function () {\n    function W3CTraceContextPropagator() {\n    }\n    W3CTraceContextPropagator.prototype.inject = function (context, carrier, setter) {\n        var spanContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getSpanContext(context);\n        if (!spanContext ||\n            (0,_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context) ||\n            !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isSpanContextValid)(spanContext))\n            return;\n        var traceParent = VERSION + \"-\" + spanContext.traceId + \"-\" + spanContext.spanId + \"-0\" + Number(spanContext.traceFlags || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.NONE).toString(16);\n        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n    };\n    W3CTraceContextPropagator.prototype.extract = function (context, carrier, getter) {\n        var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n            return context;\n        var traceParent = Array.isArray(traceParentHeader)\n            ? traceParentHeader[0]\n            : traceParentHeader;\n        if (typeof traceParent !== 'string')\n            return context;\n        var spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n            return context;\n        spanContext.isRemote = true;\n        var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n            // If more than one `tracestate` header is found, we merge them into a\n            // single header.\n            var state = Array.isArray(traceStateHeader)\n                ? traceStateHeader.join(',')\n                : traceStateHeader;\n            spanContext.traceState = new _TraceState__WEBPACK_IMPORTED_MODULE_2__.TraceState(typeof state === 'string' ? state : undefined);\n        }\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpanContext(context, spanContext);\n    };\n    W3CTraceContextPropagator.prototype.fields = function () {\n        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n    };\n    return W3CTraceContextPropagator;\n}());\n\n//# sourceMappingURL=W3CTraceContextPropagator.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RPCType\": () => (/* binding */ RPCType),\n/* harmony export */   \"setRPCMetadata\": () => (/* binding */ setRPCMetadata),\n/* harmony export */   \"deleteRPCMetadata\": () => (/* binding */ deleteRPCMetadata),\n/* harmony export */   \"getRPCMetadata\": () => (/* binding */ getRPCMetadata)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar RPC_METADATA_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry SDK Context Key RPC_METADATA');\nvar RPCType;\n(function (RPCType) {\n    RPCType[\"HTTP\"] = \"http\";\n})(RPCType || (RPCType = {}));\nfunction setRPCMetadata(context, meta) {\n    return context.setValue(RPC_METADATA_KEY, meta);\n}\nfunction deleteRPCMetadata(context) {\n    return context.deleteValue(RPC_METADATA_KEY);\n}\nfunction getRPCMetadata(context) {\n    return context.getValue(RPC_METADATA_KEY);\n}\n//# sourceMappingURL=rpc-metadata.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AlwaysOffSampler\": () => (/* binding */ AlwaysOffSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sampler that samples no traces. */\nvar AlwaysOffSampler = /** @class */ (function () {\n    function AlwaysOffSampler() {\n    }\n    AlwaysOffSampler.prototype.shouldSample = function () {\n        return {\n            decision: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.NOT_RECORD,\n        };\n    };\n    AlwaysOffSampler.prototype.toString = function () {\n        return 'AlwaysOffSampler';\n    };\n    return AlwaysOffSampler;\n}());\n\n//# sourceMappingURL=AlwaysOffSampler.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AlwaysOnSampler\": () => (/* binding */ AlwaysOnSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sampler that samples all traces. */\nvar AlwaysOnSampler = /** @class */ (function () {\n    function AlwaysOnSampler() {\n    }\n    AlwaysOnSampler.prototype.shouldSample = function () {\n        return {\n            decision: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    };\n    AlwaysOnSampler.prototype.toString = function () {\n        return 'AlwaysOnSampler';\n    };\n    return AlwaysOnSampler;\n}());\n\n//# sourceMappingURL=AlwaysOnSampler.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ParentBasedSampler\": () => (/* binding */ ParentBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _common_global_error_handler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/global-error-handler */ \"./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AlwaysOffSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AlwaysOnSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */ (function () {\n    function ParentBasedSampler(config) {\n        var _a, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n            (0,_common_global_error_handler__WEBPACK_IMPORTED_MODULE_1__.globalErrorHandler)(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_3__.AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_3__.AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n        this._localParentSampled =\n            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_3__.AlwaysOnSampler();\n        this._localParentNotSampled =\n            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n    }\n    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getSpanContext(context);\n        if (!parentContext || !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isSpanContextValid)(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    };\n    ParentBasedSampler.prototype.toString = function () {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n    };\n    return ParentBasedSampler;\n}());\n\n//# sourceMappingURL=ParentBasedSampler.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TraceIdRatioBasedSampler\": () => (/* binding */ TraceIdRatioBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */ (function () {\n    function TraceIdRatioBasedSampler(_ratio) {\n        if (_ratio === void 0) { _ratio = 0; }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n        return {\n            decision: (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isValidTraceId)(traceId) && this._accumulate(traceId) < this._upperBound\n                ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.RECORD_AND_SAMPLED\n                : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.NOT_RECORD,\n        };\n    };\n    TraceIdRatioBasedSampler.prototype.toString = function () {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n    };\n    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    };\n    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n            var pos = i * 8;\n            var part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    };\n    return TraceIdRatioBasedSampler;\n}());\n\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"suppressTracing\": () => (/* binding */ suppressTracing),\n/* harmony export */   \"unsuppressTracing\": () => (/* binding */ unsuppressTracing),\n/* harmony export */   \"isTracingSuppressed\": () => (/* binding */ isTracingSuppressed)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar SUPPRESS_TRACING_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nfunction suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nfunction unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nfunction isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/environment.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/environment.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT\": () => (/* binding */ DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT),\n/* harmony export */   \"DEFAULT_ATTRIBUTE_COUNT_LIMIT\": () => (/* binding */ DEFAULT_ATTRIBUTE_COUNT_LIMIT),\n/* harmony export */   \"DEFAULT_ENVIRONMENT\": () => (/* binding */ DEFAULT_ENVIRONMENT),\n/* harmony export */   \"parseEnvironment\": () => (/* binding */ parseEnvironment)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _sampling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sampling */ \"./node_modules/@opentelemetry/core/build/esm/utils/sampling.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nvar DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nvar DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nvar DEFAULT_ENVIRONMENT = {\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_TRACES_EXPORTER: 'none',\n    OTEL_TRACES_SAMPLER: _sampling__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n};\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL,\n    VERBOSE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.VERBOSE,\n    DEBUG: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.DEBUG,\n    INFO: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO,\n    WARN: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.WARN,\n    ERROR: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ERROR,\n    NONE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nfunction parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n//# sourceMappingURL=environment.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/utils/environment.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isPlainObject\": () => (/* binding */ isPlainObject)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nvar objectTag = '[object Object]';\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\nvar funcProto = Function.prototype;\nvar funcToString = funcProto.toString;\nvar objectCtorString = funcToString.call(Object);\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\nvar objectProto = Object.prototype;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nvar nativeObjectToString = objectProto.toString;\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n    return function (arg) {\n        return func(transform(arg));\n    };\n}\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n        return false;\n    }\n    var proto = getPrototype(value);\n    if (proto === null) {\n        return true;\n    }\n    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) === objectCtorString;\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    var unmasked = false;\n    try {\n        value[symToStringTag] = undefined;\n        unmasked = true;\n    }\n    catch (e) {\n        // silence\n    }\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        }\n        else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n//# sourceMappingURL=lodash.merge.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/merge.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/merge.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"merge\": () => (/* binding */ merge)\n/* harmony export */ });\n/* harmony import */ var _lodash_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lodash.merge */ \"./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nvar MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nfunction merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var result = args.shift();\n    var objects = new WeakMap();\n    while (args.length > 0) {\n        result = mergeTwoObjects(result, args.shift(), 0, objects);\n    }\n    return result;\n}\nfunction takeValue(value) {\n    if (isArray(value)) {\n        return value.slice();\n    }\n    return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level, objects) {\n    if (level === void 0) { level = 0; }\n    var result;\n    if (level > MAX_LEVEL) {\n        return undefined;\n    }\n    level++;\n    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n        result = takeValue(two);\n    }\n    else if (isArray(one)) {\n        result = one.slice();\n        if (isArray(two)) {\n            for (var i = 0, j = two.length; i < j; i++) {\n                result.push(takeValue(two[i]));\n            }\n        }\n        else if (isObject(two)) {\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                result[key] = takeValue(two[key]);\n            }\n        }\n    }\n    else if (isObject(one)) {\n        if (isObject(two)) {\n            if (!shouldMerge(one, two)) {\n                return two;\n            }\n            result = Object.assign({}, one);\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                var twoValue = two[key];\n                if (isPrimitive(twoValue)) {\n                    if (typeof twoValue === 'undefined') {\n                        delete result[key];\n                    }\n                    else {\n                        // result[key] = takeValue(twoValue);\n                        result[key] = twoValue;\n                    }\n                }\n                else {\n                    var obj1 = result[key];\n                    var obj2 = twoValue;\n                    if (wasObjectReferenced(one, key, objects) ||\n                        wasObjectReferenced(two, key, objects)) {\n                        delete result[key];\n                    }\n                    else {\n                        if (isObject(obj1) && isObject(obj2)) {\n                            var arr1 = objects.get(obj1) || [];\n                            var arr2 = objects.get(obj2) || [];\n                            arr1.push({ obj: one, key: key });\n                            arr2.push({ obj: two, key: key });\n                            objects.set(obj1, arr1);\n                            objects.set(obj2, arr2);\n                        }\n                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n                    }\n                }\n            }\n        }\n        else {\n            result = two;\n        }\n    }\n    return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n    var arr = objects.get(obj[key]) || [];\n    for (var i = 0, j = arr.length; i < j; i++) {\n        var info = arr[i];\n        if (info.key === key && info.obj === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isObject(value) {\n    return !isPrimitive(value) && !isArray(value) && !isFunction(value) && typeof value === 'object';\n}\nfunction isPrimitive(value) {\n    return typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value instanceof Date ||\n        value instanceof RegExp ||\n        value === null;\n}\nfunction shouldMerge(one, two) {\n    if (!(0,_lodash_merge__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(one) || !(0,_lodash_merge__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(two)) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=merge.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/utils/merge.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/sampling.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/sampling.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TracesSamplerValues\": () => (/* binding */ TracesSamplerValues)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\n//# sourceMappingURL=sampling.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/utils/sampling.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/url.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/url.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"urlMatches\": () => (/* binding */ urlMatches),\n/* harmony export */   \"isUrlIgnored\": () => (/* binding */ isUrlIgnored)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction urlMatches(url, urlToMatch) {\n    if (typeof urlToMatch === 'string') {\n        return url === urlToMatch;\n    }\n    else {\n        return !!url.match(urlToMatch);\n    }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nfunction isUrlIgnored(url, ignoredUrls) {\n    if (!ignoredUrls) {\n        return false;\n    }\n    for (var _i = 0, ignoredUrls_1 = ignoredUrls; _i < ignoredUrls_1.length; _i++) {\n        var ignoreUrl = ignoredUrls_1[_i];\n        if (urlMatches(url, ignoreUrl)) {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=url.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/utils/url.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/wrap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/wrap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isWrapped\": () => (/* binding */ isWrapped)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nfunction isWrapped(func) {\n    return (typeof func === 'function' &&\n        typeof func.__original === 'function' &&\n        typeof func.__unwrap === 'function' &&\n        func.__wrapped === true);\n}\n//# sourceMappingURL=wrap.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/utils/wrap.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/version.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VERSION\": () => (/* binding */ VERSION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nvar VERSION = '1.0.1';\n//# sourceMappingURL=version.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/core/build/esm/version.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/OTLPExporterBase.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/OTLPExporterBase.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OTLPExporterBase\": () => (/* binding */ OTLPExporterBase)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Collector Exporter abstract base class\n */\nvar OTLPExporterBase = /** @class */ (function () {\n    /**\n     * @param config\n     */\n    function OTLPExporterBase(config) {\n        if (config === void 0) { config = {}; }\n        this._isShutdown = false;\n        this._shuttingDownPromise = Promise.resolve();\n        this._sendingPromises = [];\n        this.url = this.getDefaultUrl(config);\n        if (typeof config.hostname === 'string') {\n            this.hostname = config.hostname;\n        }\n        this.attributes = config.attributes;\n        this.shutdown = this.shutdown.bind(this);\n        this._concurrencyLimit =\n            typeof config.concurrencyLimit === 'number'\n                ? config.concurrencyLimit\n                : Infinity;\n        // platform dependent\n        this.onInit(config);\n    }\n    /**\n     * Export items.\n     * @param items\n     * @param resultCallback\n     */\n    OTLPExporterBase.prototype.export = function (items, resultCallback) {\n        if (this._isShutdown) {\n            resultCallback({\n                code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.FAILED,\n                error: new Error('Exporter has been shutdown'),\n            });\n            return;\n        }\n        if (this._sendingPromises.length >= this._concurrencyLimit) {\n            resultCallback({\n                code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.FAILED,\n                error: new Error('Concurrent export limit reached'),\n            });\n            return;\n        }\n        this._export(items)\n            .then(function () {\n            resultCallback({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.SUCCESS });\n        })\n            .catch(function (error) {\n            resultCallback({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.FAILED, error: error });\n        });\n    };\n    OTLPExporterBase.prototype._export = function (items) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug('items to be sent', items);\n                _this.send(items, resolve, reject);\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    };\n    /**\n     * Shutdown the exporter.\n     */\n    OTLPExporterBase.prototype.shutdown = function () {\n        var _this = this;\n        if (this._isShutdown) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug('shutdown already started');\n            return this._shuttingDownPromise;\n        }\n        this._isShutdown = true;\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug('shutdown started');\n        this._shuttingDownPromise = new Promise(function (resolve, reject) {\n            Promise.resolve()\n                .then(function () {\n                return _this.onShutdown();\n            })\n                .then(function () {\n                return Promise.all(_this._sendingPromises);\n            })\n                .then(function () {\n                resolve();\n            })\n                .catch(function (e) {\n                reject(e);\n            });\n        });\n        return this._shuttingDownPromise;\n    };\n    return OTLPExporterBase;\n}());\n\n//# sourceMappingURL=OTLPExporterBase.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/OTLPExporterBase.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OTLPExporterBase\": () => (/* reexport safe */ _OTLPExporterBase__WEBPACK_IMPORTED_MODULE_0__.OTLPExporterBase),\n/* harmony export */   \"OTLPExporterBrowserBase\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.OTLPExporterBrowserBase),\n/* harmony export */   \"OTLPTraceExporter\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.OTLPTraceExporter),\n/* harmony export */   \"otlpTypes\": () => (/* reexport module object */ _types__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   \"toCollectorResource\": () => (/* reexport safe */ _transform__WEBPACK_IMPORTED_MODULE_3__.toCollectorResource),\n/* harmony export */   \"toOTLPExportTraceServiceRequest\": () => (/* reexport safe */ _transform__WEBPACK_IMPORTED_MODULE_3__.toOTLPExportTraceServiceRequest),\n/* harmony export */   \"appendResourcePathToUrlIfNotPresent\": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_4__.appendResourcePathToUrlIfNotPresent)\n/* harmony export */ });\n/* harmony import */ var _OTLPExporterBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OTLPExporterBase */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/OTLPExporterBase.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/index.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/types.js\");\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transform */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/transform.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/util.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPExporterBrowserBase.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPExporterBrowserBase.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OTLPExporterBrowserBase\": () => (/* binding */ OTLPExporterBrowserBase)\n/* harmony export */ });\n/* harmony import */ var _OTLPExporterBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../OTLPExporterBase */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/OTLPExporterBase.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/util.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/util.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n/**\n * Collector Metric Exporter abstract base class\n */\nvar OTLPExporterBrowserBase = /** @class */ (function (_super) {\n    __extends(OTLPExporterBrowserBase, _super);\n    /**\n     * @param config\n     */\n    function OTLPExporterBrowserBase(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, config) || this;\n        _this._useXHR = false;\n        _this._useXHR =\n            !!config.headers || typeof navigator.sendBeacon !== 'function';\n        if (_this._useXHR) {\n            _this._headers = Object.assign({}, (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseHeaders)(config.headers), _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.baggageUtils.parseKeyPairsIntoRecord((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.getEnv)().OTEL_EXPORTER_OTLP_HEADERS));\n        }\n        else {\n            _this._headers = {};\n        }\n        return _this;\n    }\n    OTLPExporterBrowserBase.prototype.onInit = function () {\n        window.addEventListener('unload', this.shutdown);\n    };\n    OTLPExporterBrowserBase.prototype.onShutdown = function () {\n        window.removeEventListener('unload', this.shutdown);\n    };\n    OTLPExporterBrowserBase.prototype.send = function (items, onSuccess, onError) {\n        var _this = this;\n        if (this._isShutdown) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.debug('Shutdown already started. Cannot send objects');\n            return;\n        }\n        var serviceRequest = this.convert(items);\n        var body = JSON.stringify(serviceRequest);\n        var promise = new Promise(function (resolve, reject) {\n            if (_this._useXHR) {\n                (0,_util__WEBPACK_IMPORTED_MODULE_2__.sendWithXhr)(body, _this.url, _this._headers, resolve, reject);\n            }\n            else {\n                (0,_util__WEBPACK_IMPORTED_MODULE_2__.sendWithBeacon)(body, _this.url, { type: 'application/json' }, resolve, reject);\n            }\n        })\n            .then(onSuccess, onError);\n        this._sendingPromises.push(promise);\n        var popPromise = function () {\n            var index = _this._sendingPromises.indexOf(promise);\n            _this._sendingPromises.splice(index, 1);\n        };\n        promise.then(popPromise, popPromise);\n    };\n    return OTLPExporterBrowserBase;\n}(_OTLPExporterBase__WEBPACK_IMPORTED_MODULE_0__.OTLPExporterBase));\n\n//# sourceMappingURL=OTLPExporterBrowserBase.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPExporterBrowserBase.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPTraceExporter.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPTraceExporter.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OTLPTraceExporter\": () => (/* binding */ OTLPTraceExporter)\n/* harmony export */ });\n/* harmony import */ var _OTLPExporterBrowserBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OTLPExporterBrowserBase */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPExporterBrowserBase.js\");\n/* harmony import */ var _transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../transform */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/transform.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/util.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\nvar DEFAULT_COLLECTOR_RESOURCE_PATH = '/v1/traces';\nvar DEFAULT_COLLECTOR_URL = \"http://localhost:55681\" + DEFAULT_COLLECTOR_RESOURCE_PATH;\n/**\n * Collector Trace Exporter for Web\n */\nvar OTLPTraceExporter = /** @class */ (function (_super) {\n    __extends(OTLPTraceExporter, _super);\n    function OTLPTraceExporter(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, config) || this;\n        _this._headers = Object.assign(_this._headers, _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.baggageUtils.parseKeyPairsIntoRecord((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.getEnv)().OTEL_EXPORTER_OTLP_TRACES_HEADERS));\n        return _this;\n    }\n    OTLPTraceExporter.prototype.convert = function (spans) {\n        return (0,_transform__WEBPACK_IMPORTED_MODULE_1__.toOTLPExportTraceServiceRequest)(spans, this, true);\n    };\n    OTLPTraceExporter.prototype.getDefaultUrl = function (config) {\n        return typeof config.url === 'string'\n            ? config.url\n            : (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.getEnv)().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0\n                ? (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.getEnv)().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT\n                : (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.getEnv)().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n                    ? (0,_util__WEBPACK_IMPORTED_MODULE_3__.appendResourcePathToUrlIfNotPresent)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.getEnv)().OTEL_EXPORTER_OTLP_ENDPOINT, DEFAULT_COLLECTOR_RESOURCE_PATH)\n                    : DEFAULT_COLLECTOR_URL;\n    };\n    return OTLPTraceExporter;\n}(_OTLPExporterBrowserBase__WEBPACK_IMPORTED_MODULE_0__.OTLPExporterBrowserBase));\n\n//# sourceMappingURL=OTLPTraceExporter.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPTraceExporter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OTLPTraceExporter\": () => (/* reexport safe */ _OTLPTraceExporter__WEBPACK_IMPORTED_MODULE_0__.OTLPTraceExporter),\n/* harmony export */   \"OTLPExporterBrowserBase\": () => (/* reexport safe */ _OTLPExporterBrowserBase__WEBPACK_IMPORTED_MODULE_1__.OTLPExporterBrowserBase)\n/* harmony export */ });\n/* harmony import */ var _OTLPTraceExporter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OTLPTraceExporter */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPTraceExporter.js\");\n/* harmony import */ var _OTLPExporterBrowserBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OTLPExporterBrowserBase */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/OTLPExporterBrowserBase.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/util.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/util.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sendWithBeacon\": () => (/* binding */ sendWithBeacon),\n/* harmony export */   \"sendWithXhr\": () => (/* binding */ sendWithXhr)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/types.js\");\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Send metrics/spans using browser navigator.sendBeacon\n * @param body\n * @param onSuccess\n * @param onError\n */\nfunction sendWithBeacon(body, url, blobPropertyBag, onSuccess, onError) {\n    if (navigator.sendBeacon(url, new Blob([body], blobPropertyBag))) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug('sendBeacon - can send', body);\n        onSuccess();\n    }\n    else {\n        var error = new _types__WEBPACK_IMPORTED_MODULE_1__.OTLPExporterError(\"sendBeacon - cannot send \" + body);\n        onError(error);\n    }\n}\n/**\n * function to send metrics/spans using browser XMLHttpRequest\n *     used when navigator.sendBeacon is not available\n * @param body\n * @param onSuccess\n * @param onError\n */\nfunction sendWithXhr(body, url, headers, onSuccess, onError) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n    var defaultHeaders = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n    };\n    Object.entries(__assign(__assign({}, defaultHeaders), headers)).forEach(function (_a) {\n        var k = _a[0], v = _a[1];\n        xhr.setRequestHeader(k, v);\n    });\n    xhr.send(body);\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            if (xhr.status >= 200 && xhr.status <= 299) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug('xhr success', body);\n                onSuccess();\n            }\n            else {\n                var error = new _types__WEBPACK_IMPORTED_MODULE_1__.OTLPExporterError(\"Failed to export with XHR (status: \" + xhr.status + \")\", xhr.status);\n                onError(error);\n            }\n        }\n    };\n}\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/browser/util.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/transform.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/transform.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toCollectorAttributes\": () => (/* binding */ toCollectorAttributes),\n/* harmony export */   \"toCollectorArrayValue\": () => (/* binding */ toCollectorArrayValue),\n/* harmony export */   \"toCollectorKeyValueList\": () => (/* binding */ toCollectorKeyValueList),\n/* harmony export */   \"toCollectorAttributeKeyValue\": () => (/* binding */ toCollectorAttributeKeyValue),\n/* harmony export */   \"toCollectorAnyValue\": () => (/* binding */ toCollectorAnyValue),\n/* harmony export */   \"toCollectorEvents\": () => (/* binding */ toCollectorEvents),\n/* harmony export */   \"toCollectorSpan\": () => (/* binding */ toCollectorSpan),\n/* harmony export */   \"toCollectorStatus\": () => (/* binding */ toCollectorStatus),\n/* harmony export */   \"toCollectorResource\": () => (/* binding */ toCollectorResource),\n/* harmony export */   \"toCollectorKind\": () => (/* binding */ toCollectorKind),\n/* harmony export */   \"toCollectorTraceState\": () => (/* binding */ toCollectorTraceState),\n/* harmony export */   \"toOTLPExportTraceServiceRequest\": () => (/* binding */ toOTLPExportTraceServiceRequest),\n/* harmony export */   \"groupSpansByResourceAndLibrary\": () => (/* binding */ groupSpansByResourceAndLibrary)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/types.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar MAX_INTEGER_VALUE = 2147483647;\nvar MIN_INTEGER_VALUE = -2147483648;\n/**\n * Converts attributes to KeyValue array\n * @param attributes\n */\nfunction toCollectorAttributes(attributes) {\n    return Object.keys(attributes).map(function (key) {\n        return toCollectorAttributeKeyValue(key, attributes[key]);\n    });\n}\n/**\n * Converts array of unknown value to ArrayValue\n * @param values\n */\nfunction toCollectorArrayValue(values) {\n    return {\n        values: values.map(function (value) { return toCollectorAnyValue(value); }),\n    };\n}\n/**\n * Converts attributes to KeyValueList\n * @param attributes\n */\nfunction toCollectorKeyValueList(attributes) {\n    return {\n        values: toCollectorAttributes(attributes),\n    };\n}\n/**\n * Converts key and unknown value to KeyValue\n * @param value event value\n */\nfunction toCollectorAttributeKeyValue(key, value) {\n    var anyValue = toCollectorAnyValue(value);\n    return {\n        key: key,\n        value: anyValue,\n    };\n}\n/**\n * Converts unknown value to AnyValue\n * @param value\n */\nfunction toCollectorAnyValue(value) {\n    var anyValue = {};\n    if (typeof value === 'string') {\n        anyValue.stringValue = value;\n    }\n    else if (typeof value === 'boolean') {\n        anyValue.boolValue = value;\n    }\n    else if (typeof value === 'number' &&\n        value <= MAX_INTEGER_VALUE &&\n        value >= MIN_INTEGER_VALUE &&\n        Number.isInteger(value)) {\n        anyValue.intValue = value;\n    }\n    else if (typeof value === 'number') {\n        anyValue.doubleValue = value;\n    }\n    else if (Array.isArray(value)) {\n        anyValue.arrayValue = toCollectorArrayValue(value);\n    }\n    else if (value) {\n        anyValue.kvlistValue = toCollectorKeyValueList(value);\n    }\n    return anyValue;\n}\n/**\n *\n * Converts events\n * @param events array of events\n */\nfunction toCollectorEvents(timedEvents) {\n    return timedEvents.map(function (timedEvent) {\n        var timeUnixNano = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToNanoseconds(timedEvent.time);\n        var name = timedEvent.name;\n        var attributes = toCollectorAttributes(timedEvent.attributes || {});\n        var droppedAttributesCount = 0;\n        var protoEvent = {\n            timeUnixNano: timeUnixNano,\n            name: name,\n            attributes: attributes,\n            droppedAttributesCount: droppedAttributesCount,\n        };\n        return protoEvent;\n    });\n}\n/**\n * Converts links\n * @param span\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nfunction toCollectorLinks(span, useHex) {\n    return span.links.map(function (link) {\n        var protoLink = {\n            traceId: useHex\n                ? link.context.traceId\n                : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hexToBase64(link.context.traceId),\n            spanId: useHex\n                ? link.context.spanId\n                : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hexToBase64(link.context.spanId),\n            attributes: toCollectorAttributes(link.attributes || {}),\n            droppedAttributesCount: 0,\n        };\n        return protoLink;\n    });\n}\n/**\n * Converts span\n * @param span\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nfunction toCollectorSpan(span, useHex) {\n    return {\n        traceId: useHex\n            ? span.spanContext().traceId\n            : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hexToBase64(span.spanContext().traceId),\n        spanId: useHex\n            ? span.spanContext().spanId\n            : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hexToBase64(span.spanContext().spanId),\n        parentSpanId: span.parentSpanId\n            ? useHex\n                ? span.parentSpanId\n                : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hexToBase64(span.parentSpanId)\n            : undefined,\n        traceState: toCollectorTraceState(span.spanContext().traceState),\n        name: span.name,\n        kind: toCollectorKind(span.kind),\n        startTimeUnixNano: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToNanoseconds(span.startTime),\n        endTimeUnixNano: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToNanoseconds(span.endTime),\n        attributes: toCollectorAttributes(span.attributes),\n        droppedAttributesCount: 0,\n        events: toCollectorEvents(span.events),\n        droppedEventsCount: 0,\n        status: toCollectorStatus(span.status),\n        links: toCollectorLinks(span, useHex),\n        droppedLinksCount: 0,\n    };\n}\n/**\n * Converts status\n * @param status\n */\nfunction toCollectorStatus(status) {\n    var spanStatus = {\n        code: status.code,\n    };\n    if (typeof status.message !== 'undefined') {\n        spanStatus.message = status.message;\n    }\n    return spanStatus;\n}\n/**\n * Converts resource\n * @param resource\n * @param additionalAttributes\n */\nfunction toCollectorResource(resource, additionalAttributes) {\n    if (additionalAttributes === void 0) { additionalAttributes = {}; }\n    var attr = Object.assign({}, additionalAttributes, resource ? resource.attributes : {});\n    var resourceProto = {\n        attributes: toCollectorAttributes(attr),\n        droppedAttributesCount: 0,\n    };\n    return resourceProto;\n}\n/**\n * Converts span kind\n * @param kind\n */\nfunction toCollectorKind(kind) {\n    var collectorKind = _types__WEBPACK_IMPORTED_MODULE_1__.OTLP_SPAN_KIND_MAPPING[kind];\n    return typeof collectorKind === 'number'\n        ? collectorKind\n        : _types__WEBPACK_IMPORTED_MODULE_1__.opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_UNSPECIFIED;\n}\n/**\n * Converts traceState\n * @param traceState\n */\nfunction toCollectorTraceState(traceState) {\n    if (!traceState)\n        return undefined;\n    return traceState.serialize();\n}\n/**\n * Prepares trace service request to be sent to collector\n * @param spans spans\n * @param collectorExporterBase\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nfunction toOTLPExportTraceServiceRequest(spans, collectorTraceExporterBase, useHex) {\n    var groupedSpans = groupSpansByResourceAndLibrary(spans);\n    var additionalAttributes = Object.assign({}, collectorTraceExporterBase.attributes);\n    return {\n        resourceSpans: toCollectorResourceSpans(groupedSpans, additionalAttributes, useHex),\n    };\n}\n/**\n * Takes an array of spans and groups them by resource and instrumentation\n * library\n * @param spans spans\n */\nfunction groupSpansByResourceAndLibrary(spans) {\n    return spans.reduce(function (spanMap, span) {\n        //group by resource\n        var resourceSpans = spanMap.get(span.resource);\n        if (!resourceSpans) {\n            resourceSpans = new Map();\n            spanMap.set(span.resource, resourceSpans);\n        }\n        //group by instrumentation library\n        var libSpans = resourceSpans.get(span.instrumentationLibrary);\n        if (!libSpans) {\n            libSpans = new Array();\n            resourceSpans.set(span.instrumentationLibrary, libSpans);\n        }\n        libSpans.push(span);\n        return spanMap;\n    }, new Map());\n}\n/**\n * Convert to InstrumentationLibrarySpans\n * @param instrumentationLibrary\n * @param spans\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nfunction toCollectorInstrumentationLibrarySpans(instrumentationLibrary, spans, useHex) {\n    return {\n        spans: spans.map(function (span) { return toCollectorSpan(span, useHex); }),\n        instrumentationLibrary: instrumentationLibrary,\n    };\n}\n/**\n * Returns a list of resource spans which will be exported to the collector\n * @param groupedSpans\n * @param baseAttributes\n * @param useHex - if ids should be kept as hex without converting to base64\n */\nfunction toCollectorResourceSpans(groupedSpans, baseAttributes, useHex) {\n    return Array.from(groupedSpans, function (_a) {\n        var resource = _a[0], libSpans = _a[1];\n        return {\n            resource: toCollectorResource(resource, baseAttributes),\n            instrumentationLibrarySpans: Array.from(libSpans, function (_a) {\n                var instrumentationLibrary = _a[0], spans = _a[1];\n                return toCollectorInstrumentationLibrarySpans(instrumentationLibrary, spans, useHex);\n            }),\n        };\n    });\n}\n//# sourceMappingURL=transform.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/transform.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/types.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/types.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"opentelemetryProto\": () => (/* binding */ opentelemetryProto),\n/* harmony export */   \"OTLPExporterError\": () => (/* binding */ OTLPExporterError),\n/* harmony export */   \"OTLP_SPAN_KIND_MAPPING\": () => (/* binding */ OTLP_SPAN_KIND_MAPPING)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar _a;\n\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nvar opentelemetryProto;\n(function (opentelemetryProto) {\n    var metrics;\n    (function (metrics) {\n        var v1;\n        (function (v1) {\n            var AggregationTemporality;\n            (function (AggregationTemporality) {\n                // UNSPECIFIED is the default AggregationTemporality, it MUST not be used.\n                AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_UNSPECIFIED\"] = 0] = \"AGGREGATION_TEMPORALITY_UNSPECIFIED\";\n                // DELTA is an AggregationTemporality for a metric aggregator which reports\n                // changes since last report time. Successive metrics contain aggregation of\n                // values from continuous and non-overlapping intervals.\n                //\n                // The values for a DELTA metric are based only on the time interval\n                // associated with one measurement cycle. There is no dependency on\n                // previous measurements like is the case for CUMULATIVE metrics.\n                //\n                // For example, consider a system measuring the number of requests that\n                // it receives and reports the sum of these requests every second as a\n                // DELTA metric:\n                //\n                //   1. The system starts receiving at time=t_0.\n                //   2. A request is received, the system measures 1 request.\n                //   3. A request is received, the system measures 1 request.\n                //   4. A request is received, the system measures 1 request.\n                //   5. The 1 second collection cycle ends. A metric is exported for the\n                //      number of requests received over the interval of time t_0 to\n                //      t_0+1 with a value of 3.\n                //   6. A request is received, the system measures 1 request.\n                //   7. A request is received, the system measures 1 request.\n                //   8. The 1 second collection cycle ends. A metric is exported for the\n                //      number of requests received over the interval of time t_0+1 to\n                //      t_0+2 with a value of 2.\n                AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_DELTA\"] = 1] = \"AGGREGATION_TEMPORALITY_DELTA\";\n                // CUMULATIVE is an AggregationTemporality for a metric aggregator which\n                // reports changes since a fixed start time. This means that current values\n                // of a CUMULATIVE metric depend on all previous measurements since the\n                // start time. Because of this, the sender is required to retain this state\n                // in some form. If this state is lost or invalidated, the CUMULATIVE metric\n                // values MUST be reset and a new fixed start time following the last\n                // reported measurement time sent MUST be used.\n                //\n                // For example, consider a system measuring the number of requests that\n                // it receives and reports the sum of these requests every second as a\n                // CUMULATIVE metric:\n                //\n                //   1. The system starts receiving at time=t_0.\n                //   2. A request is received, the system measures 1 request.\n                //   3. A request is received, the system measures 1 request.\n                //   4. A request is received, the system measures 1 request.\n                //   5. The 1 second collection cycle ends. A metric is exported for the\n                //      number of requests received over the interval of time t_0 to\n                //      t_0+1 with a value of 3.\n                //   6. A request is received, the system measures 1 request.\n                //   7. A request is received, the system measures 1 request.\n                //   8. The 1 second collection cycle ends. A metric is exported for the\n                //      number of requests received over the interval of time t_0 to\n                //      t_0+2 with a value of 5.\n                //   9. The system experiences a fault and loses state.\n                //   10. The system recovers and resumes receiving at time=t_1.\n                //   11. A request is received, the system measures 1 request.\n                //   12. The 1 second collection cycle ends. A metric is exported for the\n                //      number of requests received over the interval of time t_1 to\n                //      t_0+1 with a value of 1.\n                //\n                // Note: Even though, when reporting changes since last report time, using\n                // CUMULATIVE is valid, it is not recommended. This may cause problems for\n                // systems that do not use start_time to determine when the aggregation\n                // value was reset (e.g. Prometheus).\n                AggregationTemporality[AggregationTemporality[\"AGGREGATION_TEMPORALITY_CUMULATIVE\"] = 2] = \"AGGREGATION_TEMPORALITY_CUMULATIVE\";\n            })(AggregationTemporality = v1.AggregationTemporality || (v1.AggregationTemporality = {}));\n        })(v1 = metrics.v1 || (metrics.v1 = {}));\n    })(metrics = opentelemetryProto.metrics || (opentelemetryProto.metrics = {}));\n    var trace;\n    (function (trace) {\n        var v1;\n        (function (v1) {\n            var ConstantSampler;\n            (function (ConstantSampler) {\n                var ConstantDecision;\n                (function (ConstantDecision) {\n                    ConstantDecision[ConstantDecision[\"ALWAYS_OFF\"] = 0] = \"ALWAYS_OFF\";\n                    ConstantDecision[ConstantDecision[\"ALWAYS_ON\"] = 1] = \"ALWAYS_ON\";\n                    ConstantDecision[ConstantDecision[\"ALWAYS_PARENT\"] = 2] = \"ALWAYS_PARENT\";\n                })(ConstantDecision = ConstantSampler.ConstantDecision || (ConstantSampler.ConstantDecision = {}));\n            })(ConstantSampler = v1.ConstantSampler || (v1.ConstantSampler = {}));\n            var Span;\n            (function (Span) {\n                // eslint-disable-next-line @typescript-eslint/no-shadow\n                var SpanKind;\n                (function (SpanKind) {\n                    SpanKind[SpanKind[\"SPAN_KIND_UNSPECIFIED\"] = 0] = \"SPAN_KIND_UNSPECIFIED\";\n                    SpanKind[SpanKind[\"SPAN_KIND_INTERNAL\"] = 1] = \"SPAN_KIND_INTERNAL\";\n                    SpanKind[SpanKind[\"SPAN_KIND_SERVER\"] = 2] = \"SPAN_KIND_SERVER\";\n                    SpanKind[SpanKind[\"SPAN_KIND_CLIENT\"] = 3] = \"SPAN_KIND_CLIENT\";\n                    SpanKind[SpanKind[\"SPAN_KIND_PRODUCER\"] = 4] = \"SPAN_KIND_PRODUCER\";\n                    SpanKind[SpanKind[\"SPAN_KIND_CONSUMER\"] = 5] = \"SPAN_KIND_CONSUMER\";\n                })(SpanKind = Span.SpanKind || (Span.SpanKind = {}));\n            })(Span = v1.Span || (v1.Span = {}));\n        })(v1 = trace.v1 || (trace.v1 = {}));\n    })(trace = opentelemetryProto.trace || (opentelemetryProto.trace = {}));\n    var common;\n    (function (common) {\n        var v1;\n        (function (v1) {\n            var ValueType;\n            (function (ValueType) {\n                ValueType[ValueType[\"STRING\"] = 0] = \"STRING\";\n                ValueType[ValueType[\"INT\"] = 1] = \"INT\";\n                ValueType[ValueType[\"DOUBLE\"] = 2] = \"DOUBLE\";\n                ValueType[ValueType[\"BOOL\"] = 3] = \"BOOL\";\n            })(ValueType = v1.ValueType || (v1.ValueType = {}));\n        })(v1 = common.v1 || (common.v1 = {}));\n    })(common = opentelemetryProto.common || (opentelemetryProto.common = {}));\n})(opentelemetryProto || (opentelemetryProto = {}));\n/**\n * Interface for handling error\n */\nvar OTLPExporterError = /** @class */ (function (_super) {\n    __extends(OTLPExporterError, _super);\n    function OTLPExporterError(message, code, data) {\n        var _this = _super.call(this, message) || this;\n        _this.name = 'OTLPExporterError';\n        _this.data = data;\n        _this.code = code;\n        return _this;\n    }\n    return OTLPExporterError;\n}(Error));\n\n/**\n * Mapping between api SpanKind and proto SpanKind\n */\nvar OTLP_SPAN_KIND_MAPPING = (_a = {},\n    _a[_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanKind.INTERNAL] = opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_INTERNAL,\n    _a[_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanKind.SERVER] = opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_SERVER,\n    _a[_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanKind.CLIENT] = opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_CLIENT,\n    _a[_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanKind.PRODUCER] = opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_PRODUCER,\n    _a[_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanKind.CONSUMER] = opentelemetryProto.trace.v1.Span.SpanKind.SPAN_KIND_CONSUMER,\n    _a);\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/util.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/util.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parseHeaders\": () => (/* binding */ parseHeaders),\n/* harmony export */   \"appendResourcePathToUrlIfNotPresent\": () => (/* binding */ appendResourcePathToUrlIfNotPresent)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nfunction parseHeaders(partialHeaders) {\n    if (partialHeaders === void 0) { partialHeaders = {}; }\n    var headers = {};\n    Object.entries(partialHeaders).forEach(function (_a) {\n        var key = _a[0], value = _a[1];\n        if (typeof value !== 'undefined') {\n            headers[key] = String(value);\n        }\n        else {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Header \\\"\" + key + \"\\\" has wrong value and will be ignored\");\n        }\n    });\n    return headers;\n}\nfunction appendResourcePathToUrlIfNotPresent(url, path) {\n    if (url.match(/v\\d\\/(traces|metrics)$/))\n        return url;\n    return url + path;\n}\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/util.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/AttributeNames.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/AttributeNames.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AttributeNames\": () => (/* binding */ AttributeNames)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"COMPONENT\"] = \"component\";\n    AttributeNames[\"DOCUMENT_LOAD\"] = \"documentLoad\";\n    AttributeNames[\"DOCUMENT_FETCH\"] = \"documentFetch\";\n    AttributeNames[\"RESOURCE_FETCH\"] = \"resourceFetch\";\n})(AttributeNames || (AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/AttributeNames.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/EventNames.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/EventNames.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventNames\": () => (/* binding */ EventNames)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar EventNames;\n(function (EventNames) {\n    EventNames[\"FIRST_PAINT\"] = \"firstPaint\";\n    EventNames[\"FIRST_CONTENTFUL_PAINT\"] = \"firstContentfulPaint\";\n})(EventNames || (EventNames = {}));\n//# sourceMappingURL=EventNames.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/EventNames.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DocumentLoadInstrumentation\": () => (/* reexport safe */ _instrumentation__WEBPACK_IMPORTED_MODULE_0__.DocumentLoadInstrumentation)\n/* harmony export */ });\n/* harmony import */ var _instrumentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instrumentation */ \"./node_modules/@opentelemetry/instrumentation-document-load/build/esm/instrumentation.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation-document-load/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/instrumentation.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/instrumentation.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DocumentLoadInstrumentation\": () => (/* binding */ DocumentLoadInstrumentation)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/instrumentation */ \"./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n/* harmony import */ var _enums_AttributeNames__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./enums/AttributeNames */ \"./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/AttributeNames.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version */ \"./node_modules/@opentelemetry/instrumentation-document-load/build/esm/version.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ \"./node_modules/@opentelemetry/instrumentation-document-load/build/esm/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\n\n/**\n * This class represents a document load plugin\n */\nvar DocumentLoadInstrumentation = /** @class */ (function (_super) {\n    __extends(DocumentLoadInstrumentation, _super);\n    /**\n     *\n     * @param config\n     */\n    function DocumentLoadInstrumentation(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, '@opentelemetry/instrumentation-document-load', _version__WEBPACK_IMPORTED_MODULE_5__.VERSION, config) || this;\n        _this.component = 'document-load';\n        _this.version = '1';\n        _this.moduleName = _this.component;\n        return _this;\n    }\n    DocumentLoadInstrumentation.prototype.init = function () { };\n    /**\n     * callback to be executed when page is loaded\n     */\n    DocumentLoadInstrumentation.prototype._onDocumentLoaded = function () {\n        var _this = this;\n        // Timeout is needed as load event doesn't have yet the performance metrics for loadEnd.\n        // Support for event \"loadend\" is very limited and cannot be used\n        window.setTimeout(function () {\n            _this._collectPerformance();\n        });\n    };\n    /**\n     * Adds spans for all resources\n     * @param rootSpan\n     */\n    DocumentLoadInstrumentation.prototype._addResourcesSpans = function (rootSpan) {\n        var _this = this;\n        var _a, _b;\n        var resources = (_b = (_a = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'resource');\n        if (resources) {\n            resources.forEach(function (resource) {\n                _this._initResourceSpan(resource, rootSpan);\n            });\n        }\n    };\n    /**\n     * Collects information about performance and creates appropriate spans\n     */\n    DocumentLoadInstrumentation.prototype._collectPerformance = function () {\n        var _this = this;\n        var metaElement = Array.from(document.getElementsByTagName('meta')).find(function (e) { return e.getAttribute('name') === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TRACE_PARENT_HEADER; });\n        var entries = (0,_utils__WEBPACK_IMPORTED_MODULE_7__.getPerformanceNavigationEntries)();\n        var traceparent = (metaElement && metaElement.content) || '';\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context[\"with\"](_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.extract(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT, { traceparent: traceparent }), function () {\n            var rootSpan = _this._startSpan(_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_4__.AttributeNames.DOCUMENT_LOAD, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.FETCH_START, entries);\n            if (!rootSpan) {\n                return;\n            }\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context[\"with\"](_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active(), rootSpan), function () {\n                var fetchSpan = _this._startSpan(_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_4__.AttributeNames.DOCUMENT_FETCH, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.FETCH_START, entries);\n                if (fetchSpan) {\n                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context[\"with\"](_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active(), fetchSpan), function () {\n                        (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.addSpanNetworkEvents)(fetchSpan, entries);\n                        _this._endSpan(fetchSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.RESPONSE_END, entries);\n                    });\n                }\n            });\n            rootSpan.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticAttributes.HTTP_URL, location.href);\n            rootSpan.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticAttributes.HTTP_USER_AGENT, navigator.userAgent);\n            _this._addResourcesSpans(rootSpan);\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.FETCH_START, entries);\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.UNLOAD_EVENT_START, entries);\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.UNLOAD_EVENT_END, entries);\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.DOM_INTERACTIVE, entries);\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.DOM_CONTENT_LOADED_EVENT_START, entries);\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.DOM_CONTENT_LOADED_EVENT_END, entries);\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.DOM_COMPLETE, entries);\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.LOAD_EVENT_START, entries);\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.addSpanNetworkEvent)(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.LOAD_EVENT_END, entries);\n            (0,_utils__WEBPACK_IMPORTED_MODULE_7__.addSpanPerformancePaintEvents)(rootSpan);\n            _this._endSpan(rootSpan, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.LOAD_EVENT_END, entries);\n        });\n    };\n    /**\n     * Helper function for ending span\n     * @param span\n     * @param performanceName name of performance entry for time end\n     * @param entries\n     */\n    DocumentLoadInstrumentation.prototype._endSpan = function (span, performanceName, entries) {\n        // span can be undefined when entries are missing the certain performance - the span will not be created\n        if (span) {\n            if ((0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.hasKey)(entries, performanceName)) {\n                span.end(entries[performanceName]);\n            }\n            else {\n                // just end span\n                span.end();\n            }\n        }\n    };\n    /**\n     * Creates and ends a span with network information about resource added as timed events\n     * @param resource\n     * @param parentSpan\n     */\n    DocumentLoadInstrumentation.prototype._initResourceSpan = function (resource, parentSpan) {\n        var span = this._startSpan(_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_4__.AttributeNames.RESOURCE_FETCH, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.FETCH_START, resource, parentSpan);\n        if (span) {\n            span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticAttributes.HTTP_URL, resource.name);\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.addSpanNetworkEvents)(span, resource);\n            this._endSpan(span, _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames.RESPONSE_END, resource);\n        }\n    };\n    /**\n     * Helper function for starting a span\n     * @param spanName name of span\n     * @param performanceName name of performance entry for time start\n     * @param entries\n     * @param parentSpan\n     */\n    DocumentLoadInstrumentation.prototype._startSpan = function (spanName, performanceName, entries, parentSpan) {\n        if ((0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_2__.hasKey)(entries, performanceName) &&\n            typeof entries[performanceName] === 'number') {\n            var span = this.tracer.startSpan(spanName, {\n                startTime: entries[performanceName],\n            }, parentSpan ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active(), parentSpan) : undefined);\n            span.setAttribute(_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_4__.AttributeNames.COMPONENT, this.component);\n            return span;\n        }\n        return undefined;\n    };\n    /**\n     * executes callback {_onDocumentLoaded} when the page is loaded\n     */\n    DocumentLoadInstrumentation.prototype._waitForPageLoad = function () {\n        if (window.document.readyState === 'complete') {\n            this._onDocumentLoaded();\n        }\n        else {\n            this._onDocumentLoaded = this._onDocumentLoaded.bind(this);\n            window.addEventListener('load', this._onDocumentLoaded);\n        }\n    };\n    /**\n     * implements enable function\n     */\n    DocumentLoadInstrumentation.prototype.enable = function () {\n        // remove previously attached load to avoid adding the same event twice\n        // in case of multiple enable calling.\n        window.removeEventListener('load', this._onDocumentLoaded);\n        this._waitForPageLoad();\n    };\n    /**\n     * implements disable function\n     */\n    DocumentLoadInstrumentation.prototype.disable = function () {\n        window.removeEventListener('load', this._onDocumentLoaded);\n    };\n    return DocumentLoadInstrumentation;\n}(_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_3__.InstrumentationBase));\n\n//# sourceMappingURL=instrumentation.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation-document-load/build/esm/instrumentation.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/utils.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/utils.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getPerformanceNavigationEntries\": () => (/* binding */ getPerformanceNavigationEntries),\n/* harmony export */   \"addSpanPerformancePaintEvents\": () => (/* binding */ addSpanPerformancePaintEvents)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/index.js\");\n/* harmony import */ var _enums_EventNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./enums/EventNames */ \"./node_modules/@opentelemetry/instrumentation-document-load/build/esm/enums/EventNames.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar getPerformanceNavigationEntries = function () {\n    var _a, _b;\n    var entries = {};\n    var performanceNavigationTiming = (_b = (_a = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'navigation')[0];\n    if (performanceNavigationTiming) {\n        var keys = Object.values(_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.PerformanceTimingNames);\n        keys.forEach(function (key) {\n            if ((0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.hasKey)(performanceNavigationTiming, key)) {\n                var value = performanceNavigationTiming[key];\n                if (typeof value === 'number') {\n                    entries[key] = value;\n                }\n            }\n        });\n    }\n    else {\n        // // fallback to previous version\n        var perf = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.otperformance;\n        var performanceTiming_1 = perf.timing;\n        if (performanceTiming_1) {\n            var keys = Object.values(_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.PerformanceTimingNames);\n            keys.forEach(function (key) {\n                if ((0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.hasKey)(performanceTiming_1, key)) {\n                    var value = performanceTiming_1[key];\n                    if (typeof value === 'number') {\n                        entries[key] = value;\n                    }\n                }\n            });\n        }\n    }\n    return entries;\n};\nvar performancePaintNames = {\n    'first-paint': _enums_EventNames__WEBPACK_IMPORTED_MODULE_2__.EventNames.FIRST_PAINT,\n    'first-contentful-paint': _enums_EventNames__WEBPACK_IMPORTED_MODULE_2__.EventNames.FIRST_CONTENTFUL_PAINT,\n};\nvar addSpanPerformancePaintEvents = function (span) {\n    var _a, _b;\n    var performancePaintTiming = (_b = (_a = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'paint');\n    if (performancePaintTiming) {\n        performancePaintTiming.forEach(function (_a) {\n            var name = _a.name, startTime = _a.startTime;\n            if ((0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_1__.hasKey)(performancePaintNames, name)) {\n                span.addEvent(performancePaintNames[name], startTime);\n            }\n        });\n    }\n};\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation-document-load/build/esm/utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-document-load/build/esm/version.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-document-load/build/esm/version.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VERSION\": () => (/* binding */ VERSION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nvar VERSION = '0.27.0';\n//# sourceMappingURL=version.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation-document-load/build/esm/version.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/AttributeNames.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/AttributeNames.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AttributeNames\": () => (/* binding */ AttributeNames)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"HTTP_STATUS_TEXT\"] = \"http.status_text\";\n})(AttributeNames || (AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/AttributeNames.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/EventNames.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/EventNames.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventNames\": () => (/* binding */ EventNames)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar EventNames;\n(function (EventNames) {\n    EventNames[\"METHOD_OPEN\"] = \"open\";\n    EventNames[\"METHOD_SEND\"] = \"send\";\n    EventNames[\"EVENT_ABORT\"] = \"abort\";\n    EventNames[\"EVENT_ERROR\"] = \"error\";\n    EventNames[\"EVENT_LOAD\"] = \"loaded\";\n    EventNames[\"EVENT_TIMEOUT\"] = \"timeout\";\n})(EventNames || (EventNames = {}));\n//# sourceMappingURL=EventNames.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/EventNames.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"XMLHttpRequestInstrumentation\": () => (/* reexport safe */ _xhr__WEBPACK_IMPORTED_MODULE_0__.XMLHttpRequestInstrumentation)\n/* harmony export */ });\n/* harmony import */ var _xhr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xhr */ \"./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/xhr.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/version.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/version.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VERSION\": () => (/* binding */ VERSION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nvar VERSION = '0.27.0';\n//# sourceMappingURL=version.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/version.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/xhr.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/xhr.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"XMLHttpRequestInstrumentation\": () => (/* binding */ XMLHttpRequestInstrumentation)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/instrumentation */ \"./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/sdk-trace-web */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/index.js\");\n/* harmony import */ var _enums_EventNames__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./enums/EventNames */ \"./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/EventNames.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./version */ \"./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/version.js\");\n/* harmony import */ var _enums_AttributeNames__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./enums/AttributeNames */ \"./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/enums/AttributeNames.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\n\n// how long to wait for observer to collect information about resources\n// this is needed as event \"load\" is called before observer\n// hard to say how long it should really wait, seems like 300ms is\n// safe enough\nvar OBSERVER_WAIT_TIME_MS = 300;\n/**\n * This class represents a XMLHttpRequest plugin for auto instrumentation\n */\nvar XMLHttpRequestInstrumentation = /** @class */ (function (_super) {\n    __extends(XMLHttpRequestInstrumentation, _super);\n    function XMLHttpRequestInstrumentation(config) {\n        var _this = _super.call(this, '@opentelemetry/instrumentation-xml-http-request', _version__WEBPACK_IMPORTED_MODULE_6__.VERSION, config) || this;\n        _this.component = 'xml-http-request';\n        _this.version = _version__WEBPACK_IMPORTED_MODULE_6__.VERSION;\n        _this.moduleName = _this.component;\n        _this._tasksCount = 0;\n        _this._xhrMem = new WeakMap();\n        _this._usedResources = new WeakSet();\n        return _this;\n    }\n    XMLHttpRequestInstrumentation.prototype.init = function () { };\n    XMLHttpRequestInstrumentation.prototype._getConfig = function () {\n        return this._config;\n    };\n    /**\n     * Adds custom headers to XMLHttpRequest\n     * @param xhr\n     * @param span\n     * @private\n     */\n    XMLHttpRequestInstrumentation.prototype._addHeaders = function (xhr, spanUrl) {\n        if (!(0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.shouldPropagateTraceHeaders)(spanUrl, this._getConfig().propagateTraceHeaderCorsUrls)) {\n            var headers_1 = {};\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.inject(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active(), headers_1);\n            if (Object.keys(headers_1).length > 0) {\n                this._diag.debug('headers inject skipped due to CORS policy');\n            }\n            return;\n        }\n        var headers = {};\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.inject(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active(), headers);\n        Object.keys(headers).forEach(function (key) {\n            xhr.setRequestHeader(key, String(headers[key]));\n        });\n    };\n    /**\n     * Add cors pre flight child span\n     * @param span\n     * @param corsPreFlightRequest\n     * @private\n     */\n    XMLHttpRequestInstrumentation.prototype._addChildSpan = function (span, corsPreFlightRequest) {\n        var _this = this;\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context[\"with\"](_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active(), span), function () {\n            var childSpan = _this.tracer.startSpan('CORS Preflight', {\n                startTime: corsPreFlightRequest[_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.PerformanceTimingNames.FETCH_START],\n            });\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.addSpanNetworkEvents)(childSpan, corsPreFlightRequest);\n            childSpan.end(corsPreFlightRequest[_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.PerformanceTimingNames.RESPONSE_END]);\n        });\n    };\n    /**\n     * Add attributes when span is going to end\n     * @param span\n     * @param xhr\n     * @param spanUrl\n     * @private\n     */\n    XMLHttpRequestInstrumentation.prototype._addFinalSpanAttributes = function (span, xhrMem, spanUrl) {\n        if (typeof spanUrl === 'string') {\n            var parsedUrl = (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.parseUrl)(spanUrl);\n            if (xhrMem.status !== undefined) {\n                span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_3__.SemanticAttributes.HTTP_STATUS_CODE, xhrMem.status);\n            }\n            if (xhrMem.statusText !== undefined) {\n                span.setAttribute(_enums_AttributeNames__WEBPACK_IMPORTED_MODULE_7__.AttributeNames.HTTP_STATUS_TEXT, xhrMem.statusText);\n            }\n            span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_3__.SemanticAttributes.HTTP_HOST, parsedUrl.host);\n            span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_3__.SemanticAttributes.HTTP_SCHEME, parsedUrl.protocol.replace(':', ''));\n            // @TODO do we want to collect this or it will be collected earlier once only or\n            //    maybe when parent span is not available ?\n            span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_3__.SemanticAttributes.HTTP_USER_AGENT, navigator.userAgent);\n        }\n    };\n    XMLHttpRequestInstrumentation.prototype._applyAttributesAfterXHR = function (span, xhr) {\n        var _this = this;\n        var applyCustomAttributesOnSpan = this._getConfig()\n            .applyCustomAttributesOnSpan;\n        if (typeof applyCustomAttributesOnSpan === 'function') {\n            (0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_1__.safeExecuteInTheMiddle)(function () { return applyCustomAttributesOnSpan(span, xhr); }, function (error) {\n                if (!error) {\n                    return;\n                }\n                _this._diag.error('applyCustomAttributesOnSpan', error);\n            }, true);\n        }\n    };\n    /**\n     * will collect information about all resources created\n     * between \"send\" and \"end\" with additional waiting for main resource\n     * @param xhr\n     * @param spanUrl\n     * @private\n     */\n    XMLHttpRequestInstrumentation.prototype._addResourceObserver = function (xhr, spanUrl) {\n        var xhrMem = this._xhrMem.get(xhr);\n        if (!xhrMem ||\n            typeof window.PerformanceObserver === 'undefined' ||\n            typeof window.PerformanceResourceTiming === 'undefined') {\n            return;\n        }\n        xhrMem.createdResources = {\n            observer: new PerformanceObserver(function (list) {\n                var entries = list.getEntries();\n                var urlNormalizingAnchor = (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.getUrlNormalizingAnchor)();\n                urlNormalizingAnchor.href = spanUrl;\n                entries.forEach(function (entry) {\n                    if (entry.initiatorType === 'xmlhttprequest' &&\n                        entry.name === urlNormalizingAnchor.href) {\n                        if (xhrMem.createdResources) {\n                            xhrMem.createdResources.entries.push(entry);\n                        }\n                    }\n                });\n            }),\n            entries: [],\n        };\n        xhrMem.createdResources.observer.observe({\n            entryTypes: ['resource'],\n        });\n    };\n    /**\n     * Clears the resource timings and all resources assigned with spans\n     *     when {@link XMLHttpRequestInstrumentationConfig.clearTimingResources} is\n     *     set to true (default false)\n     * @private\n     */\n    XMLHttpRequestInstrumentation.prototype._clearResources = function () {\n        if (this._tasksCount === 0 && this._getConfig().clearTimingResources) {\n            _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.otperformance.clearResourceTimings();\n            this._xhrMem = new WeakMap();\n            this._usedResources = new WeakSet();\n        }\n    };\n    /**\n     * Finds appropriate resource and add network events to the span\n     * @param span\n     */\n    XMLHttpRequestInstrumentation.prototype._findResourceAndAddNetworkEvents = function (xhrMem, span, spanUrl, startTime, endTime) {\n        if (!spanUrl || !startTime || !endTime || !xhrMem.createdResources) {\n            return;\n        }\n        var resources = xhrMem.createdResources.entries;\n        if (!resources || !resources.length) {\n            // fallback - either Observer is not available or it took longer\n            // then OBSERVER_WAIT_TIME_MS and observer didn't collect enough\n            // information\n            // ts thinks this is the perf_hooks module, but it is the browser performance api\n            resources = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.otperformance.getEntriesByType('resource');\n        }\n        var resource = (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.getResource)(spanUrl, startTime, endTime, resources, this._usedResources);\n        if (resource.mainRequest) {\n            var mainRequest = resource.mainRequest;\n            this._markResourceAsUsed(mainRequest);\n            var corsPreFlightRequest = resource.corsPreFlightRequest;\n            if (corsPreFlightRequest) {\n                this._addChildSpan(span, corsPreFlightRequest);\n                this._markResourceAsUsed(corsPreFlightRequest);\n            }\n            (0,_opentelemetry_sdk_trace_web__WEBPACK_IMPORTED_MODULE_4__.addSpanNetworkEvents)(span, mainRequest);\n        }\n    };\n    /**\n     * Removes the previous information about span.\n     * This might happened when the same xhr is used again.\n     * @param xhr\n     * @private\n     */\n    XMLHttpRequestInstrumentation.prototype._cleanPreviousSpanInformation = function (xhr) {\n        var xhrMem = this._xhrMem.get(xhr);\n        if (xhrMem) {\n            var callbackToRemoveEvents = xhrMem.callbackToRemoveEvents;\n            if (callbackToRemoveEvents) {\n                callbackToRemoveEvents();\n            }\n            this._xhrMem.delete(xhr);\n        }\n    };\n    /**\n     * Creates a new span when method \"open\" is called\n     * @param xhr\n     * @param url\n     * @param method\n     * @private\n     */\n    XMLHttpRequestInstrumentation.prototype._createSpan = function (xhr, url, method) {\n        var _a;\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isUrlIgnored)(url, this._getConfig().ignoreUrls)) {\n            this._diag.debug('ignoring span as url matches ignored url');\n            return;\n        }\n        var spanName = \"HTTP \" + method.toUpperCase();\n        var currentSpan = this.tracer.startSpan(spanName, {\n            kind: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanKind.CLIENT,\n            attributes: (_a = {},\n                _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_3__.SemanticAttributes.HTTP_METHOD] = method,\n                _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_3__.SemanticAttributes.HTTP_URL] = url,\n                _a),\n        });\n        currentSpan.addEvent(_enums_EventNames__WEBPACK_IMPORTED_MODULE_5__.EventNames.METHOD_OPEN);\n        this._cleanPreviousSpanInformation(xhr);\n        this._xhrMem.set(xhr, {\n            span: currentSpan,\n            spanUrl: url,\n        });\n        return currentSpan;\n    };\n    /**\n     * Marks certain [resource]{@link PerformanceResourceTiming} when information\n     * from this is used to add events to span.\n     * This is done to avoid reusing the same resource again for next span\n     * @param resource\n     * @private\n     */\n    XMLHttpRequestInstrumentation.prototype._markResourceAsUsed = function (resource) {\n        this._usedResources.add(resource);\n    };\n    /**\n     * Patches the method open\n     * @private\n     */\n    XMLHttpRequestInstrumentation.prototype._patchOpen = function () {\n        var _this = this;\n        return function (original) {\n            var plugin = _this;\n            return function patchOpen() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var method = args[0];\n                var url = args[1];\n                plugin._createSpan(this, url, method);\n                return original.apply(this, args);\n            };\n        };\n    };\n    /**\n     * Patches the method send\n     * @private\n     */\n    XMLHttpRequestInstrumentation.prototype._patchSend = function () {\n        var plugin = this;\n        function endSpanTimeout(eventName, xhrMem, endTime) {\n            var callbackToRemoveEvents = xhrMem.callbackToRemoveEvents;\n            if (typeof callbackToRemoveEvents === 'function') {\n                callbackToRemoveEvents();\n            }\n            var span = xhrMem.span, spanUrl = xhrMem.spanUrl, sendStartTime = xhrMem.sendStartTime;\n            if (span) {\n                plugin._findResourceAndAddNetworkEvents(xhrMem, span, spanUrl, sendStartTime, endTime);\n                span.addEvent(eventName, endTime);\n                plugin._addFinalSpanAttributes(span, xhrMem, spanUrl);\n                span.end(endTime);\n                plugin._tasksCount--;\n            }\n            plugin._clearResources();\n        }\n        function endSpan(eventName, xhr) {\n            var xhrMem = plugin._xhrMem.get(xhr);\n            if (!xhrMem) {\n                return;\n            }\n            xhrMem.status = xhr.status;\n            xhrMem.statusText = xhr.statusText;\n            plugin._xhrMem.delete(xhr);\n            if (xhrMem.span) {\n                plugin._applyAttributesAfterXHR(xhrMem.span, xhr);\n            }\n            var endTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTime)();\n            // the timeout is needed as observer doesn't have yet information\n            // when event \"load\" is called. Also the time may differ depends on\n            // browser and speed of computer\n            setTimeout(function () {\n                endSpanTimeout(eventName, xhrMem, endTime);\n            }, OBSERVER_WAIT_TIME_MS);\n        }\n        function onError() {\n            endSpan(_enums_EventNames__WEBPACK_IMPORTED_MODULE_5__.EventNames.EVENT_ERROR, this);\n        }\n        function onAbort() {\n            endSpan(_enums_EventNames__WEBPACK_IMPORTED_MODULE_5__.EventNames.EVENT_ABORT, this);\n        }\n        function onTimeout() {\n            endSpan(_enums_EventNames__WEBPACK_IMPORTED_MODULE_5__.EventNames.EVENT_TIMEOUT, this);\n        }\n        function onLoad() {\n            if (this.status < 299) {\n                endSpan(_enums_EventNames__WEBPACK_IMPORTED_MODULE_5__.EventNames.EVENT_LOAD, this);\n            }\n            else {\n                endSpan(_enums_EventNames__WEBPACK_IMPORTED_MODULE_5__.EventNames.EVENT_ERROR, this);\n            }\n        }\n        function unregister(xhr) {\n            xhr.removeEventListener('abort', onAbort);\n            xhr.removeEventListener('error', onError);\n            xhr.removeEventListener('load', onLoad);\n            xhr.removeEventListener('timeout', onTimeout);\n            var xhrMem = plugin._xhrMem.get(xhr);\n            if (xhrMem) {\n                xhrMem.callbackToRemoveEvents = undefined;\n            }\n        }\n        return function (original) {\n            return function patchSend() {\n                var _this = this;\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var xhrMem = plugin._xhrMem.get(this);\n                if (!xhrMem) {\n                    return original.apply(this, args);\n                }\n                var currentSpan = xhrMem.span;\n                var spanUrl = xhrMem.spanUrl;\n                if (currentSpan && spanUrl) {\n                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context[\"with\"](_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active(), currentSpan), function () {\n                        plugin._tasksCount++;\n                        xhrMem.sendStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTime)();\n                        currentSpan.addEvent(_enums_EventNames__WEBPACK_IMPORTED_MODULE_5__.EventNames.METHOD_SEND);\n                        _this.addEventListener('abort', onAbort);\n                        _this.addEventListener('error', onError);\n                        _this.addEventListener('load', onLoad);\n                        _this.addEventListener('timeout', onTimeout);\n                        xhrMem.callbackToRemoveEvents = function () {\n                            unregister(_this);\n                            if (xhrMem.createdResources) {\n                                xhrMem.createdResources.observer.disconnect();\n                            }\n                        };\n                        plugin._addHeaders(_this, spanUrl);\n                        plugin._addResourceObserver(_this, spanUrl);\n                    });\n                }\n                return original.apply(this, args);\n            };\n        };\n    };\n    /**\n     * implements enable function\n     */\n    XMLHttpRequestInstrumentation.prototype.enable = function () {\n        this._diag.debug('applying patch to', this.moduleName, this.version);\n        if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_1__.isWrapped)(XMLHttpRequest.prototype.open)) {\n            this._unwrap(XMLHttpRequest.prototype, 'open');\n            this._diag.debug('removing previous patch from method open');\n        }\n        if ((0,_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_1__.isWrapped)(XMLHttpRequest.prototype.send)) {\n            this._unwrap(XMLHttpRequest.prototype, 'send');\n            this._diag.debug('removing previous patch from method send');\n        }\n        this._wrap(XMLHttpRequest.prototype, 'open', this._patchOpen());\n        this._wrap(XMLHttpRequest.prototype, 'send', this._patchSend());\n    };\n    /**\n     * implements disable function\n     */\n    XMLHttpRequestInstrumentation.prototype.disable = function () {\n        this._diag.debug('removing patch from', this.moduleName, this.version);\n        this._unwrap(XMLHttpRequest.prototype, 'open');\n        this._unwrap(XMLHttpRequest.prototype, 'send');\n        this._tasksCount = 0;\n        this._xhrMem = new WeakMap();\n        this._usedResources = new WeakSet();\n    };\n    return XMLHttpRequestInstrumentation;\n}(_opentelemetry_instrumentation__WEBPACK_IMPORTED_MODULE_1__.InstrumentationBase));\n\n//# sourceMappingURL=xhr.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation-xml-http-request/build/esm/xhr.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"registerInstrumentations\": () => (/* binding */ registerInstrumentations)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_api_metrics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api-metrics */ \"./node_modules/@opentelemetry/api-metrics/build/esm/index.js\");\n/* harmony import */ var _autoLoaderUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./autoLoaderUtils */ \"./node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nfunction registerInstrumentations(options) {\n    var instrumentations = (0,_autoLoaderUtils__WEBPACK_IMPORTED_MODULE_2__.parseInstrumentationOptions)(options.instrumentations).instrumentations;\n    var tracerProvider = options.tracerProvider || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getTracerProvider();\n    var meterProvider = options.meterProvider || _opentelemetry_api_metrics__WEBPACK_IMPORTED_MODULE_1__.metrics.getMeterProvider();\n    (0,_autoLoaderUtils__WEBPACK_IMPORTED_MODULE_2__.enableInstrumentations)(instrumentations, tracerProvider, meterProvider);\n    return function () {\n        (0,_autoLoaderUtils__WEBPACK_IMPORTED_MODULE_2__.disableInstrumentations)(instrumentations);\n    };\n}\n//# sourceMappingURL=autoLoader.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parseInstrumentationOptions\": () => (/* binding */ parseInstrumentationOptions),\n/* harmony export */   \"enableInstrumentations\": () => (/* binding */ enableInstrumentations),\n/* harmony export */   \"disableInstrumentations\": () => (/* binding */ disableInstrumentations)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Parses the options and returns instrumentations, node plugins and\n *   web plugins\n * @param options\n */\nfunction parseInstrumentationOptions(options) {\n    if (options === void 0) { options = []; }\n    var instrumentations = [];\n    for (var i = 0, j = options.length; i < j; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var option = options[i];\n        if (Array.isArray(option)) {\n            var results = parseInstrumentationOptions(option);\n            instrumentations = instrumentations.concat(results.instrumentations);\n        }\n        else if (typeof option === 'function') {\n            instrumentations.push(new option());\n        }\n        else if (option.instrumentationName) {\n            instrumentations.push(option);\n        }\n    }\n    return { instrumentations: instrumentations };\n}\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nfunction enableInstrumentations(instrumentations, tracerProvider, meterProvider) {\n    for (var i = 0, j = instrumentations.length; i < j; i++) {\n        var instrumentation = instrumentations[i];\n        if (tracerProvider) {\n            instrumentation.setTracerProvider(tracerProvider);\n        }\n        if (meterProvider) {\n            instrumentation.setMeterProvider(meterProvider);\n        }\n        // instrumentations have been already enabled during creation\n        // so enable only if user prevented that by setting enabled to false\n        // this is to prevent double enabling but when calling register all\n        // instrumentations should be now enabled\n        if (!instrumentation.getConfig().enabled) {\n            instrumentation.enable();\n        }\n    }\n}\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nfunction disableInstrumentations(instrumentations) {\n    instrumentations.forEach(function (instrumentation) { return instrumentation.disable(); });\n}\n//# sourceMappingURL=autoLoaderUtils.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation/build/esm/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"registerInstrumentations\": () => (/* reexport safe */ _autoLoader__WEBPACK_IMPORTED_MODULE_0__.registerInstrumentations),\n/* harmony export */   \"InstrumentationBase\": () => (/* reexport safe */ _platform_index__WEBPACK_IMPORTED_MODULE_1__.InstrumentationBase),\n/* harmony export */   \"isWrapped\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.isWrapped),\n/* harmony export */   \"safeExecuteInTheMiddle\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.safeExecuteInTheMiddle),\n/* harmony export */   \"safeExecuteInTheMiddleAsync\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.safeExecuteInTheMiddleAsync)\n/* harmony export */ });\n/* harmony import */ var _autoLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./autoLoader */ \"./node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js\");\n/* harmony import */ var _platform_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform/index */ \"./node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/index.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"./node_modules/@opentelemetry/instrumentation/build/esm/types.js\");\n/* harmony import */ var _types_internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types_internal */ \"./node_modules/@opentelemetry/instrumentation/build/esm/types_internal.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"./node_modules/@opentelemetry/instrumentation/build/esm/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InstrumentationAbstract\": () => (/* binding */ InstrumentationAbstract)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_api_metrics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api-metrics */ \"./node_modules/@opentelemetry/api-metrics/build/esm/index.js\");\n/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shimmer */ \"./node_modules/shimmer/index.js\");\n/* harmony import */ var shimmer__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(shimmer__WEBPACK_IMPORTED_MODULE_2__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\n\n\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nvar InstrumentationAbstract = /** @class */ (function () {\n    function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {\n        if (config === void 0) { config = {}; }\n        this.instrumentationName = instrumentationName;\n        this.instrumentationVersion = instrumentationVersion;\n        /* Api to wrap instrumented method */\n        this._wrap = shimmer__WEBPACK_IMPORTED_MODULE_2__.wrap;\n        /* Api to unwrap instrumented methods */\n        this._unwrap = shimmer__WEBPACK_IMPORTED_MODULE_2__.unwrap;\n        /* Api to mass wrap instrumented method */\n        this._massWrap = shimmer__WEBPACK_IMPORTED_MODULE_2__.massWrap;\n        /* Api to mass unwrap instrumented methods */\n        this._massUnwrap = shimmer__WEBPACK_IMPORTED_MODULE_2__.massUnwrap;\n        this._config = __assign({ enabled: true }, config);\n        this._diag = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.createComponentLogger({\n            namespace: instrumentationName,\n        });\n        this._tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getTracer(instrumentationName, instrumentationVersion);\n        this._meter = _opentelemetry_api_metrics__WEBPACK_IMPORTED_MODULE_1__.metrics.getMeter(instrumentationName, instrumentationVersion);\n    }\n    Object.defineProperty(InstrumentationAbstract.prototype, \"meter\", {\n        /* Returns meter */\n        get: function () {\n            return this._meter;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets MeterProvider to this plugin\n     * @param meterProvider\n     */\n    InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {\n        this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);\n    };\n    /* Returns InstrumentationConfig */\n    InstrumentationAbstract.prototype.getConfig = function () {\n        return this._config;\n    };\n    /**\n     * Sets InstrumentationConfig to this plugin\n     * @param InstrumentationConfig\n     */\n    InstrumentationAbstract.prototype.setConfig = function (config) {\n        if (config === void 0) { config = {}; }\n        this._config = Object.assign({}, config);\n    };\n    /**\n     * Sets TraceProvider to this plugin\n     * @param tracerProvider\n     */\n    InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {\n        this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);\n    };\n    Object.defineProperty(InstrumentationAbstract.prototype, \"tracer\", {\n        /* Returns tracer */\n        get: function () {\n            return this._tracer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return InstrumentationAbstract;\n}());\n\n//# sourceMappingURL=instrumentation.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InstrumentationBase\": () => (/* reexport safe */ _instrumentation__WEBPACK_IMPORTED_MODULE_0__.InstrumentationBase)\n/* harmony export */ });\n/* harmony import */ var _instrumentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instrumentation */ \"./node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InstrumentationBase\": () => (/* binding */ InstrumentationBase)\n/* harmony export */ });\n/* harmony import */ var _instrumentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instrumentation */ \"./node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/**\n * Base abstract class for instrumenting web plugins\n */\nvar InstrumentationBase = /** @class */ (function (_super) {\n    __extends(InstrumentationBase, _super);\n    function InstrumentationBase(instrumentationName, instrumentationVersion, config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;\n        if (_this._config.enabled) {\n            _this.enable();\n        }\n        return _this;\n    }\n    return InstrumentationBase;\n}(_instrumentation__WEBPACK_IMPORTED_MODULE_0__.InstrumentationAbstract));\n\n//# sourceMappingURL=instrumentation.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation/build/esm/platform/browser/instrumentation.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation/build/esm/types.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/types.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation/build/esm/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation/build/esm/types_internal.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/types_internal.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=types_internal.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation/build/esm/types_internal.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/instrumentation/build/esm/utils.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/instrumentation/build/esm/utils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"safeExecuteInTheMiddle\": () => (/* binding */ safeExecuteInTheMiddle),\n/* harmony export */   \"safeExecuteInTheMiddleAsync\": () => (/* binding */ safeExecuteInTheMiddleAsync),\n/* harmony export */   \"isWrapped\": () => (/* binding */ isWrapped)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/**\n * function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nfunction safeExecuteInTheMiddle(execute, onFinish, preventThrowingError) {\n    var error;\n    var result;\n    try {\n        result = execute();\n    }\n    catch (e) {\n        error = e;\n    }\n    finally {\n        onFinish(error, result);\n        if (error && !preventThrowingError) {\n            // eslint-disable-next-line no-unsafe-finally\n            throw error;\n        }\n        // eslint-disable-next-line no-unsafe-finally\n        return result;\n    }\n}\n/**\n * Async function to execute patched function and being able to catch errors\n * @param execute - function to be executed\n * @param onFinish - callback to run when execute finishes\n */\nfunction safeExecuteInTheMiddleAsync(execute, onFinish, preventThrowingError) {\n    return __awaiter(this, void 0, void 0, function () {\n        var error, result, e_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 2, 3, 4]);\n                    return [4 /*yield*/, execute()];\n                case 1:\n                    result = _a.sent();\n                    return [3 /*break*/, 4];\n                case 2:\n                    e_1 = _a.sent();\n                    error = e_1;\n                    return [3 /*break*/, 4];\n                case 3:\n                    onFinish(error, result);\n                    if (error && !preventThrowingError) {\n                        // eslint-disable-next-line no-unsafe-finally\n                        throw error;\n                    }\n                    // eslint-disable-next-line no-unsafe-finally\n                    return [2 /*return*/, result];\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nfunction isWrapped(func) {\n    return (typeof func === 'function' &&\n        typeof func.__original === 'function' &&\n        typeof func.__unwrap === 'function' &&\n        func.__wrapped === true);\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/instrumentation/build/esm/utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/propagator-b3/build/esm/B3MultiPropagator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/propagator-b3/build/esm/B3MultiPropagator.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B3MultiPropagator\": () => (/* binding */ B3MultiPropagator)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/common.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/constants.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar VALID_SAMPLED_VALUES = new Set([true, 'true', 'True', '1', 1]);\nvar VALID_UNSAMPLED_VALUES = new Set([false, 'false', 'False', '0', 0]);\nfunction isValidSampledValue(sampled) {\n    return sampled === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.SAMPLED || sampled === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.NONE;\n}\nfunction parseHeader(header) {\n    return Array.isArray(header) ? header[0] : header;\n}\nfunction getHeaderValue(carrier, getter, key) {\n    var header = getter.get(carrier, key);\n    return parseHeader(header);\n}\nfunction getTraceId(carrier, getter) {\n    var traceId = getHeaderValue(carrier, getter, _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_TRACE_ID);\n    if (typeof traceId === 'string') {\n        return traceId.padStart(32, '0');\n    }\n    return '';\n}\nfunction getSpanId(carrier, getter) {\n    var spanId = getHeaderValue(carrier, getter, _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_SPAN_ID);\n    if (typeof spanId === 'string') {\n        return spanId;\n    }\n    return '';\n}\nfunction getDebug(carrier, getter) {\n    var debug = getHeaderValue(carrier, getter, _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_FLAGS);\n    return debug === '1' ? '1' : undefined;\n}\nfunction getTraceFlags(carrier, getter) {\n    var traceFlags = getHeaderValue(carrier, getter, _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_SAMPLED);\n    var debug = getDebug(carrier, getter);\n    if (debug === '1' || VALID_SAMPLED_VALUES.has(traceFlags)) {\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.SAMPLED;\n    }\n    if (traceFlags === undefined || VALID_UNSAMPLED_VALUES.has(traceFlags)) {\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.NONE;\n    }\n    // This indicates to isValidSampledValue that this is not valid\n    return;\n}\n/**\n * Propagator for the B3 multiple-header HTTP format.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nvar B3MultiPropagator = /** @class */ (function () {\n    function B3MultiPropagator() {\n    }\n    B3MultiPropagator.prototype.inject = function (context, carrier, setter) {\n        var spanContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getSpanContext(context);\n        if (!spanContext ||\n            !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isSpanContextValid)(spanContext) ||\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context))\n            return;\n        var debug = context.getValue(_common__WEBPACK_IMPORTED_MODULE_2__.B3_DEBUG_FLAG_KEY);\n        setter.set(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_TRACE_ID, spanContext.traceId);\n        setter.set(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_SPAN_ID, spanContext.spanId);\n        // According to the B3 spec, if the debug flag is set,\n        // the sampled flag shouldn't be propagated as well.\n        if (debug === '1') {\n            setter.set(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_FLAGS, debug);\n        }\n        else if (spanContext.traceFlags !== undefined) {\n            // We set the header only if there is an existing sampling decision.\n            // Otherwise we will omit it => Absent.\n            setter.set(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_SAMPLED, (_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.SAMPLED & spanContext.traceFlags) === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.SAMPLED\n                ? '1'\n                : '0');\n        }\n    };\n    B3MultiPropagator.prototype.extract = function (context, carrier, getter) {\n        var traceId = getTraceId(carrier, getter);\n        var spanId = getSpanId(carrier, getter);\n        var traceFlags = getTraceFlags(carrier, getter);\n        var debug = getDebug(carrier, getter);\n        if ((0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isValidTraceId)(traceId) &&\n            (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isValidSpanId)(spanId) &&\n            isValidSampledValue(traceFlags)) {\n            context = context.setValue(_common__WEBPACK_IMPORTED_MODULE_2__.B3_DEBUG_FLAG_KEY, debug);\n            return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpanContext(context, {\n                traceId: traceId,\n                spanId: spanId,\n                isRemote: true,\n                traceFlags: traceFlags,\n            });\n        }\n        return context;\n    };\n    B3MultiPropagator.prototype.fields = function () {\n        return [\n            _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_TRACE_ID,\n            _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_SPAN_ID,\n            _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_FLAGS,\n            _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_SAMPLED,\n            _constants__WEBPACK_IMPORTED_MODULE_3__.X_B3_PARENT_SPAN_ID,\n        ];\n    };\n    return B3MultiPropagator;\n}());\n\n//# sourceMappingURL=B3MultiPropagator.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/propagator-b3/build/esm/B3MultiPropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/propagator-b3/build/esm/B3Propagator.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/propagator-b3/build/esm/B3Propagator.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B3Propagator\": () => (/* binding */ B3Propagator)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _B3MultiPropagator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./B3MultiPropagator */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/B3MultiPropagator.js\");\n/* harmony import */ var _B3SinglePropagator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./B3SinglePropagator */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/B3SinglePropagator.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/constants.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/types.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * Propagator that extracts B3 context in both single and multi-header variants,\n * with configurable injection format defaulting to B3 single-header. Due to\n * the asymmetry in injection and extraction formats this is not suitable to\n * be implemented as a composite propagator.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nvar B3Propagator = /** @class */ (function () {\n    function B3Propagator(config) {\n        if (config === void 0) { config = {}; }\n        this._b3MultiPropagator = new _B3MultiPropagator__WEBPACK_IMPORTED_MODULE_1__.B3MultiPropagator();\n        this._b3SinglePropagator = new _B3SinglePropagator__WEBPACK_IMPORTED_MODULE_2__.B3SinglePropagator();\n        if (config.injectEncoding === _types__WEBPACK_IMPORTED_MODULE_4__.B3InjectEncoding.MULTI_HEADER) {\n            this._inject = this._b3MultiPropagator.inject;\n            this._fields = this._b3MultiPropagator.fields();\n        }\n        else {\n            this._inject = this._b3SinglePropagator.inject;\n            this._fields = this._b3SinglePropagator.fields();\n        }\n    }\n    B3Propagator.prototype.inject = function (context, carrier, setter) {\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.isTracingSuppressed)(context)) {\n            return;\n        }\n        this._inject(context, carrier, setter);\n    };\n    B3Propagator.prototype.extract = function (context, carrier, getter) {\n        var header = getter.get(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.B3_CONTEXT_HEADER);\n        var b3Context = Array.isArray(header) ? header[0] : header;\n        if (b3Context) {\n            return this._b3SinglePropagator.extract(context, carrier, getter);\n        }\n        else {\n            return this._b3MultiPropagator.extract(context, carrier, getter);\n        }\n    };\n    B3Propagator.prototype.fields = function () {\n        return this._fields;\n    };\n    return B3Propagator;\n}());\n\n//# sourceMappingURL=B3Propagator.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/propagator-b3/build/esm/B3Propagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/propagator-b3/build/esm/B3SinglePropagator.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/propagator-b3/build/esm/B3SinglePropagator.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B3SinglePropagator\": () => (/* binding */ B3SinglePropagator)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/common.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/constants.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar B3_CONTEXT_REGEX = /((?:[0-9a-f]{16}){1,2})-([0-9a-f]{16})(?:-([01d](?![0-9a-f])))?(?:-([0-9a-f]{16}))?/;\nvar PADDING = '0'.repeat(16);\nvar SAMPLED_VALUES = new Set(['d', '1']);\nvar DEBUG_STATE = 'd';\nfunction convertToTraceId128(traceId) {\n    return traceId.length === 32 ? traceId : \"\" + PADDING + traceId;\n}\nfunction convertToTraceFlags(samplingState) {\n    if (samplingState && SAMPLED_VALUES.has(samplingState)) {\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.SAMPLED;\n    }\n    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.NONE;\n}\n/**\n * Propagator for the B3 single-header HTTP format.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nvar B3SinglePropagator = /** @class */ (function () {\n    function B3SinglePropagator() {\n    }\n    B3SinglePropagator.prototype.inject = function (context, carrier, setter) {\n        var spanContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getSpanContext(context);\n        if (!spanContext ||\n            !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isSpanContextValid)(spanContext) ||\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context))\n            return;\n        var samplingState = context.getValue(_common__WEBPACK_IMPORTED_MODULE_2__.B3_DEBUG_FLAG_KEY) || spanContext.traceFlags & 0x1;\n        var value = spanContext.traceId + \"-\" + spanContext.spanId + \"-\" + samplingState;\n        setter.set(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.B3_CONTEXT_HEADER, value);\n    };\n    B3SinglePropagator.prototype.extract = function (context, carrier, getter) {\n        var header = getter.get(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.B3_CONTEXT_HEADER);\n        var b3Context = Array.isArray(header) ? header[0] : header;\n        if (typeof b3Context !== 'string')\n            return context;\n        var match = b3Context.match(B3_CONTEXT_REGEX);\n        if (!match)\n            return context;\n        var extractedTraceId = match[1], spanId = match[2], samplingState = match[3];\n        var traceId = convertToTraceId128(extractedTraceId);\n        if (!(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isValidTraceId)(traceId) || !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isValidSpanId)(spanId))\n            return context;\n        var traceFlags = convertToTraceFlags(samplingState);\n        if (samplingState === DEBUG_STATE) {\n            context = context.setValue(_common__WEBPACK_IMPORTED_MODULE_2__.B3_DEBUG_FLAG_KEY, samplingState);\n        }\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpanContext(context, {\n            traceId: traceId,\n            spanId: spanId,\n            isRemote: true,\n            traceFlags: traceFlags,\n        });\n    };\n    B3SinglePropagator.prototype.fields = function () {\n        return [_constants__WEBPACK_IMPORTED_MODULE_3__.B3_CONTEXT_HEADER];\n    };\n    return B3SinglePropagator;\n}());\n\n//# sourceMappingURL=B3SinglePropagator.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/propagator-b3/build/esm/B3SinglePropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/propagator-b3/build/esm/common.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/propagator-b3/build/esm/common.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B3_DEBUG_FLAG_KEY\": () => (/* binding */ B3_DEBUG_FLAG_KEY)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** shared context for storing an extracted b3 debug flag */\nvar B3_DEBUG_FLAG_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry Context Key B3 Debug Flag');\n//# sourceMappingURL=common.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/propagator-b3/build/esm/common.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/propagator-b3/build/esm/constants.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/propagator-b3/build/esm/constants.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B3_CONTEXT_HEADER\": () => (/* binding */ B3_CONTEXT_HEADER),\n/* harmony export */   \"X_B3_TRACE_ID\": () => (/* binding */ X_B3_TRACE_ID),\n/* harmony export */   \"X_B3_SPAN_ID\": () => (/* binding */ X_B3_SPAN_ID),\n/* harmony export */   \"X_B3_SAMPLED\": () => (/* binding */ X_B3_SAMPLED),\n/* harmony export */   \"X_B3_PARENT_SPAN_ID\": () => (/* binding */ X_B3_PARENT_SPAN_ID),\n/* harmony export */   \"X_B3_FLAGS\": () => (/* binding */ X_B3_FLAGS)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** B3 single-header key */\nvar B3_CONTEXT_HEADER = 'b3';\n/* b3 multi-header keys */\nvar X_B3_TRACE_ID = 'x-b3-traceid';\nvar X_B3_SPAN_ID = 'x-b3-spanid';\nvar X_B3_SAMPLED = 'x-b3-sampled';\nvar X_B3_PARENT_SPAN_ID = 'x-b3-parentspanid';\nvar X_B3_FLAGS = 'x-b3-flags';\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/propagator-b3/build/esm/constants.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/propagator-b3/build/esm/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/propagator-b3/build/esm/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B3Propagator\": () => (/* reexport safe */ _B3Propagator__WEBPACK_IMPORTED_MODULE_0__.B3Propagator),\n/* harmony export */   \"B3_CONTEXT_HEADER\": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.B3_CONTEXT_HEADER),\n/* harmony export */   \"X_B3_FLAGS\": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.X_B3_FLAGS),\n/* harmony export */   \"X_B3_PARENT_SPAN_ID\": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.X_B3_PARENT_SPAN_ID),\n/* harmony export */   \"X_B3_SAMPLED\": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.X_B3_SAMPLED),\n/* harmony export */   \"X_B3_SPAN_ID\": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.X_B3_SPAN_ID),\n/* harmony export */   \"X_B3_TRACE_ID\": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.X_B3_TRACE_ID),\n/* harmony export */   \"B3InjectEncoding\": () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.B3InjectEncoding)\n/* harmony export */ });\n/* harmony import */ var _B3Propagator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./B3Propagator */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/B3Propagator.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/constants.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"./node_modules/@opentelemetry/propagator-b3/build/esm/types.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/propagator-b3/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/propagator-b3/build/esm/types.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/propagator-b3/build/esm/types.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B3InjectEncoding\": () => (/* binding */ B3InjectEncoding)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Enumeration of B3 inject encodings */\nvar B3InjectEncoding;\n(function (B3InjectEncoding) {\n    B3InjectEncoding[B3InjectEncoding[\"SINGLE_HEADER\"] = 0] = \"SINGLE_HEADER\";\n    B3InjectEncoding[B3InjectEncoding[\"MULTI_HEADER\"] = 1] = \"MULTI_HEADER\";\n})(B3InjectEncoding || (B3InjectEncoding = {}));\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/propagator-b3/build/esm/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/Resource.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/Resource.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Resource\": () => (/* binding */ Resource)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */ (function () {\n    function Resource(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes) {\n        this.attributes = attributes;\n    }\n    /**\n     * Returns an empty Resource\n     */\n    Resource.empty = function () {\n        return Resource.EMPTY;\n    };\n    /**\n     * Returns a Resource that indentifies the SDK in use.\n     */\n    Resource.default = function () {\n        var _a;\n        return new Resource((_a = {},\n            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes.SERVICE_NAME] = (0,_platform__WEBPACK_IMPORTED_MODULE_2__.defaultServiceName)(),\n            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes.TELEMETRY_SDK_NAME] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n            _a));\n    };\n    /**\n     * Returns a new, merged {@link Resource} by merging the current Resource\n     * with the other Resource. In case of a collision, other Resource takes\n     * precedence.\n     *\n     * @param other the Resource that will be merged with this.\n     * @returns the newly merged Resource.\n     */\n    Resource.prototype.merge = function (other) {\n        if (!other || !Object.keys(other.attributes).length)\n            return this;\n        // SpanAttributes from resource overwrite attributes from other resource.\n        var mergedAttributes = Object.assign({}, this.attributes, other.attributes);\n        return new Resource(mergedAttributes);\n    };\n    Resource.EMPTY = new Resource({});\n    return Resource;\n}());\n\n//# sourceMappingURL=Resource.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/resources/build/esm/Resource.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/config.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/config.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=config.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/resources/build/esm/config.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Resource\": () => (/* reexport safe */ _Resource__WEBPACK_IMPORTED_MODULE_0__.Resource),\n/* harmony export */   \"defaultServiceName\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.defaultServiceName),\n/* harmony export */   \"detectResources\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.detectResources)\n/* harmony export */ });\n/* harmony import */ var _Resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Resource */ \"./node_modules/@opentelemetry/resources/build/esm/Resource.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"./node_modules/@opentelemetry/resources/build/esm/types.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ \"./node_modules/@opentelemetry/resources/build/esm/config.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/resources/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"defaultServiceName\": () => (/* binding */ defaultServiceName)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction defaultServiceName() {\n    return 'unknown_service';\n}\n//# sourceMappingURL=default-service-name.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/platform/browser/detect-resources.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/browser/detect-resources.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"detectResources\": () => (/* binding */ detectResources)\n/* harmony export */ });\n/* harmony import */ var _Resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Resource */ \"./node_modules/@opentelemetry/resources/build/esm/Resource.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n/**\n * Detects resources for the browser platform, which is currently only the\n * telemetry SDK resource. More could be added in the future. This method\n * is async to match the signature of corresponding method for node.\n */\nvar detectResources = function () { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        return [2 /*return*/, _Resource__WEBPACK_IMPORTED_MODULE_0__.Resource.empty()];\n    });\n}); };\n//# sourceMappingURL=detect-resources.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/resources/build/esm/platform/browser/detect-resources.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"defaultServiceName\": () => (/* reexport safe */ _default_service_name__WEBPACK_IMPORTED_MODULE_0__.defaultServiceName),\n/* harmony export */   \"detectResources\": () => (/* reexport safe */ _detect_resources__WEBPACK_IMPORTED_MODULE_1__.detectResources)\n/* harmony export */ });\n/* harmony import */ var _default_service_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./default-service-name */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js\");\n/* harmony import */ var _detect_resources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./detect-resources */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/detect-resources.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/types.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/types.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/resources/build/esm/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ForceFlushState\": () => (/* binding */ ForceFlushState),\n/* harmony export */   \"BasicTracerProvider\": () => (/* binding */ BasicTracerProvider)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/resources */ \"./node_modules/@opentelemetry/resources/build/esm/index.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! . */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\");\n/* harmony import */ var _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./MultiSpanProcessor */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js\");\n/* harmony import */ var _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./export/NoopSpanProcessor */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\nvar ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nvar BasicTracerProvider = /** @class */ (function () {\n    function BasicTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._registeredSpanProcessors = [];\n        this._tracers = new Map();\n        var mergedConfig = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.merge)({}, _config__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_CONFIG, config);\n        this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_2__.Resource.empty();\n        this.resource = _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_2__.Resource[\"default\"]().merge(this.resource);\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this.resource,\n        });\n        var defaultExporter = this._buildExporterFromEnv();\n        if (defaultExporter !== undefined) {\n            var batchProcessor = new _platform__WEBPACK_IMPORTED_MODULE_7__.BatchSpanProcessor(defaultExporter);\n            this.activeSpanProcessor = batchProcessor;\n        }\n        else {\n            this.activeSpanProcessor = new _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__.NoopSpanProcessor();\n        }\n    }\n    BasicTracerProvider.prototype.getTracer = function (name, version) {\n        var key = name + \"@\" + (version || '');\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new ___WEBPACK_IMPORTED_MODULE_3__.Tracer({ name: name, version: version }, this._config, this));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    };\n    /**\n     * Adds a new {@link SpanProcessor} to this tracer.\n     * @param spanProcessor the new SpanProcessor to be added.\n     */\n    BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n        if (this._registeredSpanProcessors.length === 0) {\n            // since we might have enabled by default a batchProcessor, we disable it\n            // before adding the new one\n            this.activeSpanProcessor\n                .shutdown()\n                .catch(function (err) {\n                return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error('Error while trying to shutdown current span processor', err);\n            });\n        }\n        this._registeredSpanProcessors.push(spanProcessor);\n        this.activeSpanProcessor = new _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_5__.MultiSpanProcessor(this._registeredSpanProcessors);\n    };\n    BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n        return this.activeSpanProcessor;\n    };\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    BasicTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setGlobalTracerProvider(this);\n        if (config.propagator === undefined) {\n            config.propagator = this._buildPropagatorFromEnv();\n        }\n        if (config.contextManager) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.setGlobalContextManager(config.contextManager);\n        }\n        if (config.propagator) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.setGlobalPropagator(config.propagator);\n        }\n    };\n    BasicTracerProvider.prototype.forceFlush = function () {\n        var timeout = this._config.forceFlushTimeoutMillis;\n        var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n            return new Promise(function (resolve) {\n                var state;\n                var timeoutInterval = setTimeout(function () {\n                    resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(function () {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(function (error) {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises)\n                .then(function (results) {\n                var errors = results.filter(function (result) { return result !== ForceFlushState.resolved; });\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(function (error) { return reject([error]); });\n        });\n    };\n    BasicTracerProvider.prototype.shutdown = function () {\n        return this.activeSpanProcessor.shutdown();\n    };\n    BasicTracerProvider.prototype._getPropagator = function (name) {\n        var _a;\n        return (_a = BasicTracerProvider._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._getSpanExporter = function (name) {\n        var _a;\n        return (_a = BasicTracerProvider._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n        var _this = this;\n        // per spec, propagators from env must be deduplicated\n        var uniquePropagatorNames = Array.from(new Set((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)().OTEL_PROPAGATORS));\n        var propagators = uniquePropagatorNames.map(function (name) {\n            var propagator = _this._getPropagator(name);\n            if (!propagator) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Propagator \\\"\" + name + \"\\\" requested through environment variable is unavailable.\");\n            }\n            return propagator;\n        });\n        var validPropagators = propagators.reduce(function (list, item) {\n            if (item) {\n                list.push(item);\n            }\n            return list;\n        }, []);\n        if (validPropagators.length === 0) {\n            return;\n        }\n        else if (uniquePropagatorNames.length === 1) {\n            return validPropagators[0];\n        }\n        else {\n            return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.CompositePropagator({\n                propagators: validPropagators,\n            });\n        }\n    };\n    BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n        var exporterName = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)().OTEL_TRACES_EXPORTER;\n        if (exporterName === 'none')\n            return;\n        var exporter = this._getSpanExporter(exporterName);\n        if (!exporter) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(\"Exporter \\\"\" + exporterName + \"\\\" requested through environment variable is unavailable.\");\n        }\n        return exporter;\n    };\n    BasicTracerProvider._registeredPropagators = new Map([\n        ['tracecontext', function () { return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.W3CTraceContextPropagator(); }],\n        ['baggage', function () { return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.W3CBaggagePropagator(); }],\n    ]);\n    BasicTracerProvider._registeredExporters = new Map();\n    return BasicTracerProvider;\n}());\n\n//# sourceMappingURL=BasicTracerProvider.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MultiSpanProcessor\": () => (/* binding */ MultiSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */ (function () {\n    function MultiSpanProcessor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    MultiSpanProcessor.prototype.forceFlush = function () {\n        var promises = [];\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            promises.push(spanProcessor.forceFlush());\n        }\n        return new Promise(function (resolve) {\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(function (error) {\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    };\n    MultiSpanProcessor.prototype.onStart = function (span, context) {\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            spanProcessor.onStart(span, context);\n        }\n    };\n    MultiSpanProcessor.prototype.onEnd = function (span) {\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            spanProcessor.onEnd(span);\n        }\n    };\n    MultiSpanProcessor.prototype.shutdown = function () {\n        var promises = [];\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            promises.push(spanProcessor.shutdown());\n        }\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises).then(function () {\n                resolve();\n            }, reject);\n        });\n    };\n    return MultiSpanProcessor;\n}());\n\n//# sourceMappingURL=MultiSpanProcessor.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Span\": () => (/* binding */ Span)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./enums */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * This class represents a span.\n */\nvar Span = /** @class */ (function () {\n    /** Constructs a new Span instance. */\n    function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime) {\n        if (links === void 0) { links = []; }\n        if (startTime === void 0) { startTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTime)(); }\n        this.attributes = {};\n        this.links = [];\n        this.events = [];\n        this.status = {\n            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanStatusCode.UNSET,\n        };\n        this.endTime = [0, 0];\n        this._ended = false;\n        this._duration = [-1, -1];\n        this.name = spanName;\n        this._spanContext = spanContext;\n        this.parentSpanId = parentSpanId;\n        this.kind = kind;\n        this.links = links;\n        this.startTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.timeInputToHrTime)(startTime);\n        this.resource = parentTracer.resource;\n        this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n        this._spanLimits = parentTracer.getSpanLimits();\n        this._spanProcessor = parentTracer.getActiveSpanProcessor();\n        this._spanProcessor.onStart(this, context);\n        this._attributeValueLengthLimit = this._spanLimits.attributeValueLengthLimit || 0;\n    }\n    Span.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    Span.prototype.setAttribute = function (key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Invalid attribute key: \" + key);\n            return this;\n        }\n        if (!(0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.isAttributeValue)(value)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Invalid attribute value set for key: \" + key);\n            return this;\n        }\n        if (Object.keys(this.attributes).length >=\n            this._spanLimits.attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    };\n    Span.prototype.setAttributes = function (attributes) {\n        for (var _i = 0, _a = Object.entries(attributes); _i < _a.length; _i++) {\n            var _b = _a[_i], k = _b[0], v = _b[1];\n            this.setAttribute(k, v);\n        }\n        return this;\n    };\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [startTime] Specified start time for the event\n     */\n    Span.prototype.addEvent = function (name, attributesOrStartTime, startTime) {\n        if (this._isSpanEnded())\n            return this;\n        if (this.events.length >= this._spanLimits.eventCountLimit) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn('Dropping extra events.');\n            this.events.shift();\n        }\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.isTimeInput)(attributesOrStartTime)) {\n            if (typeof startTime === 'undefined') {\n                startTime = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        if (typeof startTime === 'undefined') {\n            startTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTime)();\n        }\n        this.events.push({\n            name: name,\n            attributes: attributesOrStartTime,\n            time: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.timeInputToHrTime)(startTime),\n        });\n        return this;\n    };\n    Span.prototype.setStatus = function (status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = status;\n        return this;\n    };\n    Span.prototype.updateName = function (name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    };\n    Span.prototype.end = function (endTime) {\n        if (endTime === void 0) { endTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTime)(); }\n        if (this._isSpanEnded()) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error('You can only call end() on a span once.');\n            return;\n        }\n        this._ended = true;\n        this.endTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.timeInputToHrTime)(endTime);\n        this._duration = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeDuration)(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn('Inconsistent start and end time, startTime > endTime', this.startTime, this.endTime);\n        }\n        this._spanProcessor.onEnd(this);\n    };\n    Span.prototype.isRecording = function () {\n        return this._ended === false;\n    };\n    Span.prototype.recordException = function (exception, time) {\n        if (time === void 0) { time = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTime)(); }\n        var attributes = {};\n        if (typeof exception === 'string') {\n            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.SemanticAttributes.EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.SemanticAttributes.EXCEPTION_TYPE] = exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.SemanticAttributes.EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.SemanticAttributes.EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.SemanticAttributes.EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.SemanticAttributes.EXCEPTION_TYPE] ||\n            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.SemanticAttributes.EXCEPTION_MESSAGE]) {\n            this.addEvent(_enums__WEBPACK_IMPORTED_MODULE_3__.ExceptionEventName, attributes, time);\n        }\n        else {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Failed to record an exception \" + exception);\n        }\n    };\n    Object.defineProperty(Span.prototype, \"duration\", {\n        get: function () {\n            return this._duration;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"ended\", {\n        get: function () {\n            return this._ended;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Span.prototype._isSpanEnded = function () {\n        if (this._ended) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Can not execute the operation on ended Span {traceId: \" + this._spanContext.traceId + \", spanId: \" + this._spanContext.spanId + \"}\");\n        }\n        return this._ended;\n    };\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    Span.prototype._truncateToLimitUtil = function (value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substr(0, limit);\n    };\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with trucated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    Span.prototype._truncateToSize = function (value) {\n        var _this = this;\n        var limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Attribute value limit must be positive, got \" + limit);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(function (val) { return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val; });\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    };\n    return Span;\n}());\n\n//# sourceMappingURL=Span.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/SpanProcessor.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/SpanProcessor.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=SpanProcessor.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/SpanProcessor.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/TimedEvent.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/TimedEvent.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=TimedEvent.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/TimedEvent.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tracer\": () => (/* binding */ Tracer)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _Span__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Span */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js\");\n/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utility */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * This class represents a basic tracer.\n */\nvar Tracer = /** @class */ (function () {\n    /**\n     * Constructs a new Tracer instance.\n     */\n    function Tracer(instrumentationLibrary, config, _tracerProvider) {\n        this._tracerProvider = _tracerProvider;\n        var localConfig = (0,_utility__WEBPACK_IMPORTED_MODULE_3__.mergeConfig)(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.RandomIdGenerator();\n        this.resource = _tracerProvider.resource;\n        this.instrumentationLibrary = instrumentationLibrary;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    Tracer.prototype.startSpan = function (name, options, context) {\n        var _a, _b;\n        if (options === void 0) { options = {}; }\n        if (context === void 0) { context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active(); }\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug('Instrumentation suppressed, returning Noop Span');\n            return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.wrapSpanContext(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.INVALID_SPAN_CONTEXT);\n        }\n        var parentContext = getParent(options, context);\n        var spanId = this._idGenerator.generateSpanId();\n        var traceId;\n        var traceState;\n        var parentSpanId;\n        if (!parentContext || !_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.isSpanContextValid(parentContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentContext.traceId;\n            traceState = parentContext.traceState;\n            parentSpanId = parentContext.spanId;\n        }\n        var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanKind.INTERNAL;\n        var links = (_b = options.links) !== null && _b !== void 0 ? _b : [];\n        var attributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.sanitizeAttributes)(options.attributes);\n        // make sampling decision\n        var samplingResult = this._sampler.shouldSample(options.root\n            ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpanContext(context, _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.INVALID_SPAN_CONTEXT)\n            : context, traceId, name, spanKind, attributes, links);\n        var traceFlags = samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.RECORD_AND_SAMPLED\n            ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.SAMPLED\n            : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.NONE;\n        var spanContext = { traceId: traceId, spanId: spanId, traceFlags: traceFlags, traceState: traceState };\n        if (samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.NOT_RECORD) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug('Recording is off, propagating context in a non-recording span');\n            return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.wrapSpanContext(spanContext);\n        }\n        var span = new _Span__WEBPACK_IMPORTED_MODULE_2__.Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime);\n        // Set default attributes\n        span.setAttributes(Object.assign(attributes, samplingResult.attributes));\n        return span;\n    };\n    Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpan(parentContext, span);\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context[\"with\"](contextWithSpanSet, fn, undefined, span);\n    };\n    /** Returns the active {@link GeneralLimits}. */\n    Tracer.prototype.getGeneralLimits = function () {\n        return this._generalLimits;\n    };\n    /** Returns the active {@link SpanLimits}. */\n    Tracer.prototype.getSpanLimits = function () {\n        return this._spanLimits;\n    };\n    Tracer.prototype.getActiveSpanProcessor = function () {\n        return this._tracerProvider.getActiveSpanProcessor();\n    };\n    return Tracer;\n}());\n\n/**\n * Get the parent to assign to a started span. If options.parent is null,\n * do not assign a parent.\n *\n * @param options span options\n * @param context context to check for parent\n */\nfunction getParent(options, context) {\n    if (options.root)\n        return undefined;\n    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getSpanContext(context);\n}\n//# sourceMappingURL=Tracer.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_CONFIG\": () => (/* binding */ DEFAULT_CONFIG),\n/* harmony export */   \"buildSamplerFromEnv\": () => (/* binding */ buildSamplerFromEnv)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar env = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)();\nvar FALLBACK_OTEL_TRACES_SAMPLER = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\nvar DEFAULT_CONFIG = {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n        attributeValueLengthLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n        attributeCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)().OTEL_ATTRIBUTE_COUNT_LIMIT,\n    },\n    spanLimits: {\n        attributeValueLengthLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n        attributeCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n        linkCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)().OTEL_SPAN_LINK_COUNT_LIMIT,\n        eventCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)().OTEL_SPAN_EVENT_COUNT_LIMIT,\n    },\n};\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nfunction buildSamplerFromEnv(environment) {\n    if (environment === void 0) { environment = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)(); }\n    switch (environment.OTEL_TRACES_SAMPLER) {\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.AlwaysOn:\n            return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.AlwaysOff:\n            return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.AlwaysOffSampler();\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.ParentBasedAlwaysOn:\n            return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ParentBasedSampler({\n                root: new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler(),\n            });\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.ParentBasedAlwaysOff:\n            return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ParentBasedSampler({\n                root: new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.AlwaysOffSampler(),\n            });\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.TraceIdRatio:\n            return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.ParentBasedTraceIdRatio:\n            return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ParentBasedSampler({\n                root: new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment)),\n            });\n        default:\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n            return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n    }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n    if (environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n        environment.OTEL_TRACES_SAMPLER_ARG === '') {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n    if (isNaN(probability)) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n//# sourceMappingURL=config.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ExceptionEventName\": () => (/* binding */ ExceptionEventName)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nvar ExceptionEventName = 'exception';\n//# sourceMappingURL=enums.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BatchSpanProcessorBase\": () => (/* binding */ BatchSpanProcessorBase)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */ (function () {\n    function BatchSpanProcessorBase(_exporter, config) {\n        this._exporter = _exporter;\n        this._finishedSpans = [];\n        this._isShutdown = false;\n        this._shuttingDownPromise = Promise.resolve();\n        var env = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)();\n        this._maxExportBatchSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number'\n                ? config.maxExportBatchSize\n                : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n        this._maxQueueSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number'\n                ? config.maxQueueSize\n                : env.OTEL_BSP_MAX_QUEUE_SIZE;\n        this._scheduledDelayMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number'\n                ? config.scheduledDelayMillis\n                : env.OTEL_BSP_SCHEDULE_DELAY;\n        this._exportTimeoutMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number'\n                ? config.exportTimeoutMillis\n                : env.OTEL_BSP_EXPORT_TIMEOUT;\n    }\n    BatchSpanProcessorBase.prototype.forceFlush = function () {\n        if (this._isShutdown) {\n            return this._shuttingDownPromise;\n        }\n        return this._flushAll();\n    };\n    // does nothing.\n    BatchSpanProcessorBase.prototype.onStart = function (_span) { };\n    BatchSpanProcessorBase.prototype.onEnd = function (span) {\n        if (this._isShutdown) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    };\n    BatchSpanProcessorBase.prototype.shutdown = function () {\n        var _this = this;\n        if (this._isShutdown) {\n            return this._shuttingDownPromise;\n        }\n        this._isShutdown = true;\n        this._shuttingDownPromise = new Promise(function (resolve, reject) {\n            Promise.resolve()\n                .then(function () {\n                return _this.onShutdown();\n            })\n                .then(function () {\n                return _this._flushAll();\n            })\n                .then(function () {\n                return _this._exporter.shutdown();\n            })\n                .then(resolve)\n                .catch(function (e) {\n                reject(e);\n            });\n        });\n        return this._shuttingDownPromise;\n    };\n    /** Add a span in the buffer. */\n    BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            return;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    };\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    BatchSpanProcessorBase.prototype._flushAll = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var promises = [];\n            // calculate number of batches\n            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n            for (var i = 0, j = count; i < j; i++) {\n                promises.push(_this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(reject);\n        });\n    };\n    BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n        var _this = this;\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            var timer = setTimeout(function () {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, _this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context[\"with\"]((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.suppressTracing)(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active()), function () {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside of the execution of this callback.\n                _this._exporter.export(_this._finishedSpans.splice(0, _this._maxExportBatchSize), function (result) {\n                    var _a;\n                    clearTimeout(timer);\n                    if (result.code === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.SUCCESS) {\n                        resolve();\n                    }\n                    else {\n                        reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n                    }\n                });\n            });\n        });\n    };\n    BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n        var _this = this;\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(function () {\n            _this._flushOneBatch()\n                .then(function () {\n                if (_this._finishedSpans.length > 0) {\n                    _this._clearTimer();\n                    _this._maybeStartTimer();\n                }\n            })\n                .catch(function (e) {\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.globalErrorHandler)(e);\n            });\n        }, this._scheduledDelayMillis);\n        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.unrefTimer)(this._timer);\n    };\n    BatchSpanProcessorBase.prototype._clearTimer = function () {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    };\n    return BatchSpanProcessorBase;\n}());\n\n//# sourceMappingURL=BatchSpanProcessorBase.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ConsoleSpanExporter\": () => (/* binding */ ConsoleSpanExporter)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n/* eslint-disable no-console */\nvar ConsoleSpanExporter = /** @class */ (function () {\n    function ConsoleSpanExporter() {\n    }\n    /**\n     * Export spans.\n     * @param spans\n     * @param resultCallback\n     */\n    ConsoleSpanExporter.prototype.export = function (spans, resultCallback) {\n        return this._sendSpans(spans, resultCallback);\n    };\n    /**\n     * Shutdown the exporter.\n     */\n    ConsoleSpanExporter.prototype.shutdown = function () {\n        this._sendSpans([]);\n        return Promise.resolve();\n    };\n    /**\n     * converts span info into more readable format\n     * @param span\n     */\n    ConsoleSpanExporter.prototype._exportInfo = function (span) {\n        return {\n            traceId: span.spanContext().traceId,\n            parentId: span.parentSpanId,\n            name: span.name,\n            id: span.spanContext().spanId,\n            kind: span.kind,\n            timestamp: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToMicroseconds)(span.startTime),\n            duration: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToMicroseconds)(span.duration),\n            attributes: span.attributes,\n            status: span.status,\n            events: span.events,\n        };\n    };\n    /**\n     * Showing spans in console\n     * @param spans\n     * @param done\n     */\n    ConsoleSpanExporter.prototype._sendSpans = function (spans, done) {\n        for (var _i = 0, spans_1 = spans; _i < spans_1.length; _i++) {\n            var span = spans_1[_i];\n            console.log(this._exportInfo(span));\n        }\n        if (done) {\n            return done({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.ExportResultCode.SUCCESS });\n        }\n    };\n    return ConsoleSpanExporter;\n}());\n\n//# sourceMappingURL=ConsoleSpanExporter.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InMemorySpanExporter\": () => (/* binding */ InMemorySpanExporter)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nvar InMemorySpanExporter = /** @class */ (function () {\n    function InMemorySpanExporter() {\n        this._finishedSpans = [];\n        /**\n         * Indicates if the exporter has been \"shutdown.\"\n         * When false, exported spans will not be stored in-memory.\n         */\n        this._stopped = false;\n    }\n    InMemorySpanExporter.prototype.export = function (spans, resultCallback) {\n        var _a;\n        if (this._stopped)\n            return resultCallback({\n                code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.ExportResultCode.FAILED,\n                error: new Error('Exporter has been stopped'),\n            });\n        (_a = this._finishedSpans).push.apply(_a, spans);\n        setTimeout(function () { return resultCallback({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.ExportResultCode.SUCCESS }); }, 0);\n    };\n    InMemorySpanExporter.prototype.shutdown = function () {\n        this._stopped = true;\n        this._finishedSpans = [];\n        return Promise.resolve();\n    };\n    InMemorySpanExporter.prototype.reset = function () {\n        this._finishedSpans = [];\n    };\n    InMemorySpanExporter.prototype.getFinishedSpans = function () {\n        return this._finishedSpans;\n    };\n    return InMemorySpanExporter;\n}());\n\n//# sourceMappingURL=InMemorySpanExporter.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NoopSpanProcessor\": () => (/* binding */ NoopSpanProcessor)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nvar NoopSpanProcessor = /** @class */ (function () {\n    function NoopSpanProcessor() {\n    }\n    NoopSpanProcessor.prototype.onStart = function (_span, _context) { };\n    NoopSpanProcessor.prototype.onEnd = function (_span) { };\n    NoopSpanProcessor.prototype.shutdown = function () {\n        return Promise.resolve();\n    };\n    NoopSpanProcessor.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    return NoopSpanProcessor;\n}());\n\n//# sourceMappingURL=NoopSpanProcessor.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ReadableSpan.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ReadableSpan.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=ReadableSpan.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ReadableSpan.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SimpleSpanProcessor\": () => (/* binding */ SimpleSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n */\nvar SimpleSpanProcessor = /** @class */ (function () {\n    function SimpleSpanProcessor(_exporter) {\n        this._exporter = _exporter;\n        this._isShutdown = false;\n        this._shuttingDownPromise = Promise.resolve();\n    }\n    SimpleSpanProcessor.prototype.forceFlush = function () {\n        // do nothing as all spans are being exported without waiting\n        return Promise.resolve();\n    };\n    // does nothing.\n    SimpleSpanProcessor.prototype.onStart = function (_span) { };\n    SimpleSpanProcessor.prototype.onEnd = function (span) {\n        var _this = this;\n        if (this._isShutdown) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        // prevent downstream exporter calls from generating spans\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context[\"with\"]((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.suppressTracing)(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active()), function () {\n            _this._exporter.export([span], function (result) {\n                var _a;\n                if (result.code !== _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.SUCCESS) {\n                    (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.globalErrorHandler)((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\"SimpleSpanProcessor: span export failed (status \" + result + \")\"));\n                }\n            });\n        });\n    };\n    SimpleSpanProcessor.prototype.shutdown = function () {\n        var _this = this;\n        if (this._isShutdown) {\n            return this._shuttingDownPromise;\n        }\n        this._isShutdown = true;\n        this._shuttingDownPromise = new Promise(function (resolve, reject) {\n            Promise.resolve()\n                .then(function () {\n                return _this._exporter.shutdown();\n            })\n                .then(resolve)\n                .catch(function (e) {\n                reject(e);\n            });\n        });\n        return this._shuttingDownPromise;\n    };\n    return SimpleSpanProcessor;\n}());\n\n//# sourceMappingURL=SimpleSpanProcessor.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SpanExporter.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SpanExporter.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=SpanExporter.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SpanExporter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tracer\": () => (/* reexport safe */ _Tracer__WEBPACK_IMPORTED_MODULE_0__.Tracer),\n/* harmony export */   \"BasicTracerProvider\": () => (/* reexport safe */ _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_1__.BasicTracerProvider),\n/* harmony export */   \"ForceFlushState\": () => (/* reexport safe */ _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_1__.ForceFlushState),\n/* harmony export */   \"BatchSpanProcessor\": () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_2__.BatchSpanProcessor),\n/* harmony export */   \"ConsoleSpanExporter\": () => (/* reexport safe */ _export_ConsoleSpanExporter__WEBPACK_IMPORTED_MODULE_3__.ConsoleSpanExporter),\n/* harmony export */   \"InMemorySpanExporter\": () => (/* reexport safe */ _export_InMemorySpanExporter__WEBPACK_IMPORTED_MODULE_4__.InMemorySpanExporter),\n/* harmony export */   \"SimpleSpanProcessor\": () => (/* reexport safe */ _export_SimpleSpanProcessor__WEBPACK_IMPORTED_MODULE_6__.SimpleSpanProcessor),\n/* harmony export */   \"NoopSpanProcessor\": () => (/* reexport safe */ _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_8__.NoopSpanProcessor),\n/* harmony export */   \"Span\": () => (/* reexport safe */ _Span__WEBPACK_IMPORTED_MODULE_9__.Span)\n/* harmony export */ });\n/* harmony import */ var _Tracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tracer */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js\");\n/* harmony import */ var _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BasicTracerProvider */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js\");\n/* harmony import */ var _export_ConsoleSpanExporter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./export/ConsoleSpanExporter */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js\");\n/* harmony import */ var _export_InMemorySpanExporter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./export/InMemorySpanExporter */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js\");\n/* harmony import */ var _export_ReadableSpan__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./export/ReadableSpan */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ReadableSpan.js\");\n/* harmony import */ var _export_SimpleSpanProcessor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./export/SimpleSpanProcessor */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js\");\n/* harmony import */ var _export_SpanExporter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./export/SpanExporter */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SpanExporter.js\");\n/* harmony import */ var _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./export/NoopSpanProcessor */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js\");\n/* harmony import */ var _Span__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Span */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js\");\n/* harmony import */ var _SpanProcessor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./SpanProcessor */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/SpanProcessor.js\");\n/* harmony import */ var _TimedEvent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./TimedEvent */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/TimedEvent.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./types */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/types.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BatchSpanProcessor\": () => (/* binding */ BatchSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../export/BatchSpanProcessorBase */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\nvar BatchSpanProcessor = /** @class */ (function (_super) {\n    __extends(BatchSpanProcessor, _super);\n    function BatchSpanProcessor(_exporter, config) {\n        var _this = _super.call(this, _exporter, config) || this;\n        _this.onInit(config);\n        return _this;\n    }\n    BatchSpanProcessor.prototype.onInit = function (config) {\n        var _this = this;\n        if ((config === null || config === void 0 ? void 0 : config.disableAutoFlushOnDocumentHide) !== true && document != null) {\n            this._visibilityChangeListener = function () {\n                if (document.visibilityState === 'hidden') {\n                    void _this.forceFlush();\n                }\n            };\n            this._pageHideListener = function () {\n                void _this.forceFlush();\n            };\n            document.addEventListener('visibilitychange', this._visibilityChangeListener);\n            // use 'pagehide' event as a fallback for Safari; see https://bugs.webkit.org/show_bug.cgi?id=116769\n            document.addEventListener('pagehide', this._pageHideListener);\n        }\n    };\n    BatchSpanProcessor.prototype.onShutdown = function () {\n        if (this._visibilityChangeListener) {\n            document.removeEventListener('visibilitychange', this._visibilityChangeListener);\n        }\n        if (this._pageHideListener) {\n            document.removeEventListener('pagehide', this._pageHideListener);\n        }\n    };\n    return BatchSpanProcessor;\n}(_export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_0__.BatchSpanProcessorBase));\n\n//# sourceMappingURL=BatchSpanProcessor.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BatchSpanProcessor\": () => (/* reexport safe */ _export_BatchSpanProcessor__WEBPACK_IMPORTED_MODULE_0__.BatchSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _export_BatchSpanProcessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./export/BatchSpanProcessor */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/types.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/types.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"mergeConfig\": () => (/* binding */ mergeConfig)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nfunction mergeConfig(userConfig) {\n    var perInstanceDefaults = {\n        sampler: (0,_config__WEBPACK_IMPORTED_MODULE_1__.buildSamplerFromEnv)(),\n    };\n    var target = Object.assign({}, _config__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, _config__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, _config__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    /**\n     * When span attribute count limit is not defined, but general attribute count limit is defined\n     * Then, span attribute count limit will be same as general one\n     */\n    if (target.spanLimits.attributeCountLimit === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ATTRIBUTE_COUNT_LIMIT && target.generalLimits.attributeCountLimit !== _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ATTRIBUTE_COUNT_LIMIT) {\n        target.spanLimits.attributeCountLimit = target.generalLimits.attributeCountLimit;\n    }\n    /**\n     * When span attribute value length limit is not defined, but general attribute value length limit is defined\n     * Then, span attribute value length limit will be same as general one\n     */\n    if (target.spanLimits.attributeValueLengthLimit === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT && target.generalLimits.attributeValueLengthLimit !== _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT) {\n        target.spanLimits.attributeValueLengthLimit = target.generalLimits.attributeValueLengthLimit;\n    }\n    return target;\n}\n//# sourceMappingURL=utility.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StackContextManager\": () => (/* binding */ StackContextManager)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\n\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nvar StackContextManager = /** @class */ (function () {\n    function StackContextManager() {\n        /**\n         * whether the context manager is enabled or not\n         */\n        this._enabled = false;\n        /**\n         * Keeps the reference to current context\n         */\n        this._currentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;\n    }\n    /**\n     *\n     * @param context\n     * @param target Function to be executed within the context\n     */\n    StackContextManager.prototype._bindFunction = function (context, target) {\n        if (context === void 0) { context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT; }\n        var manager = this;\n        var contextWrapper = function () {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return manager.with(context, function () { return target.apply(_this, args); });\n        };\n        Object.defineProperty(contextWrapper, 'length', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: target.length,\n        });\n        return contextWrapper;\n    };\n    /**\n     * Returns the active context\n     */\n    StackContextManager.prototype.active = function () {\n        return this._currentContext;\n    };\n    /**\n     * Binds a the certain context or the active one to the target function and then returns the target\n     * @param context A context (span) to be bind to target\n     * @param target a function or event emitter. When target or one of its callbacks is called,\n     *  the provided context will be used as the active context for the duration of the call.\n     */\n    StackContextManager.prototype.bind = function (context, target) {\n        // if no specific context to propagate is given, we use the current one\n        if (context === undefined) {\n            context = this.active();\n        }\n        if (typeof target === 'function') {\n            return this._bindFunction(context, target);\n        }\n        return target;\n    };\n    /**\n     * Disable the context manager (clears the current context)\n     */\n    StackContextManager.prototype.disable = function () {\n        this._currentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;\n        this._enabled = false;\n        return this;\n    };\n    /**\n     * Enables the context manager and creates a default(root) context\n     */\n    StackContextManager.prototype.enable = function () {\n        if (this._enabled) {\n            return this;\n        }\n        this._enabled = true;\n        this._currentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;\n        return this;\n    };\n    /**\n     * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n     * The context will be set as active\n     * @param context\n     * @param fn Callback function\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    StackContextManager.prototype.with = function (context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        var previousContext = this._currentContext;\n        this._currentContext = context || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;\n        try {\n            return fn.call.apply(fn, __spreadArray([thisArg], args));\n        }\n        finally {\n            this._currentContext = previousContext;\n        }\n    };\n    return StackContextManager;\n}());\n\n//# sourceMappingURL=StackContextManager.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-web/build/esm/WebTracerProvider.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-web/build/esm/WebTracerProvider.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WebTracerProvider\": () => (/* binding */ WebTracerProvider)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\n/* harmony import */ var _StackContextManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StackContextManager */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n/**\n * This class represents a web tracer with {@link StackContextManager}\n */\nvar WebTracerProvider = /** @class */ (function (_super) {\n    __extends(WebTracerProvider, _super);\n    /**\n     * Constructs a new Tracer instance.\n     * @param config Web Tracer config\n     */\n    function WebTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this, config) || this;\n        if (config.contextManager) {\n            throw ('contextManager should be defined in register method not in' +\n                ' constructor');\n        }\n        if (config.propagator) {\n            throw 'propagator should be defined in register method not in constructor';\n        }\n        return _this;\n    }\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    WebTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        if (config.contextManager === undefined) {\n            config.contextManager = new _StackContextManager__WEBPACK_IMPORTED_MODULE_1__.StackContextManager();\n        }\n        if (config.contextManager) {\n            config.contextManager.enable();\n        }\n        _super.prototype.register.call(this, config);\n    };\n    return WebTracerProvider;\n}(_opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_0__.BasicTracerProvider));\n\n//# sourceMappingURL=WebTracerProvider.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-web/build/esm/WebTracerProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PerformanceTimingNames\": () => (/* binding */ PerformanceTimingNames)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar PerformanceTimingNames;\n(function (PerformanceTimingNames) {\n    PerformanceTimingNames[\"CONNECT_END\"] = \"connectEnd\";\n    PerformanceTimingNames[\"CONNECT_START\"] = \"connectStart\";\n    PerformanceTimingNames[\"DECODED_BODY_SIZE\"] = \"decodedBodySize\";\n    PerformanceTimingNames[\"DOM_COMPLETE\"] = \"domComplete\";\n    PerformanceTimingNames[\"DOM_CONTENT_LOADED_EVENT_END\"] = \"domContentLoadedEventEnd\";\n    PerformanceTimingNames[\"DOM_CONTENT_LOADED_EVENT_START\"] = \"domContentLoadedEventStart\";\n    PerformanceTimingNames[\"DOM_INTERACTIVE\"] = \"domInteractive\";\n    PerformanceTimingNames[\"DOMAIN_LOOKUP_END\"] = \"domainLookupEnd\";\n    PerformanceTimingNames[\"DOMAIN_LOOKUP_START\"] = \"domainLookupStart\";\n    PerformanceTimingNames[\"ENCODED_BODY_SIZE\"] = \"encodedBodySize\";\n    PerformanceTimingNames[\"FETCH_START\"] = \"fetchStart\";\n    PerformanceTimingNames[\"LOAD_EVENT_END\"] = \"loadEventEnd\";\n    PerformanceTimingNames[\"LOAD_EVENT_START\"] = \"loadEventStart\";\n    PerformanceTimingNames[\"NAVIGATION_START\"] = \"navigationStart\";\n    PerformanceTimingNames[\"REDIRECT_END\"] = \"redirectEnd\";\n    PerformanceTimingNames[\"REDIRECT_START\"] = \"redirectStart\";\n    PerformanceTimingNames[\"REQUEST_START\"] = \"requestStart\";\n    PerformanceTimingNames[\"RESPONSE_END\"] = \"responseEnd\";\n    PerformanceTimingNames[\"RESPONSE_START\"] = \"responseStart\";\n    PerformanceTimingNames[\"SECURE_CONNECTION_START\"] = \"secureConnectionStart\";\n    PerformanceTimingNames[\"UNLOAD_EVENT_END\"] = \"unloadEventEnd\";\n    PerformanceTimingNames[\"UNLOAD_EVENT_START\"] = \"unloadEventStart\";\n})(PerformanceTimingNames || (PerformanceTimingNames = {}));\n//# sourceMappingURL=PerformanceTimingNames.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-web/build/esm/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-web/build/esm/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WebTracerProvider\": () => (/* reexport safe */ _WebTracerProvider__WEBPACK_IMPORTED_MODULE_0__.WebTracerProvider),\n/* harmony export */   \"StackContextManager\": () => (/* reexport safe */ _StackContextManager__WEBPACK_IMPORTED_MODULE_1__.StackContextManager),\n/* harmony export */   \"PerformanceTimingNames\": () => (/* reexport safe */ _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_2__.PerformanceTimingNames),\n/* harmony export */   \"addSpanNetworkEvent\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.addSpanNetworkEvent),\n/* harmony export */   \"addSpanNetworkEvents\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.addSpanNetworkEvents),\n/* harmony export */   \"getElementXPath\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getElementXPath),\n/* harmony export */   \"getResource\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getResource),\n/* harmony export */   \"getUrlNormalizingAnchor\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.getUrlNormalizingAnchor),\n/* harmony export */   \"hasKey\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.hasKey),\n/* harmony export */   \"parseUrl\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.parseUrl),\n/* harmony export */   \"shouldPropagateTraceHeaders\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.shouldPropagateTraceHeaders),\n/* harmony export */   \"sortResources\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_4__.sortResources)\n/* harmony export */ });\n/* harmony import */ var _WebTracerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebTracerProvider */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/WebTracerProvider.js\");\n/* harmony import */ var _StackContextManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StackContextManager */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js\");\n/* harmony import */ var _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./enums/PerformanceTimingNames */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/types.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-web/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-web/build/esm/types.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-web/build/esm/types.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums/PerformanceTimingNames */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-web/build/esm/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getUrlNormalizingAnchor\": () => (/* binding */ getUrlNormalizingAnchor),\n/* harmony export */   \"hasKey\": () => (/* binding */ hasKey),\n/* harmony export */   \"addSpanNetworkEvent\": () => (/* binding */ addSpanNetworkEvent),\n/* harmony export */   \"addSpanNetworkEvents\": () => (/* binding */ addSpanNetworkEvents),\n/* harmony export */   \"sortResources\": () => (/* binding */ sortResources),\n/* harmony export */   \"getResource\": () => (/* binding */ getResource),\n/* harmony export */   \"parseUrl\": () => (/* binding */ parseUrl),\n/* harmony export */   \"getElementXPath\": () => (/* binding */ getElementXPath),\n/* harmony export */   \"shouldPropagateTraceHeaders\": () => (/* binding */ shouldPropagateTraceHeaders)\n/* harmony export */ });\n/* harmony import */ var _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums/PerformanceTimingNames */ \"./node_modules/@opentelemetry/sdk-trace-web/build/esm/enums/PerformanceTimingNames.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n// Used to normalize relative URLs\nvar a;\nfunction getUrlNormalizingAnchor() {\n    if (!a) {\n        a = document.createElement('a');\n    }\n    return a;\n}\n/**\n * Helper function to be able to use enum as typed key in type and in interface when using forEach\n * @param obj\n * @param key\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasKey(obj, key) {\n    return key in obj;\n}\n/**\n * Helper function for starting an event on span based on {@link PerformanceEntries}\n * @param span\n * @param performanceName name of performance entry for time start\n * @param entries\n */\nfunction addSpanNetworkEvent(span, performanceName, entries) {\n    if (hasKey(entries, performanceName) &&\n        typeof entries[performanceName] === 'number') {\n        span.addEvent(performanceName, entries[performanceName]);\n        return span;\n    }\n    return undefined;\n}\n/**\n * Helper function for adding network events\n * @param span\n * @param resource\n */\nfunction addSpanNetworkEvents(span, resource) {\n    addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START, resource);\n    addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_START, resource);\n    addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DOMAIN_LOOKUP_END, resource);\n    addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_START, resource);\n    addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.SECURE_CONNECTION_START, resource);\n    addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.CONNECT_END, resource);\n    addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.REQUEST_START, resource);\n    addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_START, resource);\n    addSpanNetworkEvent(span, _enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END, resource);\n    var encodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.ENCODED_BODY_SIZE];\n    if (encodedLength !== undefined) {\n        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH, encodedLength);\n    }\n    var decodedLength = resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.DECODED_BODY_SIZE];\n    // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)\n    if (decodedLength !== undefined && encodedLength !== decodedLength) {\n        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, decodedLength);\n    }\n}\n/**\n * sort resources by startTime\n * @param filteredResources\n */\nfunction sortResources(filteredResources) {\n    return filteredResources.slice().sort(function (a, b) {\n        var valueA = a[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];\n        var valueB = b[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];\n        if (valueA > valueB) {\n            return 1;\n        }\n        else if (valueA < valueB) {\n            return -1;\n        }\n        return 0;\n    });\n}\n/**\n * Get closest performance resource ignoring the resources that have been\n * already used.\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n * @param initiatorType\n */\nfunction getResource(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {\n    if (ignoredResources === void 0) { ignoredResources = new WeakSet(); }\n    // de-relativize the URL before usage (does no harm to absolute URLs)\n    var urlNormalizingAnchor = getUrlNormalizingAnchor();\n    urlNormalizingAnchor.href = spanUrl;\n    spanUrl = urlNormalizingAnchor.href;\n    var filteredResources = filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);\n    if (filteredResources.length === 0) {\n        return {\n            mainRequest: undefined,\n        };\n    }\n    if (filteredResources.length === 1) {\n        return {\n            mainRequest: filteredResources[0],\n        };\n    }\n    var sorted = sortResources(filteredResources);\n    var parsedSpanUrl = parseUrl(spanUrl);\n    if (parsedSpanUrl.origin !== window.location.origin && sorted.length > 1) {\n        var corsPreFlightRequest = sorted[0];\n        var mainRequest = findMainRequest(sorted, corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END], endTimeHR);\n        var responseEnd = corsPreFlightRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END];\n        var fetchStart = mainRequest[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START];\n        // no corsPreFlightRequest\n        if (fetchStart < responseEnd) {\n            mainRequest = corsPreFlightRequest;\n            corsPreFlightRequest = undefined;\n        }\n        return {\n            corsPreFlightRequest: corsPreFlightRequest,\n            mainRequest: mainRequest,\n        };\n    }\n    else {\n        return {\n            mainRequest: filteredResources[0],\n        };\n    }\n}\n/**\n * Will find the main request skipping the cors pre flight requests\n * @param resources\n * @param corsPreFlightRequestEndTime\n * @param spanEndTimeHR\n */\nfunction findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {\n    var spanEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)(spanEndTimeHR);\n    var minTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.timeInputToHrTime)(corsPreFlightRequestEndTime));\n    var mainRequest = resources[1];\n    var bestGap;\n    var length = resources.length;\n    for (var i = 1; i < length; i++) {\n        var resource = resources[i];\n        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));\n        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));\n        var currentGap = spanEndTime - resourceEndTime;\n        if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {\n            bestGap = currentGap;\n            mainRequest = resource;\n        }\n    }\n    return mainRequest;\n}\n/**\n * Filter all resources that has started and finished according to span start time and end time.\n *     It will return the closest resource to a start time\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n */\nfunction filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {\n    var startTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)(startTimeHR);\n    var endTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)(endTimeHR);\n    var filteredResources = resources.filter(function (resource) {\n        var resourceStartTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.FETCH_START]));\n        var resourceEndTime = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.timeInputToHrTime)(resource[_enums_PerformanceTimingNames__WEBPACK_IMPORTED_MODULE_0__.PerformanceTimingNames.RESPONSE_END]));\n        return (resource.initiatorType.toLowerCase() ===\n            (initiatorType || 'xmlhttprequest') &&\n            resource.name === spanUrl &&\n            resourceStartTime >= startTime &&\n            resourceEndTime <= endTime);\n    });\n    if (filteredResources.length > 0) {\n        filteredResources = filteredResources.filter(function (resource) {\n            return !ignoredResources.has(resource);\n        });\n    }\n    return filteredResources;\n}\n/**\n * Parses url using anchor element\n * @param url\n */\nfunction parseUrl(url) {\n    var a = document.createElement('a');\n    a.href = url;\n    return a;\n}\n/**\n * Get element XPath\n * @param target - target element\n * @param optimised - when id attribute of element is present the xpath can be\n * simplified to contain id\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getElementXPath(target, optimised) {\n    if (target.nodeType === Node.DOCUMENT_NODE) {\n        return '/';\n    }\n    var targetValue = getNodeValue(target, optimised);\n    if (optimised && targetValue.indexOf('@id') > 0) {\n        return targetValue;\n    }\n    var xpath = '';\n    if (target.parentNode) {\n        xpath += getElementXPath(target.parentNode, false);\n    }\n    xpath += targetValue;\n    return xpath;\n}\n/**\n * get node index within the siblings\n * @param target\n */\nfunction getNodeIndex(target) {\n    if (!target.parentNode) {\n        return 0;\n    }\n    var allowedTypes = [target.nodeType];\n    if (target.nodeType === Node.CDATA_SECTION_NODE) {\n        allowedTypes.push(Node.TEXT_NODE);\n    }\n    var elements = Array.from(target.parentNode.childNodes);\n    elements = elements.filter(function (element) {\n        var localName = element.localName;\n        return (allowedTypes.indexOf(element.nodeType) >= 0 &&\n            localName === target.localName);\n    });\n    if (elements.length >= 1) {\n        return elements.indexOf(target) + 1; // xpath starts from 1\n    }\n    // if there are no other similar child xpath doesn't need index\n    return 0;\n}\n/**\n * get node value for xpath\n * @param target\n * @param optimised\n */\nfunction getNodeValue(target, optimised) {\n    var nodeType = target.nodeType;\n    var index = getNodeIndex(target);\n    var nodeValue = '';\n    if (nodeType === Node.ELEMENT_NODE) {\n        var id = target.getAttribute('id');\n        if (optimised && id) {\n            return \"//*[@id=\\\"\" + id + \"\\\"]\";\n        }\n        nodeValue = target.localName;\n    }\n    else if (nodeType === Node.TEXT_NODE ||\n        nodeType === Node.CDATA_SECTION_NODE) {\n        nodeValue = 'text()';\n    }\n    else if (nodeType === Node.COMMENT_NODE) {\n        nodeValue = 'comment()';\n    }\n    else {\n        return '';\n    }\n    // if index is 1 it can be omitted in xpath\n    if (nodeValue && index > 1) {\n        return \"/\" + nodeValue + \"[\" + index + \"]\";\n    }\n    return \"/\" + nodeValue;\n}\n/**\n * Checks if trace headers should be propagated\n * @param spanUrl\n * @private\n */\nfunction shouldPropagateTraceHeaders(spanUrl, propagateTraceHeaderCorsUrls) {\n    var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];\n    if (typeof propagateTraceHeaderUrls === 'string' ||\n        propagateTraceHeaderUrls instanceof RegExp) {\n        propagateTraceHeaderUrls = [propagateTraceHeaderUrls];\n    }\n    var parsedSpanUrl = parseUrl(spanUrl);\n    if (parsedSpanUrl.origin === window.location.origin) {\n        return true;\n    }\n    else {\n        return propagateTraceHeaderUrls.some(function (propagateTraceHeaderUrl) {\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.urlMatches)(spanUrl, propagateTraceHeaderUrl);\n        });\n    }\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/sdk-trace-web/build/esm/utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DbCassandraConsistencyLevelValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DbCassandraConsistencyLevelValues),\n/* harmony export */   \"DbSystemValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.DbSystemValues),\n/* harmony export */   \"FaasDocumentOperationValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FaasDocumentOperationValues),\n/* harmony export */   \"FaasInvokedProviderValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FaasInvokedProviderValues),\n/* harmony export */   \"FaasTriggerValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.FaasTriggerValues),\n/* harmony export */   \"HttpFlavorValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.HttpFlavorValues),\n/* harmony export */   \"MessageTypeValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MessageTypeValues),\n/* harmony export */   \"MessagingDestinationKindValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MessagingDestinationKindValues),\n/* harmony export */   \"MessagingOperationValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.MessagingOperationValues),\n/* harmony export */   \"NetHostConnectionSubtypeValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NetHostConnectionSubtypeValues),\n/* harmony export */   \"NetHostConnectionTypeValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NetHostConnectionTypeValues),\n/* harmony export */   \"NetTransportValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.NetTransportValues),\n/* harmony export */   \"RpcGrpcStatusCodeValues\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.RpcGrpcStatusCodeValues),\n/* harmony export */   \"SemanticAttributes\": () => (/* reexport safe */ _trace__WEBPACK_IMPORTED_MODULE_0__.SemanticAttributes),\n/* harmony export */   \"AwsEcsLaunchtypeValues\": () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.AwsEcsLaunchtypeValues),\n/* harmony export */   \"CloudPlatformValues\": () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CloudPlatformValues),\n/* harmony export */   \"CloudProviderValues\": () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.CloudProviderValues),\n/* harmony export */   \"HostArchValues\": () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.HostArchValues),\n/* harmony export */   \"OsTypeValues\": () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.OsTypeValues),\n/* harmony export */   \"SemanticResourceAttributes\": () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes),\n/* harmony export */   \"TelemetrySdkLanguageValues\": () => (/* reexport safe */ _resource__WEBPACK_IMPORTED_MODULE_1__.TelemetrySdkLanguageValues)\n/* harmony export */ });\n/* harmony import */ var _trace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trace */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js\");\n/* harmony import */ var _resource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resource */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SemanticResourceAttributes\": () => (/* binding */ SemanticResourceAttributes),\n/* harmony export */   \"CloudProviderValues\": () => (/* binding */ CloudProviderValues),\n/* harmony export */   \"CloudPlatformValues\": () => (/* binding */ CloudPlatformValues),\n/* harmony export */   \"AwsEcsLaunchtypeValues\": () => (/* binding */ AwsEcsLaunchtypeValues),\n/* harmony export */   \"HostArchValues\": () => (/* binding */ HostArchValues),\n/* harmony export */   \"OsTypeValues\": () => (/* binding */ OsTypeValues),\n/* harmony export */   \"TelemetrySdkLanguageValues\": () => (/* binding */ TelemetrySdkLanguageValues)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nvar SemanticResourceAttributes = {\n    /**\n    * Name of the cloud provider.\n    */\n    CLOUD_PROVIDER: 'cloud.provider',\n    /**\n    * The cloud account ID the resource is assigned to.\n    */\n    CLOUD_ACCOUNT_ID: 'cloud.account.id',\n    /**\n    * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n    */\n    CLOUD_REGION: 'cloud.region',\n    /**\n    * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n    *\n    * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n    */\n    CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n    /**\n    * The cloud platform in use.\n    *\n    * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n    */\n    CLOUD_PLATFORM: 'cloud.platform',\n    /**\n    * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n    */\n    AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n    /**\n    * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n    */\n    AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n    /**\n    * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n    */\n    AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n    /**\n    * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n    */\n    AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n    /**\n    * The task definition family this task definition is a member of.\n    */\n    AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n    /**\n    * The revision for this task definition.\n    */\n    AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n    /**\n    * The ARN of an EKS cluster.\n    */\n    AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n    /**\n    * The name(s) of the AWS log group(s) an application is writing to.\n    *\n    * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n    */\n    AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n    /**\n    * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n    *\n    * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n    */\n    AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n    /**\n    * The name(s) of the AWS log stream(s) an application is writing to.\n    */\n    AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n    /**\n    * The ARN(s) of the AWS log stream(s).\n    *\n    * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n    */\n    AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n    /**\n    * Container name.\n    */\n    CONTAINER_NAME: 'container.name',\n    /**\n    * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n    */\n    CONTAINER_ID: 'container.id',\n    /**\n    * The container runtime managing this container.\n    */\n    CONTAINER_RUNTIME: 'container.runtime',\n    /**\n    * Name of the image the container was built on.\n    */\n    CONTAINER_IMAGE_NAME: 'container.image.name',\n    /**\n    * Container image tag.\n    */\n    CONTAINER_IMAGE_TAG: 'container.image.tag',\n    /**\n    * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n    */\n    DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n    /**\n    * A unique identifier representing the device.\n    *\n    * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n    */\n    DEVICE_ID: 'device.id',\n    /**\n    * The model identifier for the device.\n    *\n    * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n    */\n    DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n    /**\n    * The marketing name for the device model.\n    *\n    * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n    */\n    DEVICE_MODEL_NAME: 'device.model.name',\n    /**\n    * The name of the single function that this runtime instance executes.\n    *\n    * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n    */\n    FAAS_NAME: 'faas.name',\n    /**\n    * The unique ID of the single function that this runtime instance executes.\n    *\n    * Note: Depending on the cloud provider, use:\n  \n  * **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the &#34;invoked ARN&#34; directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\n  different aliases.\n  * **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n  * **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n  \n  On some providers, it may not be possible to determine the full ID at startup,\n  which is why this field cannot be made required. For example, on AWS the account ID\n  part of the ARN is not available without calling another AWS API\n  which may be deemed too slow for a short-running lambda function.\n  As an alternative, consider setting `faas.id` as a span attribute instead.\n    */\n    FAAS_ID: 'faas.id',\n    /**\n    * The immutable version of the function being executed.\n    *\n    * Note: Depending on the cloud provider and platform, use:\n  \n  * **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n    (an integer represented as a decimal string).\n  * **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n    (i.e., the function name plus the revision suffix).\n  * **Google Cloud Functions:** The value of the\n    [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n  * **Azure Functions:** Not applicable. Do not set this attribute.\n    */\n    FAAS_VERSION: 'faas.version',\n    /**\n    * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n    *\n    * Note: * **AWS Lambda:** Use the (full) log stream name.\n    */\n    FAAS_INSTANCE: 'faas.instance',\n    /**\n    * The amount of memory available to the serverless function in MiB.\n    *\n    * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n    */\n    FAAS_MAX_MEMORY: 'faas.max_memory',\n    /**\n    * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n    */\n    HOST_ID: 'host.id',\n    /**\n    * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n    */\n    HOST_NAME: 'host.name',\n    /**\n    * Type of host. For Cloud, this must be the machine type.\n    */\n    HOST_TYPE: 'host.type',\n    /**\n    * The CPU architecture the host system is running on.\n    */\n    HOST_ARCH: 'host.arch',\n    /**\n    * Name of the VM image or OS install the host was instantiated from.\n    */\n    HOST_IMAGE_NAME: 'host.image.name',\n    /**\n    * VM image ID. For Cloud, this value is from the provider.\n    */\n    HOST_IMAGE_ID: 'host.image.id',\n    /**\n    * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n    */\n    HOST_IMAGE_VERSION: 'host.image.version',\n    /**\n    * The name of the cluster.\n    */\n    K8S_CLUSTER_NAME: 'k8s.cluster.name',\n    /**\n    * The name of the Node.\n    */\n    K8S_NODE_NAME: 'k8s.node.name',\n    /**\n    * The UID of the Node.\n    */\n    K8S_NODE_UID: 'k8s.node.uid',\n    /**\n    * The name of the namespace that the pod is running in.\n    */\n    K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n    /**\n    * The UID of the Pod.\n    */\n    K8S_POD_UID: 'k8s.pod.uid',\n    /**\n    * The name of the Pod.\n    */\n    K8S_POD_NAME: 'k8s.pod.name',\n    /**\n    * The name of the Container in a Pod template.\n    */\n    K8S_CONTAINER_NAME: 'k8s.container.name',\n    /**\n    * The UID of the ReplicaSet.\n    */\n    K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n    /**\n    * The name of the ReplicaSet.\n    */\n    K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n    /**\n    * The UID of the Deployment.\n    */\n    K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n    /**\n    * The name of the Deployment.\n    */\n    K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n    /**\n    * The UID of the StatefulSet.\n    */\n    K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n    /**\n    * The name of the StatefulSet.\n    */\n    K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n    /**\n    * The UID of the DaemonSet.\n    */\n    K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n    /**\n    * The name of the DaemonSet.\n    */\n    K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n    /**\n    * The UID of the Job.\n    */\n    K8S_JOB_UID: 'k8s.job.uid',\n    /**\n    * The name of the Job.\n    */\n    K8S_JOB_NAME: 'k8s.job.name',\n    /**\n    * The UID of the CronJob.\n    */\n    K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n    /**\n    * The name of the CronJob.\n    */\n    K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n    /**\n    * The operating system type.\n    */\n    OS_TYPE: 'os.type',\n    /**\n    * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n    */\n    OS_DESCRIPTION: 'os.description',\n    /**\n    * Human readable operating system name.\n    */\n    OS_NAME: 'os.name',\n    /**\n    * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n    */\n    OS_VERSION: 'os.version',\n    /**\n    * Process identifier (PID).\n    */\n    PROCESS_PID: 'process.pid',\n    /**\n    * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n    */\n    PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n    /**\n    * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n    */\n    PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n    /**\n    * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n    */\n    PROCESS_COMMAND: 'process.command',\n    /**\n    * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n    */\n    PROCESS_COMMAND_LINE: 'process.command_line',\n    /**\n    * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n    */\n    PROCESS_COMMAND_ARGS: 'process.command_args',\n    /**\n    * The username of the user that owns the process.\n    */\n    PROCESS_OWNER: 'process.owner',\n    /**\n    * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n    */\n    PROCESS_RUNTIME_NAME: 'process.runtime.name',\n    /**\n    * The version of the runtime of this process, as returned by the runtime without modification.\n    */\n    PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n    /**\n    * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n    */\n    PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n    /**\n    * Logical name of the service.\n    *\n    * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n    */\n    SERVICE_NAME: 'service.name',\n    /**\n    * A namespace for `service.name`.\n    *\n    * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n    */\n    SERVICE_NAMESPACE: 'service.namespace',\n    /**\n    * The string ID of the service instance.\n    *\n    * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n    */\n    SERVICE_INSTANCE_ID: 'service.instance.id',\n    /**\n    * The version string of the service API or implementation.\n    */\n    SERVICE_VERSION: 'service.version',\n    /**\n    * The name of the telemetry SDK as defined above.\n    */\n    TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n    /**\n    * The language of the telemetry SDK.\n    */\n    TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n    /**\n    * The version string of the telemetry SDK.\n    */\n    TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n    /**\n    * The version string of the auto instrumentation agent, if used.\n    */\n    TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n    /**\n    * The name of the web engine.\n    */\n    WEBENGINE_NAME: 'webengine.name',\n    /**\n    * The version of the web engine.\n    */\n    WEBENGINE_VERSION: 'webengine.version',\n    /**\n    * Additional description of the web engine (e.g. detailed version and edition information).\n    */\n    WEBENGINE_DESCRIPTION: 'webengine.description',\n};\nvar CloudProviderValues = {\n    /** Alibaba Cloud. */\n    ALIBABA_CLOUD: 'alibaba_cloud',\n    /** Amazon Web Services. */\n    AWS: 'aws',\n    /** Microsoft Azure. */\n    AZURE: 'azure',\n    /** Google Cloud Platform. */\n    GCP: 'gcp',\n};\nvar CloudPlatformValues = {\n    /** Alibaba Cloud Elastic Compute Service. */\n    ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs',\n    /** Alibaba Cloud Function Compute. */\n    ALIBABA_CLOUD_FC: 'alibaba_cloud_fc',\n    /** AWS Elastic Compute Cloud. */\n    AWS_EC2: 'aws_ec2',\n    /** AWS Elastic Container Service. */\n    AWS_ECS: 'aws_ecs',\n    /** AWS Elastic Kubernetes Service. */\n    AWS_EKS: 'aws_eks',\n    /** AWS Lambda. */\n    AWS_LAMBDA: 'aws_lambda',\n    /** AWS Elastic Beanstalk. */\n    AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk',\n    /** Azure Virtual Machines. */\n    AZURE_VM: 'azure_vm',\n    /** Azure Container Instances. */\n    AZURE_CONTAINER_INSTANCES: 'azure_container_instances',\n    /** Azure Kubernetes Service. */\n    AZURE_AKS: 'azure_aks',\n    /** Azure Functions. */\n    AZURE_FUNCTIONS: 'azure_functions',\n    /** Azure App Service. */\n    AZURE_APP_SERVICE: 'azure_app_service',\n    /** Google Cloud Compute Engine (GCE). */\n    GCP_COMPUTE_ENGINE: 'gcp_compute_engine',\n    /** Google Cloud Run. */\n    GCP_CLOUD_RUN: 'gcp_cloud_run',\n    /** Google Cloud Kubernetes Engine (GKE). */\n    GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine',\n    /** Google Cloud Functions (GCF). */\n    GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions',\n    /** Google Cloud App Engine (GAE). */\n    GCP_APP_ENGINE: 'gcp_app_engine',\n};\nvar AwsEcsLaunchtypeValues = {\n    /** ec2. */\n    EC2: 'ec2',\n    /** fargate. */\n    FARGATE: 'fargate',\n};\nvar HostArchValues = {\n    /** AMD64. */\n    AMD64: 'amd64',\n    /** ARM32. */\n    ARM32: 'arm32',\n    /** ARM64. */\n    ARM64: 'arm64',\n    /** Itanium. */\n    IA64: 'ia64',\n    /** 32-bit PowerPC. */\n    PPC32: 'ppc32',\n    /** 64-bit PowerPC. */\n    PPC64: 'ppc64',\n    /** 32-bit x86. */\n    X86: 'x86',\n};\nvar OsTypeValues = {\n    /** Microsoft Windows. */\n    WINDOWS: 'windows',\n    /** Linux. */\n    LINUX: 'linux',\n    /** Apple Darwin. */\n    DARWIN: 'darwin',\n    /** FreeBSD. */\n    FREEBSD: 'freebsd',\n    /** NetBSD. */\n    NETBSD: 'netbsd',\n    /** OpenBSD. */\n    OPENBSD: 'openbsd',\n    /** DragonFly BSD. */\n    DRAGONFLYBSD: 'dragonflybsd',\n    /** HP-UX (Hewlett Packard Unix). */\n    HPUX: 'hpux',\n    /** AIX (Advanced Interactive eXecutive). */\n    AIX: 'aix',\n    /** Oracle Solaris. */\n    SOLARIS: 'solaris',\n    /** IBM z/OS. */\n    Z_OS: 'z_os',\n};\nvar TelemetrySdkLanguageValues = {\n    /** cpp. */\n    CPP: 'cpp',\n    /** dotnet. */\n    DOTNET: 'dotnet',\n    /** erlang. */\n    ERLANG: 'erlang',\n    /** go. */\n    GO: 'go',\n    /** java. */\n    JAVA: 'java',\n    /** nodejs. */\n    NODEJS: 'nodejs',\n    /** php. */\n    PHP: 'php',\n    /** python. */\n    PYTHON: 'python',\n    /** ruby. */\n    RUBY: 'ruby',\n    /** webjs. */\n    WEBJS: 'webjs',\n};\n//# sourceMappingURL=SemanticResourceAttributes.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AwsEcsLaunchtypeValues\": () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.AwsEcsLaunchtypeValues),\n/* harmony export */   \"CloudPlatformValues\": () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CloudPlatformValues),\n/* harmony export */   \"CloudProviderValues\": () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.CloudProviderValues),\n/* harmony export */   \"HostArchValues\": () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.HostArchValues),\n/* harmony export */   \"OsTypeValues\": () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.OsTypeValues),\n/* harmony export */   \"SemanticResourceAttributes\": () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes),\n/* harmony export */   \"TelemetrySdkLanguageValues\": () => (/* reexport safe */ _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__.TelemetrySdkLanguageValues)\n/* harmony export */ });\n/* harmony import */ var _SemanticResourceAttributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SemanticResourceAttributes */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SemanticAttributes\": () => (/* binding */ SemanticAttributes),\n/* harmony export */   \"DbSystemValues\": () => (/* binding */ DbSystemValues),\n/* harmony export */   \"DbCassandraConsistencyLevelValues\": () => (/* binding */ DbCassandraConsistencyLevelValues),\n/* harmony export */   \"FaasTriggerValues\": () => (/* binding */ FaasTriggerValues),\n/* harmony export */   \"FaasDocumentOperationValues\": () => (/* binding */ FaasDocumentOperationValues),\n/* harmony export */   \"FaasInvokedProviderValues\": () => (/* binding */ FaasInvokedProviderValues),\n/* harmony export */   \"NetTransportValues\": () => (/* binding */ NetTransportValues),\n/* harmony export */   \"NetHostConnectionTypeValues\": () => (/* binding */ NetHostConnectionTypeValues),\n/* harmony export */   \"NetHostConnectionSubtypeValues\": () => (/* binding */ NetHostConnectionSubtypeValues),\n/* harmony export */   \"HttpFlavorValues\": () => (/* binding */ HttpFlavorValues),\n/* harmony export */   \"MessagingDestinationKindValues\": () => (/* binding */ MessagingDestinationKindValues),\n/* harmony export */   \"MessagingOperationValues\": () => (/* binding */ MessagingOperationValues),\n/* harmony export */   \"RpcGrpcStatusCodeValues\": () => (/* binding */ RpcGrpcStatusCodeValues),\n/* harmony export */   \"MessageTypeValues\": () => (/* binding */ MessageTypeValues)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nvar SemanticAttributes = {\n    /**\n    * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n    *\n    * Note: This may be different from `faas.id` if an alias is involved.\n    */\n    AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn',\n    /**\n    * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n    */\n    DB_SYSTEM: 'db.system',\n    /**\n    * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n    */\n    DB_CONNECTION_STRING: 'db.connection_string',\n    /**\n    * Username for accessing the database.\n    */\n    DB_USER: 'db.user',\n    /**\n    * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n    */\n    DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname',\n    /**\n    * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n    *\n    * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n    */\n    DB_NAME: 'db.name',\n    /**\n    * The database statement being executed.\n    *\n    * Note: The value may be sanitized to exclude sensitive information.\n    */\n    DB_STATEMENT: 'db.statement',\n    /**\n    * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n    *\n    * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n    */\n    DB_OPERATION: 'db.operation',\n    /**\n    * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n    *\n    * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n    */\n    DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name',\n    /**\n    * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n    */\n    DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace',\n    /**\n    * The fetch size used for paging, i.e. how many rows will be returned at once.\n    */\n    DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size',\n    /**\n    * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n    */\n    DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level',\n    /**\n    * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n    *\n    * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n    */\n    DB_CASSANDRA_TABLE: 'db.cassandra.table',\n    /**\n    * Whether or not the query is idempotent.\n    */\n    DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence',\n    /**\n    * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n    */\n    DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: 'db.cassandra.speculative_execution_count',\n    /**\n    * The ID of the coordinating node for a query.\n    */\n    DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id',\n    /**\n    * The data center of the coordinating node for a query.\n    */\n    DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc',\n    /**\n    * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n    */\n    DB_HBASE_NAMESPACE: 'db.hbase.namespace',\n    /**\n    * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n    */\n    DB_REDIS_DATABASE_INDEX: 'db.redis.database_index',\n    /**\n    * The collection being accessed within the database stated in `db.name`.\n    */\n    DB_MONGODB_COLLECTION: 'db.mongodb.collection',\n    /**\n    * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n    *\n    * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n    */\n    DB_SQL_TABLE: 'db.sql.table',\n    /**\n    * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n    */\n    EXCEPTION_TYPE: 'exception.type',\n    /**\n    * The exception message.\n    */\n    EXCEPTION_MESSAGE: 'exception.message',\n    /**\n    * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n    */\n    EXCEPTION_STACKTRACE: 'exception.stacktrace',\n    /**\n    * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n    *\n    * Note: An exception is considered to have escaped (or left) the scope of a span,\n  if that span is ended while the exception is still logically &#34;in flight&#34;.\n  This may be actually &#34;in flight&#34; in some languages (e.g. if the exception\n  is passed to a Context manager&#39;s `__exit__` method in Python) but will\n  usually be caught at the point of recording the exception in most languages.\n  \n  It is usually not possible to determine at the point where an exception is thrown\n  whether it will escape the scope of a span.\n  However, it is trivial to know that an exception\n  will escape, if one checks for an active exception just before ending the span,\n  as done in the [example above](#exception-end-example).\n  \n  It follows that an exception may still escape the scope of the span\n  even if the `exception.escaped` attribute was not set or set to false,\n  since the event might have been recorded at a time where it was not\n  clear whether the exception will escape.\n    */\n    EXCEPTION_ESCAPED: 'exception.escaped',\n    /**\n    * Type of the trigger on which the function is executed.\n    */\n    FAAS_TRIGGER: 'faas.trigger',\n    /**\n    * The execution ID of the current function execution.\n    */\n    FAAS_EXECUTION: 'faas.execution',\n    /**\n    * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n    */\n    FAAS_DOCUMENT_COLLECTION: 'faas.document.collection',\n    /**\n    * Describes the type of the operation that was performed on the data.\n    */\n    FAAS_DOCUMENT_OPERATION: 'faas.document.operation',\n    /**\n    * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n    */\n    FAAS_DOCUMENT_TIME: 'faas.document.time',\n    /**\n    * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n    */\n    FAAS_DOCUMENT_NAME: 'faas.document.name',\n    /**\n    * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n    */\n    FAAS_TIME: 'faas.time',\n    /**\n    * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n    */\n    FAAS_CRON: 'faas.cron',\n    /**\n    * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n    */\n    FAAS_COLDSTART: 'faas.coldstart',\n    /**\n    * The name of the invoked function.\n    *\n    * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n    */\n    FAAS_INVOKED_NAME: 'faas.invoked_name',\n    /**\n    * The cloud provider of the invoked function.\n    *\n    * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n    */\n    FAAS_INVOKED_PROVIDER: 'faas.invoked_provider',\n    /**\n    * The cloud region of the invoked function.\n    *\n    * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n    */\n    FAAS_INVOKED_REGION: 'faas.invoked_region',\n    /**\n    * Transport protocol used. See note below.\n    */\n    NET_TRANSPORT: 'net.transport',\n    /**\n    * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n    */\n    NET_PEER_IP: 'net.peer.ip',\n    /**\n    * Remote port number.\n    */\n    NET_PEER_PORT: 'net.peer.port',\n    /**\n    * Remote hostname or similar, see note below.\n    */\n    NET_PEER_NAME: 'net.peer.name',\n    /**\n    * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n    */\n    NET_HOST_IP: 'net.host.ip',\n    /**\n    * Like `net.peer.port` but for the host port.\n    */\n    NET_HOST_PORT: 'net.host.port',\n    /**\n    * Local hostname or similar, see note below.\n    */\n    NET_HOST_NAME: 'net.host.name',\n    /**\n    * The internet connection type currently being used by the host.\n    */\n    NET_HOST_CONNECTION_TYPE: 'net.host.connection.type',\n    /**\n    * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n    */\n    NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype',\n    /**\n    * The name of the mobile carrier.\n    */\n    NET_HOST_CARRIER_NAME: 'net.host.carrier.name',\n    /**\n    * The mobile carrier country code.\n    */\n    NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc',\n    /**\n    * The mobile carrier network code.\n    */\n    NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc',\n    /**\n    * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n    */\n    NET_HOST_CARRIER_ICC: 'net.host.carrier.icc',\n    /**\n    * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n    */\n    PEER_SERVICE: 'peer.service',\n    /**\n    * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n    */\n    ENDUSER_ID: 'enduser.id',\n    /**\n    * Actual/assumed role the client is making the request under extracted from token or application security context.\n    */\n    ENDUSER_ROLE: 'enduser.role',\n    /**\n    * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n    */\n    ENDUSER_SCOPE: 'enduser.scope',\n    /**\n    * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n    */\n    THREAD_ID: 'thread.id',\n    /**\n    * Current thread name.\n    */\n    THREAD_NAME: 'thread.name',\n    /**\n    * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n    */\n    CODE_FUNCTION: 'code.function',\n    /**\n    * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n    */\n    CODE_NAMESPACE: 'code.namespace',\n    /**\n    * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n    */\n    CODE_FILEPATH: 'code.filepath',\n    /**\n    * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n    */\n    CODE_LINENO: 'code.lineno',\n    /**\n    * HTTP request method.\n    */\n    HTTP_METHOD: 'http.method',\n    /**\n    * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n    *\n    * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n    */\n    HTTP_URL: 'http.url',\n    /**\n    * The full request target as passed in a HTTP request line or equivalent.\n    */\n    HTTP_TARGET: 'http.target',\n    /**\n    * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n    *\n    * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n    */\n    HTTP_HOST: 'http.host',\n    /**\n    * The URI scheme identifying the used protocol.\n    */\n    HTTP_SCHEME: 'http.scheme',\n    /**\n    * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n    */\n    HTTP_STATUS_CODE: 'http.status_code',\n    /**\n    * Kind of HTTP protocol used.\n    *\n    * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n    */\n    HTTP_FLAVOR: 'http.flavor',\n    /**\n    * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n    */\n    HTTP_USER_AGENT: 'http.user_agent',\n    /**\n    * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n    */\n    HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length',\n    /**\n    * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n    */\n    HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: 'http.request_content_length_uncompressed',\n    /**\n    * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n    */\n    HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length',\n    /**\n    * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n    */\n    HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: 'http.response_content_length_uncompressed',\n    /**\n    * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n    *\n    * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n    */\n    HTTP_SERVER_NAME: 'http.server_name',\n    /**\n    * The matched route (path template).\n    */\n    HTTP_ROUTE: 'http.route',\n    /**\n    * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n    *\n    * Note: This is not necessarily the same as `net.peer.ip`, which would\n  identify the network-level peer, which may be a proxy.\n  \n  This attribute should be set when a source of information different\n  from the one used for `net.peer.ip`, is available even if that other\n  source just confirms the same value as `net.peer.ip`.\n  Rationale: For `net.peer.ip`, one typically does not know if it\n  comes from a proxy, reverse proxy, or the actual client. Setting\n  `http.client_ip` when it&#39;s the same as `net.peer.ip` means that\n  one is at least somewhat confident that the address is not that of\n  the closest proxy.\n    */\n    HTTP_CLIENT_IP: 'http.client_ip',\n    /**\n    * The keys in the `RequestItems` object field.\n    */\n    AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names',\n    /**\n    * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n    */\n    AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity',\n    /**\n    * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n    */\n    AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics',\n    /**\n    * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n    */\n    AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: 'aws.dynamodb.provisioned_read_capacity',\n    /**\n    * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n    */\n    AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: 'aws.dynamodb.provisioned_write_capacity',\n    /**\n    * The value of the `ConsistentRead` request parameter.\n    */\n    AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read',\n    /**\n    * The value of the `ProjectionExpression` request parameter.\n    */\n    AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection',\n    /**\n    * The value of the `Limit` request parameter.\n    */\n    AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit',\n    /**\n    * The value of the `AttributesToGet` request parameter.\n    */\n    AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get',\n    /**\n    * The value of the `IndexName` request parameter.\n    */\n    AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name',\n    /**\n    * The value of the `Select` request parameter.\n    */\n    AWS_DYNAMODB_SELECT: 'aws.dynamodb.select',\n    /**\n    * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n    */\n    AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: 'aws.dynamodb.global_secondary_indexes',\n    /**\n    * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n    */\n    AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes',\n    /**\n    * The value of the `ExclusiveStartTableName` request parameter.\n    */\n    AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table',\n    /**\n    * The the number of items in the `TableNames` response parameter.\n    */\n    AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count',\n    /**\n    * The value of the `ScanIndexForward` request parameter.\n    */\n    AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward',\n    /**\n    * The value of the `Segment` request parameter.\n    */\n    AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment',\n    /**\n    * The value of the `TotalSegments` request parameter.\n    */\n    AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments',\n    /**\n    * The value of the `Count` response parameter.\n    */\n    AWS_DYNAMODB_COUNT: 'aws.dynamodb.count',\n    /**\n    * The value of the `ScannedCount` response parameter.\n    */\n    AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count',\n    /**\n    * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n    */\n    AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions',\n    /**\n    * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n    */\n    AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: 'aws.dynamodb.global_secondary_index_updates',\n    /**\n    * A string identifying the messaging system.\n    */\n    MESSAGING_SYSTEM: 'messaging.system',\n    /**\n    * The message destination name. This might be equal to the span name but is required nevertheless.\n    */\n    MESSAGING_DESTINATION: 'messaging.destination',\n    /**\n    * The kind of message destination.\n    */\n    MESSAGING_DESTINATION_KIND: 'messaging.destination_kind',\n    /**\n    * A boolean that is true if the message destination is temporary.\n    */\n    MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination',\n    /**\n    * The name of the transport protocol.\n    */\n    MESSAGING_PROTOCOL: 'messaging.protocol',\n    /**\n    * The version of the transport protocol.\n    */\n    MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version',\n    /**\n    * Connection string.\n    */\n    MESSAGING_URL: 'messaging.url',\n    /**\n    * A value used by the messaging system as an identifier for the message, represented as a string.\n    */\n    MESSAGING_MESSAGE_ID: 'messaging.message_id',\n    /**\n    * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n    */\n    MESSAGING_CONVERSATION_ID: 'messaging.conversation_id',\n    /**\n    * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n    */\n    MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes',\n    /**\n    * The compressed size of the message payload in bytes.\n    */\n    MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: 'messaging.message_payload_compressed_size_bytes',\n    /**\n    * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n    */\n    MESSAGING_OPERATION: 'messaging.operation',\n    /**\n    * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n    */\n    MESSAGING_CONSUMER_ID: 'messaging.consumer_id',\n    /**\n    * RabbitMQ message routing key.\n    */\n    MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key',\n    /**\n    * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n    *\n    * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n    */\n    MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key',\n    /**\n    * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n    */\n    MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group',\n    /**\n    * Client Id for the Consumer or Producer that is handling the message.\n    */\n    MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id',\n    /**\n    * Partition the message is sent to.\n    */\n    MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition',\n    /**\n    * A boolean that is true if the message is a tombstone.\n    */\n    MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone',\n    /**\n    * A string identifying the remoting system.\n    */\n    RPC_SYSTEM: 'rpc.system',\n    /**\n    * The full (logical) name of the service being called, including its package name, if applicable.\n    *\n    * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n    */\n    RPC_SERVICE: 'rpc.service',\n    /**\n    * The name of the (logical) method being called, must be equal to the $method part in the span name.\n    *\n    * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n    */\n    RPC_METHOD: 'rpc.method',\n    /**\n    * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n    */\n    RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code',\n    /**\n    * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n    */\n    RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version',\n    /**\n    * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n    */\n    RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id',\n    /**\n    * `error.code` property of response if it is an error response.\n    */\n    RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code',\n    /**\n    * `error.message` property of response if it is an error response.\n    */\n    RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message',\n    /**\n    * Whether this is a received or sent message.\n    */\n    MESSAGE_TYPE: 'message.type',\n    /**\n    * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n    *\n    * Note: This way we guarantee that the values will be consistent between different implementations.\n    */\n    MESSAGE_ID: 'message.id',\n    /**\n    * Compressed size of the message in bytes.\n    */\n    MESSAGE_COMPRESSED_SIZE: 'message.compressed_size',\n    /**\n    * Uncompressed size of the message in bytes.\n    */\n    MESSAGE_UNCOMPRESSED_SIZE: 'message.uncompressed_size',\n};\nvar DbSystemValues = {\n    /** Some other SQL database. Fallback only. See notes. */\n    OTHER_SQL: 'other_sql',\n    /** Microsoft SQL Server. */\n    MSSQL: 'mssql',\n    /** MySQL. */\n    MYSQL: 'mysql',\n    /** Oracle Database. */\n    ORACLE: 'oracle',\n    /** IBM Db2. */\n    DB2: 'db2',\n    /** PostgreSQL. */\n    POSTGRESQL: 'postgresql',\n    /** Amazon Redshift. */\n    REDSHIFT: 'redshift',\n    /** Apache Hive. */\n    HIVE: 'hive',\n    /** Cloudscape. */\n    CLOUDSCAPE: 'cloudscape',\n    /** HyperSQL DataBase. */\n    HSQLDB: 'hsqldb',\n    /** Progress Database. */\n    PROGRESS: 'progress',\n    /** SAP MaxDB. */\n    MAXDB: 'maxdb',\n    /** SAP HANA. */\n    HANADB: 'hanadb',\n    /** Ingres. */\n    INGRES: 'ingres',\n    /** FirstSQL. */\n    FIRSTSQL: 'firstsql',\n    /** EnterpriseDB. */\n    EDB: 'edb',\n    /** InterSystems CachÃ©. */\n    CACHE: 'cache',\n    /** Adabas (Adaptable Database System). */\n    ADABAS: 'adabas',\n    /** Firebird. */\n    FIREBIRD: 'firebird',\n    /** Apache Derby. */\n    DERBY: 'derby',\n    /** FileMaker. */\n    FILEMAKER: 'filemaker',\n    /** Informix. */\n    INFORMIX: 'informix',\n    /** InstantDB. */\n    INSTANTDB: 'instantdb',\n    /** InterBase. */\n    INTERBASE: 'interbase',\n    /** MariaDB. */\n    MARIADB: 'mariadb',\n    /** Netezza. */\n    NETEZZA: 'netezza',\n    /** Pervasive PSQL. */\n    PERVASIVE: 'pervasive',\n    /** PointBase. */\n    POINTBASE: 'pointbase',\n    /** SQLite. */\n    SQLITE: 'sqlite',\n    /** Sybase. */\n    SYBASE: 'sybase',\n    /** Teradata. */\n    TERADATA: 'teradata',\n    /** Vertica. */\n    VERTICA: 'vertica',\n    /** H2. */\n    H2: 'h2',\n    /** ColdFusion IMQ. */\n    COLDFUSION: 'coldfusion',\n    /** Apache Cassandra. */\n    CASSANDRA: 'cassandra',\n    /** Apache HBase. */\n    HBASE: 'hbase',\n    /** MongoDB. */\n    MONGODB: 'mongodb',\n    /** Redis. */\n    REDIS: 'redis',\n    /** Couchbase. */\n    COUCHBASE: 'couchbase',\n    /** CouchDB. */\n    COUCHDB: 'couchdb',\n    /** Microsoft Azure Cosmos DB. */\n    COSMOSDB: 'cosmosdb',\n    /** Amazon DynamoDB. */\n    DYNAMODB: 'dynamodb',\n    /** Neo4j. */\n    NEO4J: 'neo4j',\n    /** Apache Geode. */\n    GEODE: 'geode',\n    /** Elasticsearch. */\n    ELASTICSEARCH: 'elasticsearch',\n    /** Memcached. */\n    MEMCACHED: 'memcached',\n    /** CockroachDB. */\n    COCKROACHDB: 'cockroachdb',\n};\nvar DbCassandraConsistencyLevelValues = {\n    /** all. */\n    ALL: 'all',\n    /** each_quorum. */\n    EACH_QUORUM: 'each_quorum',\n    /** quorum. */\n    QUORUM: 'quorum',\n    /** local_quorum. */\n    LOCAL_QUORUM: 'local_quorum',\n    /** one. */\n    ONE: 'one',\n    /** two. */\n    TWO: 'two',\n    /** three. */\n    THREE: 'three',\n    /** local_one. */\n    LOCAL_ONE: 'local_one',\n    /** any. */\n    ANY: 'any',\n    /** serial. */\n    SERIAL: 'serial',\n    /** local_serial. */\n    LOCAL_SERIAL: 'local_serial',\n};\nvar FaasTriggerValues = {\n    /** A response to some data source operation such as a database or filesystem read/write. */\n    DATASOURCE: 'datasource',\n    /** To provide an answer to an inbound HTTP request. */\n    HTTP: 'http',\n    /** A function is set to be executed when messages are sent to a messaging system. */\n    PUBSUB: 'pubsub',\n    /** A function is scheduled to be executed regularly. */\n    TIMER: 'timer',\n    /** If none of the others apply. */\n    OTHER: 'other',\n};\nvar FaasDocumentOperationValues = {\n    /** When a new object is created. */\n    INSERT: 'insert',\n    /** When an object is modified. */\n    EDIT: 'edit',\n    /** When an object is deleted. */\n    DELETE: 'delete',\n};\nvar FaasInvokedProviderValues = {\n    /** Alibaba Cloud. */\n    ALIBABA_CLOUD: 'alibaba_cloud',\n    /** Amazon Web Services. */\n    AWS: 'aws',\n    /** Microsoft Azure. */\n    AZURE: 'azure',\n    /** Google Cloud Platform. */\n    GCP: 'gcp',\n};\nvar NetTransportValues = {\n    /** ip_tcp. */\n    IP_TCP: 'ip_tcp',\n    /** ip_udp. */\n    IP_UDP: 'ip_udp',\n    /** Another IP-based protocol. */\n    IP: 'ip',\n    /** Unix Domain socket. See below. */\n    UNIX: 'unix',\n    /** Named or anonymous pipe. See note below. */\n    PIPE: 'pipe',\n    /** In-process communication. */\n    INPROC: 'inproc',\n    /** Something else (non IP-based). */\n    OTHER: 'other',\n};\nvar NetHostConnectionTypeValues = {\n    /** wifi. */\n    WIFI: 'wifi',\n    /** wired. */\n    WIRED: 'wired',\n    /** cell. */\n    CELL: 'cell',\n    /** unavailable. */\n    UNAVAILABLE: 'unavailable',\n    /** unknown. */\n    UNKNOWN: 'unknown',\n};\nvar NetHostConnectionSubtypeValues = {\n    /** GPRS. */\n    GPRS: 'gprs',\n    /** EDGE. */\n    EDGE: 'edge',\n    /** UMTS. */\n    UMTS: 'umts',\n    /** CDMA. */\n    CDMA: 'cdma',\n    /** EVDO Rel. 0. */\n    EVDO_0: 'evdo_0',\n    /** EVDO Rev. A. */\n    EVDO_A: 'evdo_a',\n    /** CDMA2000 1XRTT. */\n    CDMA2000_1XRTT: 'cdma2000_1xrtt',\n    /** HSDPA. */\n    HSDPA: 'hsdpa',\n    /** HSUPA. */\n    HSUPA: 'hsupa',\n    /** HSPA. */\n    HSPA: 'hspa',\n    /** IDEN. */\n    IDEN: 'iden',\n    /** EVDO Rev. B. */\n    EVDO_B: 'evdo_b',\n    /** LTE. */\n    LTE: 'lte',\n    /** EHRPD. */\n    EHRPD: 'ehrpd',\n    /** HSPAP. */\n    HSPAP: 'hspap',\n    /** GSM. */\n    GSM: 'gsm',\n    /** TD-SCDMA. */\n    TD_SCDMA: 'td_scdma',\n    /** IWLAN. */\n    IWLAN: 'iwlan',\n    /** 5G NR (New Radio). */\n    NR: 'nr',\n    /** 5G NRNSA (New Radio Non-Standalone). */\n    NRNSA: 'nrnsa',\n    /** LTE CA. */\n    LTE_CA: 'lte_ca',\n};\nvar HttpFlavorValues = {\n    /** HTTP 1.0. */\n    HTTP_1_0: '1.0',\n    /** HTTP 1.1. */\n    HTTP_1_1: '1.1',\n    /** HTTP 2. */\n    HTTP_2_0: '2.0',\n    /** SPDY protocol. */\n    SPDY: 'SPDY',\n    /** QUIC protocol. */\n    QUIC: 'QUIC',\n};\nvar MessagingDestinationKindValues = {\n    /** A message sent to a queue. */\n    QUEUE: 'queue',\n    /** A message sent to a topic. */\n    TOPIC: 'topic',\n};\nvar MessagingOperationValues = {\n    /** receive. */\n    RECEIVE: 'receive',\n    /** process. */\n    PROCESS: 'process',\n};\nvar RpcGrpcStatusCodeValues = {\n    /** OK. */\n    OK: 0,\n    /** CANCELLED. */\n    CANCELLED: 1,\n    /** UNKNOWN. */\n    UNKNOWN: 2,\n    /** INVALID_ARGUMENT. */\n    INVALID_ARGUMENT: 3,\n    /** DEADLINE_EXCEEDED. */\n    DEADLINE_EXCEEDED: 4,\n    /** NOT_FOUND. */\n    NOT_FOUND: 5,\n    /** ALREADY_EXISTS. */\n    ALREADY_EXISTS: 6,\n    /** PERMISSION_DENIED. */\n    PERMISSION_DENIED: 7,\n    /** RESOURCE_EXHAUSTED. */\n    RESOURCE_EXHAUSTED: 8,\n    /** FAILED_PRECONDITION. */\n    FAILED_PRECONDITION: 9,\n    /** ABORTED. */\n    ABORTED: 10,\n    /** OUT_OF_RANGE. */\n    OUT_OF_RANGE: 11,\n    /** UNIMPLEMENTED. */\n    UNIMPLEMENTED: 12,\n    /** INTERNAL. */\n    INTERNAL: 13,\n    /** UNAVAILABLE. */\n    UNAVAILABLE: 14,\n    /** DATA_LOSS. */\n    DATA_LOSS: 15,\n    /** UNAUTHENTICATED. */\n    UNAUTHENTICATED: 16,\n};\nvar MessageTypeValues = {\n    /** sent. */\n    SENT: 'SENT',\n    /** received. */\n    RECEIVED: 'RECEIVED',\n};\n//# sourceMappingURL=SemanticAttributes.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DbCassandraConsistencyLevelValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DbCassandraConsistencyLevelValues),\n/* harmony export */   \"DbSystemValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.DbSystemValues),\n/* harmony export */   \"FaasDocumentOperationValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FaasDocumentOperationValues),\n/* harmony export */   \"FaasInvokedProviderValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FaasInvokedProviderValues),\n/* harmony export */   \"FaasTriggerValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.FaasTriggerValues),\n/* harmony export */   \"HttpFlavorValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.HttpFlavorValues),\n/* harmony export */   \"MessageTypeValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MessageTypeValues),\n/* harmony export */   \"MessagingDestinationKindValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MessagingDestinationKindValues),\n/* harmony export */   \"MessagingOperationValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.MessagingOperationValues),\n/* harmony export */   \"NetHostConnectionSubtypeValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NetHostConnectionSubtypeValues),\n/* harmony export */   \"NetHostConnectionTypeValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NetHostConnectionTypeValues),\n/* harmony export */   \"NetTransportValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.NetTransportValues),\n/* harmony export */   \"RpcGrpcStatusCodeValues\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.RpcGrpcStatusCodeValues),\n/* harmony export */   \"SemanticAttributes\": () => (/* reexport safe */ _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__.SemanticAttributes)\n/* harmony export */ });\n/* harmony import */ var _SemanticAttributes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SemanticAttributes */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js?");

/***/ }),

/***/ "./node_modules/shimmer/index.js":
/*!***************************************!*\
  !*** ./node_modules/shimmer/index.js ***!
  \***************************************/
/***/ ((module) => {

eval("\n\nfunction isFunction (funktion) {\n  return typeof funktion === 'function'\n}\n\n// Default to complaining loudly when things don't go according to plan.\nvar logger = console.error.bind(console)\n\n// Sets a property on an object, preserving its enumerability.\n// This function assumes that the property is already writable.\nfunction defineProperty (obj, name, value) {\n  var enumerable = !!obj[name] && obj.propertyIsEnumerable(name)\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: enumerable,\n    writable: true,\n    value: value\n  })\n}\n\n// Keep initialization idempotent.\nfunction shimmer (options) {\n  if (options && options.logger) {\n    if (!isFunction(options.logger)) logger(\"new logger isn't a function, not replacing\")\n    else logger = options.logger\n  }\n}\n\nfunction wrap (nodule, name, wrapper) {\n  if (!nodule || !nodule[name]) {\n    logger('no original function ' + name + ' to wrap')\n    return\n  }\n\n  if (!wrapper) {\n    logger('no wrapper function')\n    logger((new Error()).stack)\n    return\n  }\n\n  if (!isFunction(nodule[name]) || !isFunction(wrapper)) {\n    logger('original object and wrapper must be functions')\n    return\n  }\n\n  var original = nodule[name]\n  var wrapped = wrapper(original, name)\n\n  defineProperty(wrapped, '__original', original)\n  defineProperty(wrapped, '__unwrap', function () {\n    if (nodule[name] === wrapped) defineProperty(nodule, name, original)\n  })\n  defineProperty(wrapped, '__wrapped', true)\n\n  defineProperty(nodule, name, wrapped)\n  return wrapped\n}\n\nfunction massWrap (nodules, names, wrapper) {\n  if (!nodules) {\n    logger('must provide one or more modules to patch')\n    logger((new Error()).stack)\n    return\n  } else if (!Array.isArray(nodules)) {\n    nodules = [nodules]\n  }\n\n  if (!(names && Array.isArray(names))) {\n    logger('must provide one or more functions to wrap on modules')\n    return\n  }\n\n  nodules.forEach(function (nodule) {\n    names.forEach(function (name) {\n      wrap(nodule, name, wrapper)\n    })\n  })\n}\n\nfunction unwrap (nodule, name) {\n  if (!nodule || !nodule[name]) {\n    logger('no function to unwrap.')\n    logger((new Error()).stack)\n    return\n  }\n\n  if (!nodule[name].__unwrap) {\n    logger('no original to unwrap to -- has ' + name + ' already been unwrapped?')\n  } else {\n    return nodule[name].__unwrap()\n  }\n}\n\nfunction massUnwrap (nodules, names) {\n  if (!nodules) {\n    logger('must provide one or more modules to patch')\n    logger((new Error()).stack)\n    return\n  } else if (!Array.isArray(nodules)) {\n    nodules = [nodules]\n  }\n\n  if (!(names && Array.isArray(names))) {\n    logger('must provide one or more functions to unwrap on modules')\n    return\n  }\n\n  nodules.forEach(function (nodule) {\n    names.forEach(function (name) {\n      unwrap(nodule, name)\n    })\n  })\n}\n\nshimmer.wrap = wrap\nshimmer.massWrap = massWrap\nshimmer.unwrap = unwrap\nshimmer.massUnwrap = massUnwrap\n\nmodule.exports = shimmer\n\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/shimmer/index.js?");

/***/ }),

/***/ "./node_modules/zone.js/fesm2015/zone.js":
/*!***********************************************!*\
  !*** ./node_modules/zone.js/fesm2015/zone.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * @license Angular v12.0.0-next.0\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst Zone$1 = (function (global) {\n    const performance = global['performance'];\n    function mark(name) {\n        performance && performance['mark'] && performance['mark'](name);\n    }\n    function performanceMeasure(name, label) {\n        performance && performance['measure'] && performance['measure'](name, label);\n    }\n    mark('Zone');\n    // Initialize before it's accessed below.\n    // __Zone_symbol_prefix global can be used to override the default zone\n    // symbol prefix with a custom one if needed.\n    const symbolPrefix = global['__Zone_symbol_prefix'] || '__zone_symbol__';\n    function __symbol__(name) {\n        return symbolPrefix + name;\n    }\n    const checkDuplicate = global[__symbol__('forceDuplicateZoneCheck')] === true;\n    if (global['Zone']) {\n        // if global['Zone'] already exists (maybe zone.js was already loaded or\n        // some other lib also registered a global object named Zone), we may need\n        // to throw an error, but sometimes user may not want this error.\n        // For example,\n        // we have two web pages, page1 includes zone.js, page2 doesn't.\n        // and the 1st time user load page1 and page2, everything work fine,\n        // but when user load page2 again, error occurs because global['Zone'] already exists.\n        // so we add a flag to let user choose whether to throw this error or not.\n        // By default, if existing Zone is from zone.js, we will not throw the error.\n        if (checkDuplicate || typeof global['Zone'].__symbol__ !== 'function') {\n            throw new Error('Zone already loaded.');\n        }\n        else {\n            return global['Zone'];\n        }\n    }\n    class Zone {\n        constructor(parent, zoneSpec) {\n            this._parent = parent;\n            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\n            this._properties = zoneSpec && zoneSpec.properties || {};\n            this._zoneDelegate =\n                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\n        }\n        static assertZonePatched() {\n            if (global['Promise'] !== patches['ZoneAwarePromise']) {\n                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\n                    'has been overwritten.\\n' +\n                    'Most likely cause is that a Promise polyfill has been loaded ' +\n                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\n                    'If you must load one, do so before loading zone.js.)');\n            }\n        }\n        static get root() {\n            let zone = Zone.current;\n            while (zone.parent) {\n                zone = zone.parent;\n            }\n            return zone;\n        }\n        static get current() {\n            return _currentZoneFrame.zone;\n        }\n        static get currentTask() {\n            return _currentTask;\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        static __load_patch(name, fn, ignoreDuplicate = false) {\n            if (patches.hasOwnProperty(name)) {\n                // `checkDuplicate` option is defined from global variable\n                // so it works for all modules.\n                // `ignoreDuplicate` can work for the specified module\n                if (!ignoreDuplicate && checkDuplicate) {\n                    throw Error('Already loaded patch: ' + name);\n                }\n            }\n            else if (!global['__Zone_disable_' + name]) {\n                const perfName = 'Zone:' + name;\n                mark(perfName);\n                patches[name] = fn(global, Zone, _api);\n                performanceMeasure(perfName, perfName);\n            }\n        }\n        get parent() {\n            return this._parent;\n        }\n        get name() {\n            return this._name;\n        }\n        get(key) {\n            const zone = this.getZoneWith(key);\n            if (zone)\n                return zone._properties[key];\n        }\n        getZoneWith(key) {\n            let current = this;\n            while (current) {\n                if (current._properties.hasOwnProperty(key)) {\n                    return current;\n                }\n                current = current._parent;\n            }\n            return null;\n        }\n        fork(zoneSpec) {\n            if (!zoneSpec)\n                throw new Error('ZoneSpec required!');\n            return this._zoneDelegate.fork(this, zoneSpec);\n        }\n        wrap(callback, source) {\n            if (typeof callback !== 'function') {\n                throw new Error('Expecting function got: ' + callback);\n            }\n            const _callback = this._zoneDelegate.intercept(this, callback, source);\n            const zone = this;\n            return function () {\n                return zone.runGuarded(_callback, this, arguments, source);\n            };\n        }\n        run(callback, applyThis, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runGuarded(callback, applyThis = null, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                try {\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runTask(task, applyThis, applyArgs) {\n            if (task.zone != this) {\n                throw new Error('A task can only be run in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            }\n            // https://github.com/angular/zone.js/issues/778, sometimes eventTask\n            // will run in notScheduled(canceled) state, we should not try to\n            // run such kind of task but just return\n            if (task.state === notScheduled && (task.type === eventTask || task.type === macroTask)) {\n                return;\n            }\n            const reEntryGuard = task.state != running;\n            reEntryGuard && task._transitionTo(running, scheduled);\n            task.runCount++;\n            const previousTask = _currentTask;\n            _currentTask = task;\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                if (task.type == macroTask && task.data && !task.data.isPeriodic) {\n                    task.cancelFn = undefined;\n                }\n                try {\n                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                // if the task's state is notScheduled or unknown, then it has already been cancelled\n                // we should not reset the state to scheduled\n                if (task.state !== notScheduled && task.state !== unknown) {\n                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {\n                        reEntryGuard && task._transitionTo(scheduled, running);\n                    }\n                    else {\n                        task.runCount = 0;\n                        this._updateTaskCount(task, -1);\n                        reEntryGuard &&\n                            task._transitionTo(notScheduled, running, notScheduled);\n                    }\n                }\n                _currentZoneFrame = _currentZoneFrame.parent;\n                _currentTask = previousTask;\n            }\n        }\n        scheduleTask(task) {\n            if (task.zone && task.zone !== this) {\n                // check if the task was rescheduled, the newZone\n                // should not be the children of the original zone\n                let newZone = this;\n                while (newZone) {\n                    if (newZone === task.zone) {\n                        throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${task.zone.name}`);\n                    }\n                    newZone = newZone.parent;\n                }\n            }\n            task._transitionTo(scheduling, notScheduled);\n            const zoneDelegates = [];\n            task._zoneDelegates = zoneDelegates;\n            task._zone = this;\n            try {\n                task = this._zoneDelegate.scheduleTask(this, task);\n            }\n            catch (err) {\n                // should set task's state to unknown when scheduleTask throw error\n                // because the err may from reschedule, so the fromState maybe notScheduled\n                task._transitionTo(unknown, scheduling, notScheduled);\n                // TODO: @JiaLiPassion, should we check the result from handleError?\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            if (task._zoneDelegates === zoneDelegates) {\n                // we have to check because internally the delegate can reschedule the task.\n                this._updateTaskCount(task, 1);\n            }\n            if (task.state == scheduling) {\n                task._transitionTo(scheduled, scheduling);\n            }\n            return task;\n        }\n        scheduleMicroTask(source, callback, data, customSchedule) {\n            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, undefined));\n        }\n        scheduleMacroTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));\n        }\n        scheduleEventTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));\n        }\n        cancelTask(task) {\n            if (task.zone != this)\n                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            task._transitionTo(canceling, scheduled, running);\n            try {\n                this._zoneDelegate.cancelTask(this, task);\n            }\n            catch (err) {\n                // if error occurs when cancelTask, transit the state to unknown\n                task._transitionTo(unknown, canceling);\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            this._updateTaskCount(task, -1);\n            task._transitionTo(notScheduled, canceling);\n            task.runCount = 0;\n            return task;\n        }\n        _updateTaskCount(task, count) {\n            const zoneDelegates = task._zoneDelegates;\n            if (count == -1) {\n                task._zoneDelegates = null;\n            }\n            for (let i = 0; i < zoneDelegates.length; i++) {\n                zoneDelegates[i]._updateTaskCount(task.type, count);\n            }\n        }\n    }\n    // tslint:disable-next-line:require-internal-with-underscore\n    Zone.__symbol__ = __symbol__;\n    const DELEGATE_ZS = {\n        name: '',\n        onHasTask: (delegate, _, target, hasTaskState) => delegate.hasTask(target, hasTaskState),\n        onScheduleTask: (delegate, _, target, task) => delegate.scheduleTask(target, task),\n        onInvokeTask: (delegate, _, target, task, applyThis, applyArgs) => delegate.invokeTask(target, task, applyThis, applyArgs),\n        onCancelTask: (delegate, _, target, task) => delegate.cancelTask(target, task)\n    };\n    class ZoneDelegate {\n        constructor(zone, parentDelegate, zoneSpec) {\n            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };\n            this.zone = zone;\n            this._parentDelegate = parentDelegate;\n            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\n            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\n            this._forkCurrZone =\n                zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate._forkCurrZone);\n            this._interceptZS =\n                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\n            this._interceptDlgt =\n                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\n            this._interceptCurrZone =\n                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate._interceptCurrZone);\n            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\n            this._invokeDlgt =\n                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\n            this._invokeCurrZone =\n                zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate._invokeCurrZone);\n            this._handleErrorZS =\n                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\n            this._handleErrorDlgt =\n                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\n            this._handleErrorCurrZone =\n                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate._handleErrorCurrZone);\n            this._scheduleTaskZS =\n                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\n            this._scheduleTaskDlgt = zoneSpec &&\n                (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\n            this._scheduleTaskCurrZone =\n                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate._scheduleTaskCurrZone);\n            this._invokeTaskZS =\n                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\n            this._invokeTaskDlgt =\n                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\n            this._invokeTaskCurrZone =\n                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate._invokeTaskCurrZone);\n            this._cancelTaskZS =\n                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\n            this._cancelTaskDlgt =\n                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\n            this._cancelTaskCurrZone =\n                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate._cancelTaskCurrZone);\n            this._hasTaskZS = null;\n            this._hasTaskDlgt = null;\n            this._hasTaskDlgtOwner = null;\n            this._hasTaskCurrZone = null;\n            const zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;\n            const parentHasTask = parentDelegate && parentDelegate._hasTaskZS;\n            if (zoneSpecHasTask || parentHasTask) {\n                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such\n                // a case all task related interceptors must go through this ZD. We can't short circuit it.\n                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;\n                this._hasTaskDlgt = parentDelegate;\n                this._hasTaskDlgtOwner = this;\n                this._hasTaskCurrZone = zone;\n                if (!zoneSpec.onScheduleTask) {\n                    this._scheduleTaskZS = DELEGATE_ZS;\n                    this._scheduleTaskDlgt = parentDelegate;\n                    this._scheduleTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onInvokeTask) {\n                    this._invokeTaskZS = DELEGATE_ZS;\n                    this._invokeTaskDlgt = parentDelegate;\n                    this._invokeTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onCancelTask) {\n                    this._cancelTaskZS = DELEGATE_ZS;\n                    this._cancelTaskDlgt = parentDelegate;\n                    this._cancelTaskCurrZone = this.zone;\n                }\n            }\n        }\n        fork(targetZone, zoneSpec) {\n            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :\n                new Zone(targetZone, zoneSpec);\n        }\n        intercept(targetZone, callback, source) {\n            return this._interceptZS ?\n                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :\n                callback;\n        }\n        invoke(targetZone, callback, applyThis, applyArgs, source) {\n            return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :\n                callback.apply(applyThis, applyArgs);\n        }\n        handleError(targetZone, error) {\n            return this._handleErrorZS ?\n                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :\n                true;\n        }\n        scheduleTask(targetZone, task) {\n            let returnTask = task;\n            if (this._scheduleTaskZS) {\n                if (this._hasTaskZS) {\n                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);\n                }\n                // clang-format off\n                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\n                // clang-format on\n                if (!returnTask)\n                    returnTask = task;\n            }\n            else {\n                if (task.scheduleFn) {\n                    task.scheduleFn(task);\n                }\n                else if (task.type == microTask) {\n                    scheduleMicroTask(task);\n                }\n                else {\n                    throw new Error('Task is missing scheduleFn.');\n                }\n            }\n            return returnTask;\n        }\n        invokeTask(targetZone, task, applyThis, applyArgs) {\n            return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :\n                task.callback.apply(applyThis, applyArgs);\n        }\n        cancelTask(targetZone, task) {\n            let value;\n            if (this._cancelTaskZS) {\n                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\n            }\n            else {\n                if (!task.cancelFn) {\n                    throw Error('Task is not cancelable');\n                }\n                value = task.cancelFn(task);\n            }\n            return value;\n        }\n        hasTask(targetZone, isEmpty) {\n            // hasTask should not throw error so other ZoneDelegate\n            // can still trigger hasTask callback\n            try {\n                this._hasTaskZS &&\n                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\n            }\n            catch (err) {\n                this.handleError(targetZone, err);\n            }\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        _updateTaskCount(type, count) {\n            const counts = this._taskCounts;\n            const prev = counts[type];\n            const next = counts[type] = prev + count;\n            if (next < 0) {\n                throw new Error('More tasks executed then were scheduled.');\n            }\n            if (prev == 0 || next == 0) {\n                const isEmpty = {\n                    microTask: counts['microTask'] > 0,\n                    macroTask: counts['macroTask'] > 0,\n                    eventTask: counts['eventTask'] > 0,\n                    change: type\n                };\n                this.hasTask(this.zone, isEmpty);\n            }\n        }\n    }\n    class ZoneTask {\n        constructor(type, source, callback, options, scheduleFn, cancelFn) {\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._zone = null;\n            this.runCount = 0;\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._zoneDelegates = null;\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._state = 'notScheduled';\n            this.type = type;\n            this.source = source;\n            this.data = options;\n            this.scheduleFn = scheduleFn;\n            this.cancelFn = cancelFn;\n            if (!callback) {\n                throw new Error('callback is not defined');\n            }\n            this.callback = callback;\n            const self = this;\n            // TODO: @JiaLiPassion options should have interface\n            if (type === eventTask && options && options.useG) {\n                this.invoke = ZoneTask.invokeTask;\n            }\n            else {\n                this.invoke = function () {\n                    return ZoneTask.invokeTask.call(global, self, this, arguments);\n                };\n            }\n        }\n        static invokeTask(task, target, args) {\n            if (!task) {\n                task = this;\n            }\n            _numberOfNestedTaskFrames++;\n            try {\n                task.runCount++;\n                return task.zone.runTask(task, target, args);\n            }\n            finally {\n                if (_numberOfNestedTaskFrames == 1) {\n                    drainMicroTaskQueue();\n                }\n                _numberOfNestedTaskFrames--;\n            }\n        }\n        get zone() {\n            return this._zone;\n        }\n        get state() {\n            return this._state;\n        }\n        cancelScheduleRequest() {\n            this._transitionTo(notScheduled, scheduling);\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        _transitionTo(toState, fromState1, fromState2) {\n            if (this._state === fromState1 || this._state === fromState2) {\n                this._state = toState;\n                if (toState == notScheduled) {\n                    this._zoneDelegates = null;\n                }\n            }\n            else {\n                throw new Error(`${this.type} '${this.source}': can not transition to '${toState}', expecting state '${fromState1}'${fromState2 ? ' or \\'' + fromState2 + '\\'' : ''}, was '${this._state}'.`);\n            }\n        }\n        toString() {\n            if (this.data && typeof this.data.handleId !== 'undefined') {\n                return this.data.handleId.toString();\n            }\n            else {\n                return Object.prototype.toString.call(this);\n            }\n        }\n        // add toJSON method to prevent cyclic error when\n        // call JSON.stringify(zoneTask)\n        toJSON() {\n            return {\n                type: this.type,\n                state: this.state,\n                source: this.source,\n                zone: this.zone.name,\n                runCount: this.runCount\n            };\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  MICROTASK QUEUE\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const symbolSetTimeout = __symbol__('setTimeout');\n    const symbolPromise = __symbol__('Promise');\n    const symbolThen = __symbol__('then');\n    let _microTaskQueue = [];\n    let _isDrainingMicrotaskQueue = false;\n    let nativeMicroTaskQueuePromise;\n    function scheduleMicroTask(task) {\n        // if we are not running in any task, and there has not been anything scheduled\n        // we must bootstrap the initial task creation by manually scheduling the drain\n        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\n            // We are not running in Task, so we need to kickstart the microtask queue.\n            if (!nativeMicroTaskQueuePromise) {\n                if (global[symbolPromise]) {\n                    nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);\n                }\n            }\n            if (nativeMicroTaskQueuePromise) {\n                let nativeThen = nativeMicroTaskQueuePromise[symbolThen];\n                if (!nativeThen) {\n                    // native Promise is not patchable, we need to use `then` directly\n                    // issue 1078\n                    nativeThen = nativeMicroTaskQueuePromise['then'];\n                }\n                nativeThen.call(nativeMicroTaskQueuePromise, drainMicroTaskQueue);\n            }\n            else {\n                global[symbolSetTimeout](drainMicroTaskQueue, 0);\n            }\n        }\n        task && _microTaskQueue.push(task);\n    }\n    function drainMicroTaskQueue() {\n        if (!_isDrainingMicrotaskQueue) {\n            _isDrainingMicrotaskQueue = true;\n            while (_microTaskQueue.length) {\n                const queue = _microTaskQueue;\n                _microTaskQueue = [];\n                for (let i = 0; i < queue.length; i++) {\n                    const task = queue[i];\n                    try {\n                        task.zone.runTask(task, null, null);\n                    }\n                    catch (error) {\n                        _api.onUnhandledError(error);\n                    }\n                }\n            }\n            _api.microtaskDrainDone();\n            _isDrainingMicrotaskQueue = false;\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  BOOTSTRAP\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const NO_ZONE = { name: 'NO ZONE' };\n    const notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';\n    const microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';\n    const patches = {};\n    const _api = {\n        symbol: __symbol__,\n        currentZoneFrame: () => _currentZoneFrame,\n        onUnhandledError: noop,\n        microtaskDrainDone: noop,\n        scheduleMicroTask: scheduleMicroTask,\n        showUncaughtError: () => !Zone[__symbol__('ignoreConsoleErrorUncaughtError')],\n        patchEventTarget: () => [],\n        patchOnProperties: noop,\n        patchMethod: () => noop,\n        bindArguments: () => [],\n        patchThen: () => noop,\n        patchMacroTask: () => noop,\n        patchEventPrototype: () => noop,\n        isIEOrEdge: () => false,\n        getGlobalObjects: () => undefined,\n        ObjectDefineProperty: () => noop,\n        ObjectGetOwnPropertyDescriptor: () => undefined,\n        ObjectCreate: () => undefined,\n        ArraySlice: () => [],\n        patchClass: () => noop,\n        wrapWithCurrentZone: () => noop,\n        filterProperties: () => [],\n        attachOriginToPatched: () => noop,\n        _redefineProperty: () => noop,\n        patchCallbacks: () => noop\n    };\n    let _currentZoneFrame = { parent: null, zone: new Zone(null, null) };\n    let _currentTask = null;\n    let _numberOfNestedTaskFrames = 0;\n    function noop() { }\n    performanceMeasure('Zone', 'Zone');\n    return global['Zone'] = Zone;\n})(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || __webpack_require__.g);\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Suppress closure compiler errors about unknown 'Zone' variable\n * @fileoverview\n * @suppress {undefinedVars,globalThis,missingRequire}\n */\n/// <reference types=\"node\"/>\n// issue #989, to reduce bundle size, use short name\n/** Object.getOwnPropertyDescriptor */\nconst ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n/** Object.defineProperty */\nconst ObjectDefineProperty = Object.defineProperty;\n/** Object.getPrototypeOf */\nconst ObjectGetPrototypeOf = Object.getPrototypeOf;\n/** Object.create */\nconst ObjectCreate = Object.create;\n/** Array.prototype.slice */\nconst ArraySlice = Array.prototype.slice;\n/** addEventListener string const */\nconst ADD_EVENT_LISTENER_STR = 'addEventListener';\n/** removeEventListener string const */\nconst REMOVE_EVENT_LISTENER_STR = 'removeEventListener';\n/** zoneSymbol addEventListener */\nconst ZONE_SYMBOL_ADD_EVENT_LISTENER = Zone.__symbol__(ADD_EVENT_LISTENER_STR);\n/** zoneSymbol removeEventListener */\nconst ZONE_SYMBOL_REMOVE_EVENT_LISTENER = Zone.__symbol__(REMOVE_EVENT_LISTENER_STR);\n/** true string const */\nconst TRUE_STR = 'true';\n/** false string const */\nconst FALSE_STR = 'false';\n/** Zone symbol prefix string const. */\nconst ZONE_SYMBOL_PREFIX = Zone.__symbol__('');\nfunction wrapWithCurrentZone(callback, source) {\n    return Zone.current.wrap(callback, source);\n}\nfunction scheduleMacroTaskWithCurrentZone(source, callback, data, customSchedule, customCancel) {\n    return Zone.current.scheduleMacroTask(source, callback, data, customSchedule, customCancel);\n}\nconst zoneSymbol = Zone.__symbol__;\nconst isWindowExists = typeof window !== 'undefined';\nconst internalWindow = isWindowExists ? window : undefined;\nconst _global = isWindowExists && internalWindow || typeof self === 'object' && self || __webpack_require__.g;\nconst REMOVE_ATTRIBUTE = 'removeAttribute';\nconst NULL_ON_PROP_VALUE = [null];\nfunction bindArguments(args, source) {\n    for (let i = args.length - 1; i >= 0; i--) {\n        if (typeof args[i] === 'function') {\n            args[i] = wrapWithCurrentZone(args[i], source + '_' + i);\n        }\n    }\n    return args;\n}\nfunction patchPrototype(prototype, fnNames) {\n    const source = prototype.constructor['name'];\n    for (let i = 0; i < fnNames.length; i++) {\n        const name = fnNames[i];\n        const delegate = prototype[name];\n        if (delegate) {\n            const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, name);\n            if (!isPropertyWritable(prototypeDesc)) {\n                continue;\n            }\n            prototype[name] = ((delegate) => {\n                const patched = function () {\n                    return delegate.apply(this, bindArguments(arguments, source + '.' + name));\n                };\n                attachOriginToPatched(patched, delegate);\n                return patched;\n            })(delegate);\n        }\n    }\n}\nfunction isPropertyWritable(propertyDesc) {\n    if (!propertyDesc) {\n        return true;\n    }\n    if (propertyDesc.writable === false) {\n        return false;\n    }\n    return !(typeof propertyDesc.get === 'function' && typeof propertyDesc.set === 'undefined');\n}\nconst isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isNode = (!('nw' in _global) && typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]');\nconst isBrowser = !isNode && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']);\n// we are in electron of nw, so we are both browser and nodejs\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isMix = typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]' && !isWebWorker &&\n    !!(isWindowExists && internalWindow['HTMLElement']);\nconst zoneSymbolEventNames = {};\nconst wrapFn = function (event) {\n    // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n    // event will be undefined, so we need to use window.event\n    event = event || _global.event;\n    if (!event) {\n        return;\n    }\n    let eventNameSymbol = zoneSymbolEventNames[event.type];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames[event.type] = zoneSymbol('ON_PROPERTY' + event.type);\n    }\n    const target = this || event.target || _global;\n    const listener = target[eventNameSymbol];\n    let result;\n    if (isBrowser && target === internalWindow && event.type === 'error') {\n        // window.onerror have different signiture\n        // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror\n        // and onerror callback will prevent default when callback return true\n        const errorEvent = event;\n        result = listener &&\n            listener.call(this, errorEvent.message, errorEvent.filename, errorEvent.lineno, errorEvent.colno, errorEvent.error);\n        if (result === true) {\n            event.preventDefault();\n        }\n    }\n    else {\n        result = listener && listener.apply(this, arguments);\n        if (result != undefined && !result) {\n            event.preventDefault();\n        }\n    }\n    return result;\n};\nfunction patchProperty(obj, prop, prototype) {\n    let desc = ObjectGetOwnPropertyDescriptor(obj, prop);\n    if (!desc && prototype) {\n        // when patch window object, use prototype to check prop exist or not\n        const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, prop);\n        if (prototypeDesc) {\n            desc = { enumerable: true, configurable: true };\n        }\n    }\n    // if the descriptor not exists or is not configurable\n    // just return\n    if (!desc || !desc.configurable) {\n        return;\n    }\n    const onPropPatchedSymbol = zoneSymbol('on' + prop + 'patched');\n    if (obj.hasOwnProperty(onPropPatchedSymbol) && obj[onPropPatchedSymbol]) {\n        return;\n    }\n    // A property descriptor cannot have getter/setter and be writable\n    // deleting the writable and value properties avoids this error:\n    //\n    // TypeError: property descriptors must not specify a value or be writable when a\n    // getter or setter has been specified\n    delete desc.writable;\n    delete desc.value;\n    const originalDescGet = desc.get;\n    const originalDescSet = desc.set;\n    // substr(2) cuz 'onclick' -> 'click', etc\n    const eventName = prop.substr(2);\n    let eventNameSymbol = zoneSymbolEventNames[eventName];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames[eventName] = zoneSymbol('ON_PROPERTY' + eventName);\n    }\n    desc.set = function (newValue) {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return;\n        }\n        let previousValue = target[eventNameSymbol];\n        if (previousValue) {\n            target.removeEventListener(eventName, wrapFn);\n        }\n        // issue #978, when onload handler was added before loading zone.js\n        // we should remove it with originalDescSet\n        if (originalDescSet) {\n            originalDescSet.apply(target, NULL_ON_PROP_VALUE);\n        }\n        if (typeof newValue === 'function') {\n            target[eventNameSymbol] = newValue;\n            target.addEventListener(eventName, wrapFn, false);\n        }\n        else {\n            target[eventNameSymbol] = null;\n        }\n    };\n    // The getter would return undefined for unassigned properties but the default value of an\n    // unassigned property is null\n    desc.get = function () {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return null;\n        }\n        const listener = target[eventNameSymbol];\n        if (listener) {\n            return listener;\n        }\n        else if (originalDescGet) {\n            // result will be null when use inline event attribute,\n            // such as <button onclick=\"func();\">OK</button>\n            // because the onclick function is internal raw uncompiled handler\n            // the onclick will be evaluated when first time event was triggered or\n            // the property is accessed, https://github.com/angular/zone.js/issues/525\n            // so we should use original native get to retrieve the handler\n            let value = originalDescGet && originalDescGet.call(this);\n            if (value) {\n                desc.set.call(this, value);\n                if (typeof target[REMOVE_ATTRIBUTE] === 'function') {\n                    target.removeAttribute(prop);\n                }\n                return value;\n            }\n        }\n        return null;\n    };\n    ObjectDefineProperty(obj, prop, desc);\n    obj[onPropPatchedSymbol] = true;\n}\nfunction patchOnProperties(obj, properties, prototype) {\n    if (properties) {\n        for (let i = 0; i < properties.length; i++) {\n            patchProperty(obj, 'on' + properties[i], prototype);\n        }\n    }\n    else {\n        const onProperties = [];\n        for (const prop in obj) {\n            if (prop.substr(0, 2) == 'on') {\n                onProperties.push(prop);\n            }\n        }\n        for (let j = 0; j < onProperties.length; j++) {\n            patchProperty(obj, onProperties[j], prototype);\n        }\n    }\n}\nconst originalInstanceKey = zoneSymbol('originalInstance');\n// wrap some native API on `window`\nfunction patchClass(className) {\n    const OriginalClass = _global[className];\n    if (!OriginalClass)\n        return;\n    // keep original class in global\n    _global[zoneSymbol(className)] = OriginalClass;\n    _global[className] = function () {\n        const a = bindArguments(arguments, className);\n        switch (a.length) {\n            case 0:\n                this[originalInstanceKey] = new OriginalClass();\n                break;\n            case 1:\n                this[originalInstanceKey] = new OriginalClass(a[0]);\n                break;\n            case 2:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\n                break;\n            case 3:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\n                break;\n            case 4:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\n                break;\n            default:\n                throw new Error('Arg list too long.');\n        }\n    };\n    // attach original delegate to patched function\n    attachOriginToPatched(_global[className], OriginalClass);\n    const instance = new OriginalClass(function () { });\n    let prop;\n    for (prop in instance) {\n        // https://bugs.webkit.org/show_bug.cgi?id=44721\n        if (className === 'XMLHttpRequest' && prop === 'responseBlob')\n            continue;\n        (function (prop) {\n            if (typeof instance[prop] === 'function') {\n                _global[className].prototype[prop] = function () {\n                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\n                };\n            }\n            else {\n                ObjectDefineProperty(_global[className].prototype, prop, {\n                    set: function (fn) {\n                        if (typeof fn === 'function') {\n                            this[originalInstanceKey][prop] = wrapWithCurrentZone(fn, className + '.' + prop);\n                            // keep callback in wrapped function so we can\n                            // use it in Function.prototype.toString to return\n                            // the native one.\n                            attachOriginToPatched(this[originalInstanceKey][prop], fn);\n                        }\n                        else {\n                            this[originalInstanceKey][prop] = fn;\n                        }\n                    },\n                    get: function () {\n                        return this[originalInstanceKey][prop];\n                    }\n                });\n            }\n        }(prop));\n    }\n    for (prop in OriginalClass) {\n        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\n            _global[className][prop] = OriginalClass[prop];\n        }\n    }\n}\nfunction patchMethod(target, name, patchFn) {\n    let proto = target;\n    while (proto && !proto.hasOwnProperty(name)) {\n        proto = ObjectGetPrototypeOf(proto);\n    }\n    if (!proto && target[name]) {\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n        proto = target;\n    }\n    const delegateName = zoneSymbol(name);\n    let delegate = null;\n    if (proto && (!(delegate = proto[delegateName]) || !proto.hasOwnProperty(delegateName))) {\n        delegate = proto[delegateName] = proto[name];\n        // check whether proto[name] is writable\n        // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob\n        const desc = proto && ObjectGetOwnPropertyDescriptor(proto, name);\n        if (isPropertyWritable(desc)) {\n            const patchDelegate = patchFn(delegate, delegateName, name);\n            proto[name] = function () {\n                return patchDelegate(this, arguments);\n            };\n            attachOriginToPatched(proto[name], delegate);\n        }\n    }\n    return delegate;\n}\n// TODO: @JiaLiPassion, support cancel task later if necessary\nfunction patchMacroTask(obj, funcName, metaCreator) {\n    let setNative = null;\n    function scheduleTask(task) {\n        const data = task.data;\n        data.args[data.cbIdx] = function () {\n            task.invoke.apply(this, arguments);\n        };\n        setNative.apply(data.target, data.args);\n        return task;\n    }\n    setNative = patchMethod(obj, funcName, (delegate) => function (self, args) {\n        const meta = metaCreator(self, args);\n        if (meta.cbIdx >= 0 && typeof args[meta.cbIdx] === 'function') {\n            return scheduleMacroTaskWithCurrentZone(meta.name, args[meta.cbIdx], meta, scheduleTask);\n        }\n        else {\n            // cause an error by calling it directly.\n            return delegate.apply(self, args);\n        }\n    });\n}\nfunction attachOriginToPatched(patched, original) {\n    patched[zoneSymbol('OriginalDelegate')] = original;\n}\nlet isDetectedIEOrEdge = false;\nlet ieOrEdge = false;\nfunction isIE() {\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1) {\n            return true;\n        }\n    }\n    catch (error) {\n    }\n    return false;\n}\nfunction isIEOrEdge() {\n    if (isDetectedIEOrEdge) {\n        return ieOrEdge;\n    }\n    isDetectedIEOrEdge = true;\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {\n            ieOrEdge = true;\n        }\n    }\n    catch (error) {\n    }\n    return ieOrEdge;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('ZoneAwarePromise', (global, Zone, api) => {\n    const ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n    const ObjectDefineProperty = Object.defineProperty;\n    function readableObjectToString(obj) {\n        if (obj && obj.toString === Object.prototype.toString) {\n            const className = obj.constructor && obj.constructor.name;\n            return (className ? className : '') + ': ' + JSON.stringify(obj);\n        }\n        return obj ? obj.toString() : Object.prototype.toString.call(obj);\n    }\n    const __symbol__ = api.symbol;\n    const _uncaughtPromiseErrors = [];\n    const isDisableWrappingUncaughtPromiseRejection = global[__symbol__('DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION')] === true;\n    const symbolPromise = __symbol__('Promise');\n    const symbolThen = __symbol__('then');\n    const creationTrace = '__creationTrace__';\n    api.onUnhandledError = (e) => {\n        if (api.showUncaughtError()) {\n            const rejection = e && e.rejection;\n            if (rejection) {\n                console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\n            }\n            else {\n                console.error(e);\n            }\n        }\n    };\n    api.microtaskDrainDone = () => {\n        while (_uncaughtPromiseErrors.length) {\n            const uncaughtPromiseError = _uncaughtPromiseErrors.shift();\n            try {\n                uncaughtPromiseError.zone.runGuarded(() => {\n                    if (uncaughtPromiseError.throwOriginal) {\n                        throw uncaughtPromiseError.rejection;\n                    }\n                    throw uncaughtPromiseError;\n                });\n            }\n            catch (error) {\n                handleUnhandledRejection(error);\n            }\n        }\n    };\n    const UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');\n    function handleUnhandledRejection(e) {\n        api.onUnhandledError(e);\n        try {\n            const handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];\n            if (typeof handler === 'function') {\n                handler.call(this, e);\n            }\n        }\n        catch (err) {\n        }\n    }\n    function isThenable(value) {\n        return value && value.then;\n    }\n    function forwardResolution(value) {\n        return value;\n    }\n    function forwardRejection(rejection) {\n        return ZoneAwarePromise.reject(rejection);\n    }\n    const symbolState = __symbol__('state');\n    const symbolValue = __symbol__('value');\n    const symbolFinally = __symbol__('finally');\n    const symbolParentPromiseValue = __symbol__('parentPromiseValue');\n    const symbolParentPromiseState = __symbol__('parentPromiseState');\n    const source = 'Promise.then';\n    const UNRESOLVED = null;\n    const RESOLVED = true;\n    const REJECTED = false;\n    const REJECTED_NO_CATCH = 0;\n    function makeResolver(promise, state) {\n        return (v) => {\n            try {\n                resolvePromise(promise, state, v);\n            }\n            catch (err) {\n                resolvePromise(promise, false, err);\n            }\n            // Do not return value or you will break the Promise spec.\n        };\n    }\n    const once = function () {\n        let wasCalled = false;\n        return function wrapper(wrappedFunction) {\n            return function () {\n                if (wasCalled) {\n                    return;\n                }\n                wasCalled = true;\n                wrappedFunction.apply(null, arguments);\n            };\n        };\n    };\n    const TYPE_ERROR = 'Promise resolved with itself';\n    const CURRENT_TASK_TRACE_SYMBOL = __symbol__('currentTaskTrace');\n    // Promise Resolution\n    function resolvePromise(promise, state, value) {\n        const onceWrapper = once();\n        if (promise === value) {\n            throw new TypeError(TYPE_ERROR);\n        }\n        if (promise[symbolState] === UNRESOLVED) {\n            // should only get value.then once based on promise spec.\n            let then = null;\n            try {\n                if (typeof value === 'object' || typeof value === 'function') {\n                    then = value && value.then;\n                }\n            }\n            catch (err) {\n                onceWrapper(() => {\n                    resolvePromise(promise, false, err);\n                })();\n                return promise;\n            }\n            // if (value instanceof ZoneAwarePromise) {\n            if (state !== REJECTED && value instanceof ZoneAwarePromise &&\n                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&\n                value[symbolState] !== UNRESOLVED) {\n                clearRejectedNoCatch(value);\n                resolvePromise(promise, value[symbolState], value[symbolValue]);\n            }\n            else if (state !== REJECTED && typeof then === 'function') {\n                try {\n                    then.call(value, onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)));\n                }\n                catch (err) {\n                    onceWrapper(() => {\n                        resolvePromise(promise, false, err);\n                    })();\n                }\n            }\n            else {\n                promise[symbolState] = state;\n                const queue = promise[symbolValue];\n                promise[symbolValue] = value;\n                if (promise[symbolFinally] === symbolFinally) {\n                    // the promise is generated by Promise.prototype.finally\n                    if (state === RESOLVED) {\n                        // the state is resolved, should ignore the value\n                        // and use parent promise value\n                        promise[symbolState] = promise[symbolParentPromiseState];\n                        promise[symbolValue] = promise[symbolParentPromiseValue];\n                    }\n                }\n                // record task information in value when error occurs, so we can\n                // do some additional work such as render longStackTrace\n                if (state === REJECTED && value instanceof Error) {\n                    // check if longStackTraceZone is here\n                    const trace = Zone.currentTask && Zone.currentTask.data &&\n                        Zone.currentTask.data[creationTrace];\n                    if (trace) {\n                        // only keep the long stack trace into error when in longStackTraceZone\n                        ObjectDefineProperty(value, CURRENT_TASK_TRACE_SYMBOL, { configurable: true, enumerable: false, writable: true, value: trace });\n                    }\n                }\n                for (let i = 0; i < queue.length;) {\n                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\n                }\n                if (queue.length == 0 && state == REJECTED) {\n                    promise[symbolState] = REJECTED_NO_CATCH;\n                    let uncaughtPromiseError = value;\n                    try {\n                        // Here we throws a new Error to print more readable error log\n                        // and if the value is not an error, zone.js builds an `Error`\n                        // Object here to attach the stack information.\n                        throw new Error('Uncaught (in promise): ' + readableObjectToString(value) +\n                            (value && value.stack ? '\\n' + value.stack : ''));\n                    }\n                    catch (err) {\n                        uncaughtPromiseError = err;\n                    }\n                    if (isDisableWrappingUncaughtPromiseRejection) {\n                        // If disable wrapping uncaught promise reject\n                        // use the value instead of wrapping it.\n                        uncaughtPromiseError.throwOriginal = true;\n                    }\n                    uncaughtPromiseError.rejection = value;\n                    uncaughtPromiseError.promise = promise;\n                    uncaughtPromiseError.zone = Zone.current;\n                    uncaughtPromiseError.task = Zone.currentTask;\n                    _uncaughtPromiseErrors.push(uncaughtPromiseError);\n                    api.scheduleMicroTask(); // to make sure that it is running\n                }\n            }\n        }\n        // Resolving an already resolved promise is a noop.\n        return promise;\n    }\n    const REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');\n    function clearRejectedNoCatch(promise) {\n        if (promise[symbolState] === REJECTED_NO_CATCH) {\n            // if the promise is rejected no catch status\n            // and queue.length > 0, means there is a error handler\n            // here to handle the rejected promise, we should trigger\n            // windows.rejectionhandled eventHandler or nodejs rejectionHandled\n            // eventHandler\n            try {\n                const handler = Zone[REJECTION_HANDLED_HANDLER];\n                if (handler && typeof handler === 'function') {\n                    handler.call(this, { rejection: promise[symbolValue], promise: promise });\n                }\n            }\n            catch (err) {\n            }\n            promise[symbolState] = REJECTED;\n            for (let i = 0; i < _uncaughtPromiseErrors.length; i++) {\n                if (promise === _uncaughtPromiseErrors[i].promise) {\n                    _uncaughtPromiseErrors.splice(i, 1);\n                }\n            }\n        }\n    }\n    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\n        clearRejectedNoCatch(promise);\n        const promiseState = promise[symbolState];\n        const delegate = promiseState ?\n            (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :\n            (typeof onRejected === 'function') ? onRejected : forwardRejection;\n        zone.scheduleMicroTask(source, () => {\n            try {\n                const parentPromiseValue = promise[symbolValue];\n                const isFinallyPromise = !!chainPromise && symbolFinally === chainPromise[symbolFinally];\n                if (isFinallyPromise) {\n                    // if the promise is generated from finally call, keep parent promise's state and value\n                    chainPromise[symbolParentPromiseValue] = parentPromiseValue;\n                    chainPromise[symbolParentPromiseState] = promiseState;\n                }\n                // should not pass value to finally callback\n                const value = zone.run(delegate, undefined, isFinallyPromise && delegate !== forwardRejection && delegate !== forwardResolution ?\n                    [] :\n                    [parentPromiseValue]);\n                resolvePromise(chainPromise, true, value);\n            }\n            catch (error) {\n                // if error occurs, should always return this error\n                resolvePromise(chainPromise, false, error);\n            }\n        }, chainPromise);\n    }\n    const ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';\n    const noop = function () { };\n    class ZoneAwarePromise {\n        static toString() {\n            return ZONE_AWARE_PROMISE_TO_STRING;\n        }\n        static resolve(value) {\n            return resolvePromise(new this(null), RESOLVED, value);\n        }\n        static reject(error) {\n            return resolvePromise(new this(null), REJECTED, error);\n        }\n        static race(values) {\n            let resolve;\n            let reject;\n            let promise = new this((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            function onResolve(value) {\n                resolve(value);\n            }\n            function onReject(error) {\n                reject(error);\n            }\n            for (let value of values) {\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                value.then(onResolve, onReject);\n            }\n            return promise;\n        }\n        static all(values) {\n            return ZoneAwarePromise.allWithCallback(values);\n        }\n        static allSettled(values) {\n            const P = this && this.prototype instanceof ZoneAwarePromise ? this : ZoneAwarePromise;\n            return P.allWithCallback(values, {\n                thenCallback: (value) => ({ status: 'fulfilled', value }),\n                errorCallback: (err) => ({ status: 'rejected', reason: err })\n            });\n        }\n        static allWithCallback(values, callback) {\n            let resolve;\n            let reject;\n            let promise = new this((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            // Start at 2 to prevent prematurely resolving if .then is called immediately.\n            let unresolvedCount = 2;\n            let valueIndex = 0;\n            const resolvedValues = [];\n            for (let value of values) {\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                const curValueIndex = valueIndex;\n                try {\n                    value.then((value) => {\n                        resolvedValues[curValueIndex] = callback ? callback.thenCallback(value) : value;\n                        unresolvedCount--;\n                        if (unresolvedCount === 0) {\n                            resolve(resolvedValues);\n                        }\n                    }, (err) => {\n                        if (!callback) {\n                            reject(err);\n                        }\n                        else {\n                            resolvedValues[curValueIndex] = callback.errorCallback(err);\n                            unresolvedCount--;\n                            if (unresolvedCount === 0) {\n                                resolve(resolvedValues);\n                            }\n                        }\n                    });\n                }\n                catch (thenErr) {\n                    reject(thenErr);\n                }\n                unresolvedCount++;\n                valueIndex++;\n            }\n            // Make the unresolvedCount zero-based again.\n            unresolvedCount -= 2;\n            if (unresolvedCount === 0) {\n                resolve(resolvedValues);\n            }\n            return promise;\n        }\n        constructor(executor) {\n            const promise = this;\n            if (!(promise instanceof ZoneAwarePromise)) {\n                throw new Error('Must be an instanceof Promise.');\n            }\n            promise[symbolState] = UNRESOLVED;\n            promise[symbolValue] = []; // queue;\n            try {\n                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));\n            }\n            catch (error) {\n                resolvePromise(promise, false, error);\n            }\n        }\n        get [Symbol.toStringTag]() {\n            return 'Promise';\n        }\n        get [Symbol.species]() {\n            return ZoneAwarePromise;\n        }\n        then(onFulfilled, onRejected) {\n            let C = this.constructor[Symbol.species];\n            if (!C || typeof C !== 'function') {\n                C = this.constructor || ZoneAwarePromise;\n            }\n            const chainPromise = new C(noop);\n            const zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\n            }\n            return chainPromise;\n        }\n        catch(onRejected) {\n            return this.then(null, onRejected);\n        }\n        finally(onFinally) {\n            let C = this.constructor[Symbol.species];\n            if (!C || typeof C !== 'function') {\n                C = ZoneAwarePromise;\n            }\n            const chainPromise = new C(noop);\n            chainPromise[symbolFinally] = symbolFinally;\n            const zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFinally, onFinally);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFinally, onFinally);\n            }\n            return chainPromise;\n        }\n    }\n    // Protect against aggressive optimizers dropping seemingly unused properties.\n    // E.g. Closure Compiler in advanced mode.\n    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\n    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\n    ZoneAwarePromise['race'] = ZoneAwarePromise.race;\n    ZoneAwarePromise['all'] = ZoneAwarePromise.all;\n    const NativePromise = global[symbolPromise] = global['Promise'];\n    global['Promise'] = ZoneAwarePromise;\n    const symbolThenPatched = __symbol__('thenPatched');\n    function patchThen(Ctor) {\n        const proto = Ctor.prototype;\n        const prop = ObjectGetOwnPropertyDescriptor(proto, 'then');\n        if (prop && (prop.writable === false || !prop.configurable)) {\n            // check Ctor.prototype.then propertyDescriptor is writable or not\n            // in meteor env, writable is false, we should ignore such case\n            return;\n        }\n        const originalThen = proto.then;\n        // Keep a reference to the original method.\n        proto[symbolThen] = originalThen;\n        Ctor.prototype.then = function (onResolve, onReject) {\n            const wrapped = new ZoneAwarePromise((resolve, reject) => {\n                originalThen.call(this, resolve, reject);\n            });\n            return wrapped.then(onResolve, onReject);\n        };\n        Ctor[symbolThenPatched] = true;\n    }\n    api.patchThen = patchThen;\n    function zoneify(fn) {\n        return function (self, args) {\n            let resultPromise = fn.apply(self, args);\n            if (resultPromise instanceof ZoneAwarePromise) {\n                return resultPromise;\n            }\n            let ctor = resultPromise.constructor;\n            if (!ctor[symbolThenPatched]) {\n                patchThen(ctor);\n            }\n            return resultPromise;\n        };\n    }\n    if (NativePromise) {\n        patchThen(NativePromise);\n        patchMethod(global, 'fetch', delegate => zoneify(delegate));\n    }\n    // This is not part of public API, but it is useful for tests, so we expose it.\n    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\n    return ZoneAwarePromise;\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// override Function.prototype.toString to make zone.js patched function\n// look like native function\nZone.__load_patch('toString', (global) => {\n    // patch Func.prototype.toString to let them look like native\n    const originalFunctionToString = Function.prototype.toString;\n    const ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');\n    const PROMISE_SYMBOL = zoneSymbol('Promise');\n    const ERROR_SYMBOL = zoneSymbol('Error');\n    const newFunctionToString = function toString() {\n        if (typeof this === 'function') {\n            const originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];\n            if (originalDelegate) {\n                if (typeof originalDelegate === 'function') {\n                    return originalFunctionToString.call(originalDelegate);\n                }\n                else {\n                    return Object.prototype.toString.call(originalDelegate);\n                }\n            }\n            if (this === Promise) {\n                const nativePromise = global[PROMISE_SYMBOL];\n                if (nativePromise) {\n                    return originalFunctionToString.call(nativePromise);\n                }\n            }\n            if (this === Error) {\n                const nativeError = global[ERROR_SYMBOL];\n                if (nativeError) {\n                    return originalFunctionToString.call(nativeError);\n                }\n            }\n        }\n        return originalFunctionToString.call(this);\n    };\n    newFunctionToString[ORIGINAL_DELEGATE_SYMBOL] = originalFunctionToString;\n    Function.prototype.toString = newFunctionToString;\n    // patch Object.prototype.toString to let them look like native\n    const originalObjectToString = Object.prototype.toString;\n    const PROMISE_OBJECT_TO_STRING = '[object Promise]';\n    Object.prototype.toString = function () {\n        if (typeof Promise === 'function' && this instanceof Promise) {\n            return PROMISE_OBJECT_TO_STRING;\n        }\n        return originalObjectToString.call(this);\n    };\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet passiveSupported = false;\nif (typeof window !== 'undefined') {\n    try {\n        const options = Object.defineProperty({}, 'passive', {\n            get: function () {\n                passiveSupported = true;\n            }\n        });\n        window.addEventListener('test', options, options);\n        window.removeEventListener('test', options, options);\n    }\n    catch (err) {\n        passiveSupported = false;\n    }\n}\n// an identifier to tell ZoneTask do not create a new invoke closure\nconst OPTIMIZED_ZONE_EVENT_TASK_DATA = {\n    useG: true\n};\nconst zoneSymbolEventNames$1 = {};\nconst globalSources = {};\nconst EVENT_NAME_SYMBOL_REGX = new RegExp('^' + ZONE_SYMBOL_PREFIX + '(\\\\w+)(true|false)$');\nconst IMMEDIATE_PROPAGATION_SYMBOL = zoneSymbol('propagationStopped');\nfunction prepareEventNames(eventName, eventNameToString) {\n    const falseEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + FALSE_STR;\n    const trueEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + TRUE_STR;\n    const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n    const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n    zoneSymbolEventNames$1[eventName] = {};\n    zoneSymbolEventNames$1[eventName][FALSE_STR] = symbol;\n    zoneSymbolEventNames$1[eventName][TRUE_STR] = symbolCapture;\n}\nfunction patchEventTarget(_global, apis, patchOptions) {\n    const ADD_EVENT_LISTENER = (patchOptions && patchOptions.add) || ADD_EVENT_LISTENER_STR;\n    const REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.rm) || REMOVE_EVENT_LISTENER_STR;\n    const LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listeners) || 'eventListeners';\n    const REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.rmAll) || 'removeAllListeners';\n    const zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);\n    const ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';\n    const PREPEND_EVENT_LISTENER = 'prependListener';\n    const PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';\n    const invokeTask = function (task, target, event) {\n        // for better performance, check isRemoved which is set\n        // by removeEventListener\n        if (task.isRemoved) {\n            return;\n        }\n        const delegate = task.callback;\n        if (typeof delegate === 'object' && delegate.handleEvent) {\n            // create the bind version of handleEvent when invoke\n            task.callback = (event) => delegate.handleEvent(event);\n            task.originalDelegate = delegate;\n        }\n        // invoke static task.invoke\n        task.invoke(task, target, [event]);\n        const options = task.options;\n        if (options && typeof options === 'object' && options.once) {\n            // if options.once is true, after invoke once remove listener here\n            // only browser need to do this, nodejs eventEmitter will cal removeListener\n            // inside EventEmitter.once\n            const delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n            target[REMOVE_EVENT_LISTENER].call(target, event.type, delegate, options);\n        }\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = false\n    const globalZoneAwareCallback = function (event) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samsung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        const target = this || event.target || _global;\n        const tasks = target[zoneSymbolEventNames$1[event.type][FALSE_STR]];\n        if (tasks) {\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                invokeTask(tasks[0], target, event);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                const copyTasks = tasks.slice();\n                for (let i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    invokeTask(copyTasks[i], target, event);\n                }\n            }\n        }\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = true\n    const globalZoneAwareCaptureCallback = function (event) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samsung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        const target = this || event.target || _global;\n        const tasks = target[zoneSymbolEventNames$1[event.type][TRUE_STR]];\n        if (tasks) {\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                invokeTask(tasks[0], target, event);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                const copyTasks = tasks.slice();\n                for (let i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    invokeTask(copyTasks[i], target, event);\n                }\n            }\n        }\n    };\n    function patchEventTargetMethods(obj, patchOptions) {\n        if (!obj) {\n            return false;\n        }\n        let useGlobalCallback = true;\n        if (patchOptions && patchOptions.useG !== undefined) {\n            useGlobalCallback = patchOptions.useG;\n        }\n        const validateHandler = patchOptions && patchOptions.vh;\n        let checkDuplicate = true;\n        if (patchOptions && patchOptions.chkDup !== undefined) {\n            checkDuplicate = patchOptions.chkDup;\n        }\n        let returnTarget = false;\n        if (patchOptions && patchOptions.rt !== undefined) {\n            returnTarget = patchOptions.rt;\n        }\n        let proto = obj;\n        while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {\n            proto = ObjectGetPrototypeOf(proto);\n        }\n        if (!proto && obj[ADD_EVENT_LISTENER]) {\n            // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n            proto = obj;\n        }\n        if (!proto) {\n            return false;\n        }\n        if (proto[zoneSymbolAddEventListener]) {\n            return false;\n        }\n        const eventNameToString = patchOptions && patchOptions.eventNameToString;\n        // a shared global taskData to pass data for scheduleEventTask\n        // so we do not need to create a new object just for pass some data\n        const taskData = {};\n        const nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];\n        const nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =\n            proto[REMOVE_EVENT_LISTENER];\n        const nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =\n            proto[LISTENERS_EVENT_LISTENER];\n        const nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =\n            proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];\n        let nativePrependEventListener;\n        if (patchOptions && patchOptions.prepend) {\n            nativePrependEventListener = proto[zoneSymbol(patchOptions.prepend)] =\n                proto[patchOptions.prepend];\n        }\n        /**\n         * This util function will build an option object with passive option\n         * to handle all possible input from the user.\n         */\n        function buildEventListenerOptions(options, passive) {\n            if (!passiveSupported && typeof options === 'object' && options) {\n                // doesn't support passive but user want to pass an object as options.\n                // this will not work on some old browser, so we just pass a boolean\n                // as useCapture parameter\n                return !!options.capture;\n            }\n            if (!passiveSupported || !passive) {\n                return options;\n            }\n            if (typeof options === 'boolean') {\n                return { capture: options, passive: true };\n            }\n            if (!options) {\n                return { passive: true };\n            }\n            if (typeof options === 'object' && options.passive !== false) {\n                return Object.assign(Object.assign({}, options), { passive: true });\n            }\n            return options;\n        }\n        const customScheduleGlobal = function (task) {\n            // if there is already a task for the eventName + capture,\n            // just return, because we use the shared globalZoneAwareCallback here.\n            if (taskData.isExisting) {\n                return;\n            }\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options);\n        };\n        const customCancelGlobal = function (task) {\n            // if task is not marked as isRemoved, this call is directly\n            // from Zone.prototype.cancelTask, we should remove the task\n            // from tasksList of target first\n            if (!task.isRemoved) {\n                const symbolEventNames = zoneSymbolEventNames$1[task.eventName];\n                let symbolEventName;\n                if (symbolEventNames) {\n                    symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];\n                }\n                const existingTasks = symbolEventName && task.target[symbolEventName];\n                if (existingTasks) {\n                    for (let i = 0; i < existingTasks.length; i++) {\n                        const existingTask = existingTasks[i];\n                        if (existingTask === task) {\n                            existingTasks.splice(i, 1);\n                            // set isRemoved to data for faster invokeTask check\n                            task.isRemoved = true;\n                            if (existingTasks.length === 0) {\n                                // all tasks for the eventName + capture have gone,\n                                // remove globalZoneAwareCallback and remove the task cache from target\n                                task.allRemoved = true;\n                                task.target[symbolEventName] = null;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            // if all tasks for the eventName + capture have gone,\n            // we will really remove the global event callback,\n            // if not, return\n            if (!task.allRemoved) {\n                return;\n            }\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.options);\n        };\n        const customScheduleNonGlobal = function (task) {\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customSchedulePrepend = function (task) {\n            return nativePrependEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customCancelNonGlobal = function (task) {\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.invoke, task.options);\n        };\n        const customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;\n        const customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;\n        const compareTaskCallbackVsDelegate = function (task, delegate) {\n            const typeOfDelegate = typeof delegate;\n            return (typeOfDelegate === 'function' && task.callback === delegate) ||\n                (typeOfDelegate === 'object' && task.originalDelegate === delegate);\n        };\n        const compare = (patchOptions && patchOptions.diff) ? patchOptions.diff : compareTaskCallbackVsDelegate;\n        const unpatchedEvents = Zone[zoneSymbol('UNPATCHED_EVENTS')];\n        const passiveEvents = _global[zoneSymbol('PASSIVE_EVENTS')];\n        const makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget = false, prepend = false) {\n            return function () {\n                const target = this || _global;\n                let eventName = arguments[0];\n                if (patchOptions && patchOptions.transferEventName) {\n                    eventName = patchOptions.transferEventName(eventName);\n                }\n                let delegate = arguments[1];\n                if (!delegate) {\n                    return nativeListener.apply(this, arguments);\n                }\n                if (isNode && eventName === 'uncaughtException') {\n                    // don't patch uncaughtException of nodejs to prevent endless loop\n                    return nativeListener.apply(this, arguments);\n                }\n                // don't create the bind delegate function for handleEvent\n                // case here to improve addEventListener performance\n                // we will create the bind delegate when invoke\n                let isHandleEvent = false;\n                if (typeof delegate !== 'function') {\n                    if (!delegate.handleEvent) {\n                        return nativeListener.apply(this, arguments);\n                    }\n                    isHandleEvent = true;\n                }\n                if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {\n                    return;\n                }\n                const passive = passiveSupported && !!passiveEvents && passiveEvents.indexOf(eventName) !== -1;\n                const options = buildEventListenerOptions(arguments[2], passive);\n                if (unpatchedEvents) {\n                    // check upatched list\n                    for (let i = 0; i < unpatchedEvents.length; i++) {\n                        if (eventName === unpatchedEvents[i]) {\n                            if (passive) {\n                                return nativeListener.call(target, eventName, delegate, options);\n                            }\n                            else {\n                                return nativeListener.apply(this, arguments);\n                            }\n                        }\n                    }\n                }\n                const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\n                const once = options && typeof options === 'object' ? options.once : false;\n                const zone = Zone.current;\n                let symbolEventNames = zoneSymbolEventNames$1[eventName];\n                if (!symbolEventNames) {\n                    prepareEventNames(eventName, eventNameToString);\n                    symbolEventNames = zoneSymbolEventNames$1[eventName];\n                }\n                const symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n                let existingTasks = target[symbolEventName];\n                let isExisting = false;\n                if (existingTasks) {\n                    // already have task registered\n                    isExisting = true;\n                    if (checkDuplicate) {\n                        for (let i = 0; i < existingTasks.length; i++) {\n                            if (compare(existingTasks[i], delegate)) {\n                                // same callback, same capture, same event name, just return\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    existingTasks = target[symbolEventName] = [];\n                }\n                let source;\n                const constructorName = target.constructor['name'];\n                const targetSource = globalSources[constructorName];\n                if (targetSource) {\n                    source = targetSource[eventName];\n                }\n                if (!source) {\n                    source = constructorName + addSource +\n                        (eventNameToString ? eventNameToString(eventName) : eventName);\n                }\n                // do not create a new object as task.data to pass those things\n                // just use the global shared one\n                taskData.options = options;\n                if (once) {\n                    // if addEventListener with once options, we don't pass it to\n                    // native addEventListener, instead we keep the once setting\n                    // and handle ourselves.\n                    taskData.options.once = false;\n                }\n                taskData.target = target;\n                taskData.capture = capture;\n                taskData.eventName = eventName;\n                taskData.isExisting = isExisting;\n                const data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : undefined;\n                // keep taskData into data to allow onScheduleEventTask to access the task information\n                if (data) {\n                    data.taskData = taskData;\n                }\n                const task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);\n                // should clear taskData.target to avoid memory leak\n                // issue, https://github.com/angular/angular/issues/20442\n                taskData.target = null;\n                // need to clear up taskData because it is a global object\n                if (data) {\n                    data.taskData = null;\n                }\n                // have to save those information to task in case\n                // application may call task.zone.cancelTask() directly\n                if (once) {\n                    options.once = true;\n                }\n                if (!(!passiveSupported && typeof task.options === 'boolean')) {\n                    // if not support passive, and we pass an option object\n                    // to addEventListener, we should save the options to task\n                    task.options = options;\n                }\n                task.target = target;\n                task.capture = capture;\n                task.eventName = eventName;\n                if (isHandleEvent) {\n                    // save original delegate for compare to check duplicate\n                    task.originalDelegate = delegate;\n                }\n                if (!prepend) {\n                    existingTasks.push(task);\n                }\n                else {\n                    existingTasks.unshift(task);\n                }\n                if (returnTarget) {\n                    return target;\n                }\n            };\n        };\n        proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);\n        if (nativePrependEventListener) {\n            proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);\n        }\n        proto[REMOVE_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (patchOptions && patchOptions.transferEventName) {\n                eventName = patchOptions.transferEventName(eventName);\n            }\n            const options = arguments[2];\n            const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\n            const delegate = arguments[1];\n            if (!delegate) {\n                return nativeRemoveEventListener.apply(this, arguments);\n            }\n            if (validateHandler &&\n                !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {\n                return;\n            }\n            const symbolEventNames = zoneSymbolEventNames$1[eventName];\n            let symbolEventName;\n            if (symbolEventNames) {\n                symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n            }\n            const existingTasks = symbolEventName && target[symbolEventName];\n            if (existingTasks) {\n                for (let i = 0; i < existingTasks.length; i++) {\n                    const existingTask = existingTasks[i];\n                    if (compare(existingTask, delegate)) {\n                        existingTasks.splice(i, 1);\n                        // set isRemoved to data for faster invokeTask check\n                        existingTask.isRemoved = true;\n                        if (existingTasks.length === 0) {\n                            // all tasks for the eventName + capture have gone,\n                            // remove globalZoneAwareCallback and remove the task cache from target\n                            existingTask.allRemoved = true;\n                            target[symbolEventName] = null;\n                            // in the target, we have an event listener which is added by on_property\n                            // such as target.onclick = function() {}, so we need to clear this internal\n                            // property too if all delegates all removed\n                            if (typeof eventName === 'string') {\n                                const onPropertySymbol = ZONE_SYMBOL_PREFIX + 'ON_PROPERTY' + eventName;\n                                target[onPropertySymbol] = null;\n                            }\n                        }\n                        existingTask.zone.cancelTask(existingTask);\n                        if (returnTarget) {\n                            return target;\n                        }\n                        return;\n                    }\n                }\n            }\n            // issue 930, didn't find the event name or callback\n            // from zone kept existingTasks, the callback maybe\n            // added outside of zone, we need to call native removeEventListener\n            // to try to remove it.\n            return nativeRemoveEventListener.apply(this, arguments);\n        };\n        proto[LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (patchOptions && patchOptions.transferEventName) {\n                eventName = patchOptions.transferEventName(eventName);\n            }\n            const listeners = [];\n            const tasks = findEventTasks(target, eventNameToString ? eventNameToString(eventName) : eventName);\n            for (let i = 0; i < tasks.length; i++) {\n                const task = tasks[i];\n                let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                listeners.push(delegate);\n            }\n            return listeners;\n        };\n        proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (!eventName) {\n                const keys = Object.keys(target);\n                for (let i = 0; i < keys.length; i++) {\n                    const prop = keys[i];\n                    const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n                    let evtName = match && match[1];\n                    // in nodejs EventEmitter, removeListener event is\n                    // used for monitoring the removeListener call,\n                    // so just keep removeListener eventListener until\n                    // all other eventListeners are removed\n                    if (evtName && evtName !== 'removeListener') {\n                        this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, evtName);\n                    }\n                }\n                // remove removeListener listener finally\n                this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, 'removeListener');\n            }\n            else {\n                if (patchOptions && patchOptions.transferEventName) {\n                    eventName = patchOptions.transferEventName(eventName);\n                }\n                const symbolEventNames = zoneSymbolEventNames$1[eventName];\n                if (symbolEventNames) {\n                    const symbolEventName = symbolEventNames[FALSE_STR];\n                    const symbolCaptureEventName = symbolEventNames[TRUE_STR];\n                    const tasks = target[symbolEventName];\n                    const captureTasks = target[symbolCaptureEventName];\n                    if (tasks) {\n                        const removeTasks = tasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                    if (captureTasks) {\n                        const removeTasks = captureTasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                }\n            }\n            if (returnTarget) {\n                return this;\n            }\n        };\n        // for native toString patch\n        attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);\n        attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);\n        if (nativeRemoveAllListeners) {\n            attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);\n        }\n        if (nativeListeners) {\n            attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);\n        }\n        return true;\n    }\n    let results = [];\n    for (let i = 0; i < apis.length; i++) {\n        results[i] = patchEventTargetMethods(apis[i], patchOptions);\n    }\n    return results;\n}\nfunction findEventTasks(target, eventName) {\n    if (!eventName) {\n        const foundTasks = [];\n        for (let prop in target) {\n            const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n            let evtName = match && match[1];\n            if (evtName && (!eventName || evtName === eventName)) {\n                const tasks = target[prop];\n                if (tasks) {\n                    for (let i = 0; i < tasks.length; i++) {\n                        foundTasks.push(tasks[i]);\n                    }\n                }\n            }\n        }\n        return foundTasks;\n    }\n    let symbolEventName = zoneSymbolEventNames$1[eventName];\n    if (!symbolEventName) {\n        prepareEventNames(eventName);\n        symbolEventName = zoneSymbolEventNames$1[eventName];\n    }\n    const captureFalseTasks = target[symbolEventName[FALSE_STR]];\n    const captureTrueTasks = target[symbolEventName[TRUE_STR]];\n    if (!captureFalseTasks) {\n        return captureTrueTasks ? captureTrueTasks.slice() : [];\n    }\n    else {\n        return captureTrueTasks ? captureFalseTasks.concat(captureTrueTasks) :\n            captureFalseTasks.slice();\n    }\n}\nfunction patchEventPrototype(global, api) {\n    const Event = global['Event'];\n    if (Event && Event.prototype) {\n        api.patchMethod(Event.prototype, 'stopImmediatePropagation', (delegate) => function (self, args) {\n            self[IMMEDIATE_PROPAGATION_SYMBOL] = true;\n            // we need to call the native stopImmediatePropagation\n            // in case in some hybrid application, some part of\n            // application will be controlled by zone, some are not\n            delegate && delegate.apply(self, args);\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction patchCallbacks(api, target, targetName, method, callbacks) {\n    const symbol = Zone.__symbol__(method);\n    if (target[symbol]) {\n        return;\n    }\n    const nativeDelegate = target[symbol] = target[method];\n    target[method] = function (name, opts, options) {\n        if (opts && opts.prototype) {\n            callbacks.forEach(function (callback) {\n                const source = `${targetName}.${method}::` + callback;\n                const prototype = opts.prototype;\n                if (prototype.hasOwnProperty(callback)) {\n                    const descriptor = api.ObjectGetOwnPropertyDescriptor(prototype, callback);\n                    if (descriptor && descriptor.value) {\n                        descriptor.value = api.wrapWithCurrentZone(descriptor.value, source);\n                        api._redefineProperty(opts.prototype, callback, descriptor);\n                    }\n                    else if (prototype[callback]) {\n                        prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                    }\n                }\n                else if (prototype[callback]) {\n                    prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                }\n            });\n        }\n        return nativeDelegate.call(target, name, opts, options);\n    };\n    api.attachOriginToPatched(target[method], nativeDelegate);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst globalEventHandlersEventNames = [\n    'abort',\n    'animationcancel',\n    'animationend',\n    'animationiteration',\n    'auxclick',\n    'beforeinput',\n    'blur',\n    'cancel',\n    'canplay',\n    'canplaythrough',\n    'change',\n    'compositionstart',\n    'compositionupdate',\n    'compositionend',\n    'cuechange',\n    'click',\n    'close',\n    'contextmenu',\n    'curechange',\n    'dblclick',\n    'drag',\n    'dragend',\n    'dragenter',\n    'dragexit',\n    'dragleave',\n    'dragover',\n    'drop',\n    'durationchange',\n    'emptied',\n    'ended',\n    'error',\n    'focus',\n    'focusin',\n    'focusout',\n    'gotpointercapture',\n    'input',\n    'invalid',\n    'keydown',\n    'keypress',\n    'keyup',\n    'load',\n    'loadstart',\n    'loadeddata',\n    'loadedmetadata',\n    'lostpointercapture',\n    'mousedown',\n    'mouseenter',\n    'mouseleave',\n    'mousemove',\n    'mouseout',\n    'mouseover',\n    'mouseup',\n    'mousewheel',\n    'orientationchange',\n    'pause',\n    'play',\n    'playing',\n    'pointercancel',\n    'pointerdown',\n    'pointerenter',\n    'pointerleave',\n    'pointerlockchange',\n    'mozpointerlockchange',\n    'webkitpointerlockerchange',\n    'pointerlockerror',\n    'mozpointerlockerror',\n    'webkitpointerlockerror',\n    'pointermove',\n    'pointout',\n    'pointerover',\n    'pointerup',\n    'progress',\n    'ratechange',\n    'reset',\n    'resize',\n    'scroll',\n    'seeked',\n    'seeking',\n    'select',\n    'selectionchange',\n    'selectstart',\n    'show',\n    'sort',\n    'stalled',\n    'submit',\n    'suspend',\n    'timeupdate',\n    'volumechange',\n    'touchcancel',\n    'touchmove',\n    'touchstart',\n    'touchend',\n    'transitioncancel',\n    'transitionend',\n    'waiting',\n    'wheel'\n];\nconst documentEventNames = [\n    'afterscriptexecute', 'beforescriptexecute', 'DOMContentLoaded', 'freeze', 'fullscreenchange',\n    'mozfullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange', 'fullscreenerror',\n    'mozfullscreenerror', 'webkitfullscreenerror', 'msfullscreenerror', 'readystatechange',\n    'visibilitychange', 'resume'\n];\nconst windowEventNames = [\n    'absolutedeviceorientation',\n    'afterinput',\n    'afterprint',\n    'appinstalled',\n    'beforeinstallprompt',\n    'beforeprint',\n    'beforeunload',\n    'devicelight',\n    'devicemotion',\n    'deviceorientation',\n    'deviceorientationabsolute',\n    'deviceproximity',\n    'hashchange',\n    'languagechange',\n    'message',\n    'mozbeforepaint',\n    'offline',\n    'online',\n    'paint',\n    'pageshow',\n    'pagehide',\n    'popstate',\n    'rejectionhandled',\n    'storage',\n    'unhandledrejection',\n    'unload',\n    'userproximity',\n    'vrdisplayconnected',\n    'vrdisplaydisconnected',\n    'vrdisplaypresentchange'\n];\nconst htmlElementEventNames = [\n    'beforecopy', 'beforecut', 'beforepaste', 'copy', 'cut', 'paste', 'dragstart', 'loadend',\n    'animationstart', 'search', 'transitionrun', 'transitionstart', 'webkitanimationend',\n    'webkitanimationiteration', 'webkitanimationstart', 'webkittransitionend'\n];\nconst mediaElementEventNames = ['encrypted', 'waitingforkey', 'msneedkey', 'mozinterruptbegin', 'mozinterruptend'];\nconst ieElementEventNames = [\n    'activate',\n    'afterupdate',\n    'ariarequest',\n    'beforeactivate',\n    'beforedeactivate',\n    'beforeeditfocus',\n    'beforeupdate',\n    'cellchange',\n    'controlselect',\n    'dataavailable',\n    'datasetchanged',\n    'datasetcomplete',\n    'errorupdate',\n    'filterchange',\n    'layoutcomplete',\n    'losecapture',\n    'move',\n    'moveend',\n    'movestart',\n    'propertychange',\n    'resizeend',\n    'resizestart',\n    'rowenter',\n    'rowexit',\n    'rowsdelete',\n    'rowsinserted',\n    'command',\n    'compassneedscalibration',\n    'deactivate',\n    'help',\n    'mscontentzoom',\n    'msmanipulationstatechanged',\n    'msgesturechange',\n    'msgesturedoubletap',\n    'msgestureend',\n    'msgesturehold',\n    'msgesturestart',\n    'msgesturetap',\n    'msgotpointercapture',\n    'msinertiastart',\n    'mslostpointercapture',\n    'mspointercancel',\n    'mspointerdown',\n    'mspointerenter',\n    'mspointerhover',\n    'mspointerleave',\n    'mspointermove',\n    'mspointerout',\n    'mspointerover',\n    'mspointerup',\n    'pointerout',\n    'mssitemodejumplistitemremoved',\n    'msthumbnailclick',\n    'stop',\n    'storagecommit'\n];\nconst webglEventNames = ['webglcontextrestored', 'webglcontextlost', 'webglcontextcreationerror'];\nconst formEventNames = ['autocomplete', 'autocompleteerror'];\nconst detailEventNames = ['toggle'];\nconst frameEventNames = ['load'];\nconst frameSetEventNames = ['blur', 'error', 'focus', 'load', 'resize', 'scroll', 'messageerror'];\nconst marqueeEventNames = ['bounce', 'finish', 'start'];\nconst XMLHttpRequestEventNames = [\n    'loadstart', 'progress', 'abort', 'error', 'load', 'progress', 'timeout', 'loadend',\n    'readystatechange'\n];\nconst IDBIndexEventNames = ['upgradeneeded', 'complete', 'abort', 'success', 'error', 'blocked', 'versionchange', 'close'];\nconst websocketEventNames = ['close', 'error', 'open', 'message'];\nconst workerEventNames = ['error', 'message'];\nconst eventNames = globalEventHandlersEventNames.concat(webglEventNames, formEventNames, detailEventNames, documentEventNames, windowEventNames, htmlElementEventNames, ieElementEventNames);\nfunction filterProperties(target, onProperties, ignoreProperties) {\n    if (!ignoreProperties || ignoreProperties.length === 0) {\n        return onProperties;\n    }\n    const tip = ignoreProperties.filter(ip => ip.target === target);\n    if (!tip || tip.length === 0) {\n        return onProperties;\n    }\n    const targetIgnoreProperties = tip[0].ignoreProperties;\n    return onProperties.filter(op => targetIgnoreProperties.indexOf(op) === -1);\n}\nfunction patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {\n    // check whether target is available, sometimes target will be undefined\n    // because different browser or some 3rd party plugin.\n    if (!target) {\n        return;\n    }\n    const filteredProperties = filterProperties(target, onProperties, ignoreProperties);\n    patchOnProperties(target, filteredProperties, prototype);\n}\nfunction propertyDescriptorPatch(api, _global) {\n    if (isNode && !isMix) {\n        return;\n    }\n    if (Zone[api.symbol('patchEvents')]) {\n        // events are already been patched by legacy patch.\n        return;\n    }\n    const supportsWebSocket = typeof WebSocket !== 'undefined';\n    const ignoreProperties = _global['__Zone_ignore_on_properties'];\n    // for browsers that we can patch the descriptor:  Chrome & Firefox\n    if (isBrowser) {\n        const internalWindow = window;\n        const ignoreErrorProperties = isIE() ? [{ target: internalWindow, ignoreProperties: ['error'] }] : [];\n        // in IE/Edge, onProp not exist in window object, but in WindowPrototype\n        // so we need to pass WindowPrototype to check onProp exist or not\n        patchFilteredProperties(internalWindow, eventNames.concat(['messageerror']), ignoreProperties ? ignoreProperties.concat(ignoreErrorProperties) : ignoreProperties, ObjectGetPrototypeOf(internalWindow));\n        patchFilteredProperties(Document.prototype, eventNames, ignoreProperties);\n        if (typeof internalWindow['SVGElement'] !== 'undefined') {\n            patchFilteredProperties(internalWindow['SVGElement'].prototype, eventNames, ignoreProperties);\n        }\n        patchFilteredProperties(Element.prototype, eventNames, ignoreProperties);\n        patchFilteredProperties(HTMLElement.prototype, eventNames, ignoreProperties);\n        patchFilteredProperties(HTMLMediaElement.prototype, mediaElementEventNames, ignoreProperties);\n        patchFilteredProperties(HTMLFrameSetElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);\n        patchFilteredProperties(HTMLBodyElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);\n        patchFilteredProperties(HTMLFrameElement.prototype, frameEventNames, ignoreProperties);\n        patchFilteredProperties(HTMLIFrameElement.prototype, frameEventNames, ignoreProperties);\n        const HTMLMarqueeElement = internalWindow['HTMLMarqueeElement'];\n        if (HTMLMarqueeElement) {\n            patchFilteredProperties(HTMLMarqueeElement.prototype, marqueeEventNames, ignoreProperties);\n        }\n        const Worker = internalWindow['Worker'];\n        if (Worker) {\n            patchFilteredProperties(Worker.prototype, workerEventNames, ignoreProperties);\n        }\n    }\n    const XMLHttpRequest = _global['XMLHttpRequest'];\n    if (XMLHttpRequest) {\n        // XMLHttpRequest is not available in ServiceWorker, so we need to check here\n        patchFilteredProperties(XMLHttpRequest.prototype, XMLHttpRequestEventNames, ignoreProperties);\n    }\n    const XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];\n    if (XMLHttpRequestEventTarget) {\n        patchFilteredProperties(XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype, XMLHttpRequestEventNames, ignoreProperties);\n    }\n    if (typeof IDBIndex !== 'undefined') {\n        patchFilteredProperties(IDBIndex.prototype, IDBIndexEventNames, ignoreProperties);\n        patchFilteredProperties(IDBRequest.prototype, IDBIndexEventNames, ignoreProperties);\n        patchFilteredProperties(IDBOpenDBRequest.prototype, IDBIndexEventNames, ignoreProperties);\n        patchFilteredProperties(IDBDatabase.prototype, IDBIndexEventNames, ignoreProperties);\n        patchFilteredProperties(IDBTransaction.prototype, IDBIndexEventNames, ignoreProperties);\n        patchFilteredProperties(IDBCursor.prototype, IDBIndexEventNames, ignoreProperties);\n    }\n    if (supportsWebSocket) {\n        patchFilteredProperties(WebSocket.prototype, websocketEventNames, ignoreProperties);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('util', (global, Zone, api) => {\n    api.patchOnProperties = patchOnProperties;\n    api.patchMethod = patchMethod;\n    api.bindArguments = bindArguments;\n    api.patchMacroTask = patchMacroTask;\n    // In earlier version of zone.js (<0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS` to\n    // define which events will not be patched by `Zone.js`.\n    // In newer version (>=0.9.0), we change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep\n    // the name consistent with angular repo.\n    // The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be supported for\n    // backwards compatibility.\n    const SYMBOL_BLACK_LISTED_EVENTS = Zone.__symbol__('BLACK_LISTED_EVENTS');\n    const SYMBOL_UNPATCHED_EVENTS = Zone.__symbol__('UNPATCHED_EVENTS');\n    if (global[SYMBOL_UNPATCHED_EVENTS]) {\n        global[SYMBOL_BLACK_LISTED_EVENTS] = global[SYMBOL_UNPATCHED_EVENTS];\n    }\n    if (global[SYMBOL_BLACK_LISTED_EVENTS]) {\n        Zone[SYMBOL_BLACK_LISTED_EVENTS] = Zone[SYMBOL_UNPATCHED_EVENTS] =\n            global[SYMBOL_BLACK_LISTED_EVENTS];\n    }\n    api.patchEventPrototype = patchEventPrototype;\n    api.patchEventTarget = patchEventTarget;\n    api.isIEOrEdge = isIEOrEdge;\n    api.ObjectDefineProperty = ObjectDefineProperty;\n    api.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;\n    api.ObjectCreate = ObjectCreate;\n    api.ArraySlice = ArraySlice;\n    api.patchClass = patchClass;\n    api.wrapWithCurrentZone = wrapWithCurrentZone;\n    api.filterProperties = filterProperties;\n    api.attachOriginToPatched = attachOriginToPatched;\n    api._redefineProperty = Object.defineProperty;\n    api.patchCallbacks = patchCallbacks;\n    api.getGlobalObjects = () => ({\n        globalSources,\n        zoneSymbolEventNames: zoneSymbolEventNames$1,\n        eventNames,\n        isBrowser,\n        isMix,\n        isNode,\n        TRUE_STR,\n        FALSE_STR,\n        ZONE_SYMBOL_PREFIX,\n        ADD_EVENT_LISTENER_STR,\n        REMOVE_EVENT_LISTENER_STR\n    });\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst taskSymbol = zoneSymbol('zoneTask');\nfunction patchTimer(window, setName, cancelName, nameSuffix) {\n    let setNative = null;\n    let clearNative = null;\n    setName += nameSuffix;\n    cancelName += nameSuffix;\n    const tasksByHandleId = {};\n    function scheduleTask(task) {\n        const data = task.data;\n        data.args[0] = function () {\n            return task.invoke.apply(this, arguments);\n        };\n        data.handleId = setNative.apply(window, data.args);\n        return task;\n    }\n    function clearTask(task) {\n        return clearNative.call(window, task.data.handleId);\n    }\n    setNative =\n        patchMethod(window, setName, (delegate) => function (self, args) {\n            if (typeof args[0] === 'function') {\n                const options = {\n                    isPeriodic: nameSuffix === 'Interval',\n                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 :\n                        undefined,\n                    args: args\n                };\n                const callback = args[0];\n                args[0] = function timer() {\n                    try {\n                        return callback.apply(this, arguments);\n                    }\n                    finally {\n                        // issue-934, task will be cancelled\n                        // even it is a periodic task such as\n                        // setInterval\n                        // https://github.com/angular/angular/issues/40387\n                        // Cleanup tasksByHandleId should be handled before scheduleTask\n                        // Since some zoneSpec may intercept and doesn't trigger\n                        // scheduleFn(scheduleTask) provided here.\n                        if (!(options.isPeriodic)) {\n                            if (typeof options.handleId === 'number') {\n                                // in non-nodejs env, we remove timerId\n                                // from local cache\n                                delete tasksByHandleId[options.handleId];\n                            }\n                            else if (options.handleId) {\n                                // Node returns complex objects as handleIds\n                                // we remove task reference from timer object\n                                options.handleId[taskSymbol] = null;\n                            }\n                        }\n                    }\n                };\n                const task = scheduleMacroTaskWithCurrentZone(setName, args[0], options, scheduleTask, clearTask);\n                if (!task) {\n                    return task;\n                }\n                // Node.js must additionally support the ref and unref functions.\n                const handle = task.data.handleId;\n                if (typeof handle === 'number') {\n                    // for non nodejs env, we save handleId: task\n                    // mapping in local cache for clearTimeout\n                    tasksByHandleId[handle] = task;\n                }\n                else if (handle) {\n                    // for nodejs env, we save task\n                    // reference in timerId Object for clearTimeout\n                    handle[taskSymbol] = task;\n                }\n                // check whether handle is null, because some polyfill or browser\n                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame\n                if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&\n                    typeof handle.unref === 'function') {\n                    task.ref = handle.ref.bind(handle);\n                    task.unref = handle.unref.bind(handle);\n                }\n                if (typeof handle === 'number' || handle) {\n                    return handle;\n                }\n                return task;\n            }\n            else {\n                // cause an error by calling it directly.\n                return delegate.apply(window, args);\n            }\n        });\n    clearNative =\n        patchMethod(window, cancelName, (delegate) => function (self, args) {\n            const id = args[0];\n            let task;\n            if (typeof id === 'number') {\n                // non nodejs env.\n                task = tasksByHandleId[id];\n            }\n            else {\n                // nodejs env.\n                task = id && id[taskSymbol];\n                // other environments.\n                if (!task) {\n                    task = id;\n                }\n            }\n            if (task && typeof task.type === 'string') {\n                if (task.state !== 'notScheduled' &&\n                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {\n                    if (typeof id === 'number') {\n                        delete tasksByHandleId[id];\n                    }\n                    else if (id) {\n                        id[taskSymbol] = null;\n                    }\n                    // Do not cancel already canceled functions\n                    task.zone.cancelTask(task);\n                }\n            }\n            else {\n                // cause an error by calling it directly.\n                delegate.apply(window, args);\n            }\n        });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction patchCustomElements(_global, api) {\n    const { isBrowser, isMix } = api.getGlobalObjects();\n    if ((!isBrowser && !isMix) || !_global['customElements'] || !('customElements' in _global)) {\n        return;\n    }\n    const callbacks = ['connectedCallback', 'disconnectedCallback', 'adoptedCallback', 'attributeChangedCallback'];\n    api.patchCallbacks(api, _global.customElements, 'customElements', 'define', callbacks);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction eventTargetPatch(_global, api) {\n    if (Zone[api.symbol('patchEventTarget')]) {\n        // EventTarget is already patched.\n        return;\n    }\n    const { eventNames, zoneSymbolEventNames, TRUE_STR, FALSE_STR, ZONE_SYMBOL_PREFIX } = api.getGlobalObjects();\n    //  predefine all __zone_symbol__ + eventName + true/false string\n    for (let i = 0; i < eventNames.length; i++) {\n        const eventName = eventNames[i];\n        const falseEventName = eventName + FALSE_STR;\n        const trueEventName = eventName + TRUE_STR;\n        const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n        const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n        zoneSymbolEventNames[eventName] = {};\n        zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n        zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n    }\n    const EVENT_TARGET = _global['EventTarget'];\n    if (!EVENT_TARGET || !EVENT_TARGET.prototype) {\n        return;\n    }\n    api.patchEventTarget(_global, [EVENT_TARGET && EVENT_TARGET.prototype]);\n    return true;\n}\nfunction patchEvent(global, api) {\n    api.patchEventPrototype(global, api);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('legacy', (global) => {\n    const legacyPatch = global[Zone.__symbol__('legacyPatch')];\n    if (legacyPatch) {\n        legacyPatch();\n    }\n});\nZone.__load_patch('queueMicrotask', (global, Zone, api) => {\n    api.patchMethod(global, 'queueMicrotask', delegate => {\n        return function (self, args) {\n            Zone.current.scheduleMicroTask('queueMicrotask', args[0]);\n        };\n    });\n});\nZone.__load_patch('timers', (global) => {\n    const set = 'set';\n    const clear = 'clear';\n    patchTimer(global, set, clear, 'Timeout');\n    patchTimer(global, set, clear, 'Interval');\n    patchTimer(global, set, clear, 'Immediate');\n});\nZone.__load_patch('requestAnimationFrame', (global) => {\n    patchTimer(global, 'request', 'cancel', 'AnimationFrame');\n    patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');\n    patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\n});\nZone.__load_patch('blocking', (global, Zone) => {\n    const blockingMethods = ['alert', 'prompt', 'confirm'];\n    for (let i = 0; i < blockingMethods.length; i++) {\n        const name = blockingMethods[i];\n        patchMethod(global, name, (delegate, symbol, name) => {\n            return function (s, args) {\n                return Zone.current.run(delegate, global, args, name);\n            };\n        });\n    }\n});\nZone.__load_patch('EventTarget', (global, Zone, api) => {\n    patchEvent(global, api);\n    eventTargetPatch(global, api);\n    // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener\n    const XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];\n    if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {\n        api.patchEventTarget(global, [XMLHttpRequestEventTarget.prototype]);\n    }\n});\nZone.__load_patch('MutationObserver', (global, Zone, api) => {\n    patchClass('MutationObserver');\n    patchClass('WebKitMutationObserver');\n});\nZone.__load_patch('IntersectionObserver', (global, Zone, api) => {\n    patchClass('IntersectionObserver');\n});\nZone.__load_patch('FileReader', (global, Zone, api) => {\n    patchClass('FileReader');\n});\nZone.__load_patch('on_property', (global, Zone, api) => {\n    propertyDescriptorPatch(api, global);\n});\nZone.__load_patch('customElements', (global, Zone, api) => {\n    patchCustomElements(global, api);\n});\nZone.__load_patch('XHR', (global, Zone) => {\n    // Treat XMLHttpRequest as a macrotask.\n    patchXHR(global);\n    const XHR_TASK = zoneSymbol('xhrTask');\n    const XHR_SYNC = zoneSymbol('xhrSync');\n    const XHR_LISTENER = zoneSymbol('xhrListener');\n    const XHR_SCHEDULED = zoneSymbol('xhrScheduled');\n    const XHR_URL = zoneSymbol('xhrURL');\n    const XHR_ERROR_BEFORE_SCHEDULED = zoneSymbol('xhrErrorBeforeScheduled');\n    function patchXHR(window) {\n        const XMLHttpRequest = window['XMLHttpRequest'];\n        if (!XMLHttpRequest) {\n            // XMLHttpRequest is not available in service worker\n            return;\n        }\n        const XMLHttpRequestPrototype = XMLHttpRequest.prototype;\n        function findPendingTask(target) {\n            return target[XHR_TASK];\n        }\n        let oriAddListener = XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n        let oriRemoveListener = XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n        if (!oriAddListener) {\n            const XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];\n            if (XMLHttpRequestEventTarget) {\n                const XMLHttpRequestEventTargetPrototype = XMLHttpRequestEventTarget.prototype;\n                oriAddListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                oriRemoveListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n            }\n        }\n        const READY_STATE_CHANGE = 'readystatechange';\n        const SCHEDULED = 'scheduled';\n        function scheduleTask(task) {\n            const data = task.data;\n            const target = data.target;\n            target[XHR_SCHEDULED] = false;\n            target[XHR_ERROR_BEFORE_SCHEDULED] = false;\n            // remove existing event listener\n            const listener = target[XHR_LISTENER];\n            if (!oriAddListener) {\n                oriAddListener = target[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                oriRemoveListener = target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n            }\n            if (listener) {\n                oriRemoveListener.call(target, READY_STATE_CHANGE, listener);\n            }\n            const newListener = target[XHR_LISTENER] = () => {\n                if (target.readyState === target.DONE) {\n                    // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with\n                    // readyState=4 multiple times, so we need to check task state here\n                    if (!data.aborted && target[XHR_SCHEDULED] && task.state === SCHEDULED) {\n                        // check whether the xhr has registered onload listener\n                        // if that is the case, the task should invoke after all\n                        // onload listeners finish.\n                        // Also if the request failed without response (status = 0), the load event handler\n                        // will not be triggered, in that case, we should also invoke the placeholder callback\n                        // to close the XMLHttpRequest::send macroTask.\n                        // https://github.com/angular/angular/issues/38795\n                        const loadTasks = target[Zone.__symbol__('loadfalse')];\n                        if (target.status !== 0 && loadTasks && loadTasks.length > 0) {\n                            const oriInvoke = task.invoke;\n                            task.invoke = function () {\n                                // need to load the tasks again, because in other\n                                // load listener, they may remove themselves\n                                const loadTasks = target[Zone.__symbol__('loadfalse')];\n                                for (let i = 0; i < loadTasks.length; i++) {\n                                    if (loadTasks[i] === task) {\n                                        loadTasks.splice(i, 1);\n                                    }\n                                }\n                                if (!data.aborted && task.state === SCHEDULED) {\n                                    oriInvoke.call(task);\n                                }\n                            };\n                            loadTasks.push(task);\n                        }\n                        else {\n                            task.invoke();\n                        }\n                    }\n                    else if (!data.aborted && target[XHR_SCHEDULED] === false) {\n                        // error occurs when xhr.send()\n                        target[XHR_ERROR_BEFORE_SCHEDULED] = true;\n                    }\n                }\n            };\n            oriAddListener.call(target, READY_STATE_CHANGE, newListener);\n            const storedTask = target[XHR_TASK];\n            if (!storedTask) {\n                target[XHR_TASK] = task;\n            }\n            sendNative.apply(target, data.args);\n            target[XHR_SCHEDULED] = true;\n            return task;\n        }\n        function placeholderCallback() { }\n        function clearTask(task) {\n            const data = task.data;\n            // Note - ideally, we would call data.target.removeEventListener here, but it's too late\n            // to prevent it from firing. So instead, we store info for the event listener.\n            data.aborted = true;\n            return abortNative.apply(data.target, data.args);\n        }\n        const openNative = patchMethod(XMLHttpRequestPrototype, 'open', () => function (self, args) {\n            self[XHR_SYNC] = args[2] == false;\n            self[XHR_URL] = args[1];\n            return openNative.apply(self, args);\n        });\n        const XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';\n        const fetchTaskAborting = zoneSymbol('fetchTaskAborting');\n        const fetchTaskScheduling = zoneSymbol('fetchTaskScheduling');\n        const sendNative = patchMethod(XMLHttpRequestPrototype, 'send', () => function (self, args) {\n            if (Zone.current[fetchTaskScheduling] === true) {\n                // a fetch is scheduling, so we are using xhr to polyfill fetch\n                // and because we already schedule macroTask for fetch, we should\n                // not schedule a macroTask for xhr again\n                return sendNative.apply(self, args);\n            }\n            if (self[XHR_SYNC]) {\n                // if the XHR is sync there is no task to schedule, just execute the code.\n                return sendNative.apply(self, args);\n            }\n            else {\n                const options = { target: self, url: self[XHR_URL], isPeriodic: false, args: args, aborted: false };\n                const task = scheduleMacroTaskWithCurrentZone(XMLHTTPREQUEST_SOURCE, placeholderCallback, options, scheduleTask, clearTask);\n                if (self && self[XHR_ERROR_BEFORE_SCHEDULED] === true && !options.aborted &&\n                    task.state === SCHEDULED) {\n                    // xhr request throw error when send\n                    // we should invoke task instead of leaving a scheduled\n                    // pending macroTask\n                    task.invoke();\n                }\n            }\n        });\n        const abortNative = patchMethod(XMLHttpRequestPrototype, 'abort', () => function (self, args) {\n            const task = findPendingTask(self);\n            if (task && typeof task.type == 'string') {\n                // If the XHR has already completed, do nothing.\n                // If the XHR has already been aborted, do nothing.\n                // Fix #569, call abort multiple times before done will cause\n                // macroTask task count be negative number\n                if (task.cancelFn == null || (task.data && task.data.aborted)) {\n                    return;\n                }\n                task.zone.cancelTask(task);\n            }\n            else if (Zone.current[fetchTaskAborting] === true) {\n                // the abort is called from fetch polyfill, we need to call native abort of XHR.\n                return abortNative.apply(self, args);\n            }\n            // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no\n            // task\n            // to cancel. Do nothing.\n        });\n    }\n});\nZone.__load_patch('geolocation', (global) => {\n    /// GEO_LOCATION\n    if (global['navigator'] && global['navigator'].geolocation) {\n        patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);\n    }\n});\nZone.__load_patch('PromiseRejectionEvent', (global, Zone) => {\n    // handle unhandled promise rejection\n    function findPromiseRejectionHandler(evtName) {\n        return function (e) {\n            const eventTasks = findEventTasks(global, evtName);\n            eventTasks.forEach(eventTask => {\n                // windows has added unhandledrejection event listener\n                // trigger the event listener\n                const PromiseRejectionEvent = global['PromiseRejectionEvent'];\n                if (PromiseRejectionEvent) {\n                    const evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });\n                    eventTask.invoke(evt);\n                }\n            });\n        };\n    }\n    if (global['PromiseRejectionEvent']) {\n        Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =\n            findPromiseRejectionHandler('unhandledrejection');\n        Zone[zoneSymbol('rejectionHandledHandler')] =\n            findPromiseRejectionHandler('rejectionhandled');\n    }\n});\n\n\n//# sourceURL=webpack://SampleOpenTelemetry/./node_modules/zone.js/fesm2015/zone.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./assets/document-load.js");
/******/ 	
/******/ })()
;